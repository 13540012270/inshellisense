// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["elixir"] = model.Subcommand{
		Name:        []string{"elixir"},
		Description: `Elixir Language`,
		Args: []model.Arg{{
			Name:        "file",
			Description: `.exs file`,
			Generator:   nil, // TODO: port over generator
		}, {
			Name:       "data",
			IsOptional: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-e", "--eval"},
			Description: `Evaluates the given command`,
			Args: []model.Arg{{
				Name: "EXPRESSION",
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Prints this message and exits`,
		}, {
			Name:        []string{"-r"},
			Description: `Requires the given files/patterns`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "FILE",
			}},
		}, {
			Name:        []string{"-S"},
			Description: `Finds and executes the given script in $PATH`,
			Args: []model.Arg{{
				Name: "SCRIPT",
			}},
		}, {
			Name:        []string{"-pr"},
			Description: `Requires the given files/patterns in parallel`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "FILE",
			}},
		}, {
			Name:        []string{"-pa"},
			Description: `Prepends the given path to Erlang code path`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "PATH",
			}},
		}, {
			Name:        []string{"-pz"},
			Description: `Appends the given path to Erlang code path`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "PATH",
			}},
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Prints Elixir version and exits`,
		}, {
			Name:        []string{"--app"},
			Description: `Starts the given app and its dependencies`,
			Args: []model.Arg{{
				Name: "APP",
			}},
		}, {
			Name:        []string{"--erl"},
			Description: `Switches to be passed down to Erlang`,
			Args: []model.Arg{{
				Name: "SWITCHES",
			}},
		}, {
			Name:        []string{"--logger-otp-reports"},
			Description: `Enables or disables OTP reporting`,
			Args: []model.Arg{{
				Name: "BOOL",
			}},
		}, {
			Name:        []string{"--logger-sasl-reports"},
			Description: `Enables or disables SASL reporting`,
			Args: []model.Arg{{
				Name: "BOOL",
			}},
		}, {
			Name:        []string{"--no-halt"},
			Description: `Does not halt the Erlang VM after execution`,
		}, {
			Name:        []string{"--werl"},
			Description: `Uses Erlang's Windows shell GUI (Windows only)`,
		}, {
			Name:        []string{"--cookie"},
			Description: `Sets a cookie for this distributed node`,
			Args: []model.Arg{{
				Name: "COOKIE",
			}},
		}, {
			Name:        []string{"--hidden"},
			Description: `Makes a hidden node`,
		}, {
			Name:        []string{"--name"},
			Description: `Makes and assigns a name to the distributed node`,
			Args: []model.Arg{{
				Name: "NAME",
			}},
		}, {
			Name:        []string{"--rpc-eval"},
			Description: `Evaluates the given command on the given remote node`,
			Args: []model.Arg{{
				Name: "NODE",
			}, {
				Name: "COMMAND",
			}},
		}, {
			Name:        []string{"--sname"},
			Description: `Makes and assigns a short name to the distributed node`,
			Args: []model.Arg{{
				Name: "NAME",
			}},
		}, {
			Name:        []string{"--boot"},
			Description: `Uses the given FILE.boot to start the system`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "FILE",
			}},
		}, {
			Name:        []string{"--boot-var"},
			Description: `Makes $VAR available as VALUE to FILE.boot`,
			Args: []model.Arg{{
				Name: "VAR",
			}, {
				Name: "VALUE",
			}},
		}, {
			Name:        []string{"--erl-config"},
			Description: `Loads configuration in FILE.config written in Erlang`,
			Args: []model.Arg{{
				Name: "FILE",
			}},
		}, {
			Name:        []string{"--pipe-to"},
			Description: `Starts the Erlang VM as a named PIPEDIR and LOGDIR`,
			Args: []model.Arg{{
				Name: "PIPEDIR",
			}, {
				Name: "LOGDIR",
			}},
		}, {
			Name:        []string{"--vm-args"},
			Description: `Passes the contents in file as arguments to the VM`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "FILE",
			}},
		}},
	}
}
