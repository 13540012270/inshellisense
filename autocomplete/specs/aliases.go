// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["aliases"] = model.Subcommand{
		Name:        []string{"aliases"},
		Description: `Bash aliases on steroids, dynamic alias functions for bash`,
		Options: []model.Option{{
			Name:         []string{"--help", "-h"},
			Description:  `Prints help information`,
			IsPersistent: true,
		}, {
			Name:         []string{"--version", "-V"},
			Description:  `Prints version information`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"add"},
			Description: `Add an alias via the cli`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `The name of the alias`,
			}, {
				Name:        "command",
				Description: `The command you want to run`,
			}},
		}, {
			Name:        []string{"clone"},
			Description: `Clone external aliases`,
			Args: []model.Arg{{
				Name:        "username",
				Description: `The username of the aliases you want to clone`,
			}, {
				Name:        "repo_url",
				Description: `The git repo url of the aliases (defaults to github/<username>/dot-aliases)`,
			}},
			Options: []model.Option{{
				Name:        []string{"-E", "--enable"},
				Description: `Whether to enable the user if they are not currently enabled`,
			}},
		}, {
			Name:        []string{"directories"},
			Description: `List all directories initialized with aliases`,
		}, {
			Name:        []string{"exec"},
			Description: `Execute an alias for a given directory`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory where the alias is defined`,
			}, {
				Name:        "name",
				Description: `Name of alias`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Prints help information`,
		}, {
			Name:        []string{"init"},
			Description: `Initialize a directory for aliases`,
			Options: []model.Option{{
				Name:        []string{"-g", "--global"},
				Description: `Returns the global initialization for the app`,
			}, {
				Name:        []string{"-u", "--user"},
				Description: `Initialize aliases for a specific user`,
				Args: []model.Arg{{
					Name: "user",
				}},
			}},
		}, {
			Name:        []string{"list"},
			Description: `List the aliases available`,
			Options: []model.Option{{
				Name:        []string{"-g", "--global"},
				Description: `List only global aliases`,
			}, {
				Name:        []string{"-l", "--local"},
				Description: `List only local aliases`,
			}, {
				Name:        []string{"-d", "--directory"},
				Description: `List aliases for a specific directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "directory",
				}},
			}, {
				Name:        []string{"name"},
				Description: `List aliases for with a specific name`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}},
		}, {
			Name:        []string{"pull"},
			Description: `Pull a cloned user's aliases`,
			Args: []model.Arg{{
				Name:        "username",
				Description: `The username of the aliases you want to pull, leave blank to pull all user aliases`,
			}},
		}, {
			Name:        []string{"rehash"},
			Description: `Update the aliases`,
		}, {
			Name:        []string{"remove"},
			Description: `Remove an alias via the cli`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `The name of the alias`,
			}},
		}, {
			Name:        []string{"users"},
			Description: `List the users`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"disable"},
				Description: `Disable a user's aliases`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"enable"},
				Description: `Enable a user's aliases`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"help"},
				Description: `Prints this message or the help of the given subcommand(s)`,
			}, {
				Name:        []string{"move"},
				Description: `Move a user up or down the prioritization list`,
				Args: []model.Arg{{
					Name: "username",
				}, {
					Name: "prioritization",
				}},
			}, {
				Name:        []string{"use"},
				Description: `Assign a user to the top of the priority list`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}},
		}},
	}
}
