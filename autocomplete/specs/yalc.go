// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["yalc"] = model.Subcommand{
		Name:        []string{"yalc"},
		Description: `Work with yarn/npm packages locally like a boss`,
		Options: []model.Option{{
			Name:        []string{"--help"},
			Description: `Show help for yalc`,
		}, {
			Name:        []string{"--no-colors"},
			Description: `Disable colors`,
		}, {
			Name:        []string{"--quiet"},
			Description: `Fully disable output (except errors)`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"publish"},
			Description: `Copy all the files that should be published in remote NPM registry`,
			Options: []model.Option{{
				Name:        []string{"--push"},
				Description: `Publish package to the store and propagate all changes to existing yalc package installations`,
			}, {
				Name:        []string{"--no-scripts"},
				Description: `Publish without running scripts`,
			}, {
				Name:        []string{"--no-sig"},
				Description: `Disable adding hash signature of all files when copying package content`,
			}, {
				Name:        []string{"--content"},
				Description: `Show included files in the published package`,
			}, {
				Name:        []string{"--no-workspace-resolve"},
				Description: `Do not resolve 'workspace:' protocol in dependencies`,
			}, {
				Name:        []string{"--private"},
				Description: `Force publishing of private package`,
			}},
		}, {
			Name:        []string{"push"},
			Description: `Publish your package to the store and propagate all changes to existing yalc package installations`,
		}, {
			Name:        []string{"add"},
			Description: `Copy the current version from the store to your project`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to add`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--link"},
				Description: `Add a 'link:' dependency instead of 'file:'`,
			}, {
				Name:        []string{"--dev"},
				Description: `Add yalc package to dev dependencies`,
			}, {
				Name:        []string{"--pure"},
				Description: `Do not touch 'package.json' or 'node_modules'`,
			}, {
				Name:        []string{"--workspace", "-W"},
				Description: `Add dependency with 'workspace:' protocol`,
			}},
		}, {
			Name:        []string{"link"},
			Description: `Alterative to 'add', instead using local '.yalc' as symlink source`,
		}, {
			Name:        []string{"update"},
			Description: `Update package(s)`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package to update`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--update", "--upgrade", "--up"},
				Description: `Run package manager's update command for packages`,
			}},
		}, {
			Name:        []string{"remove"},
			Description: `Remove package info from 'package.json' & 'yalc.lock'`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to remove`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Remove all packages from project`,
			}},
		}, {
			Name: []string{"installations"},
			Subcommands: []model.Subcommand{{
				Name:        []string{"clean"},
				Description: `Unpublish a package published with yalc publish`,
				Args: []model.Arg{{
					Name:      "package",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"show"},
				Description: `Show all packages to which chosen package has been added`,
				Args: []model.Arg{{
					Name:      "package",
					Generator: nil, // TODO: port over generator
				}},
			}},
		}, {
			Name:        []string{"dir"},
			Description: `Show yalc system directory`,
		}, {
			Name:        []string{"check"},
			Description: `Check 'package.json' for yalc packages`,
		}, {
			Name:        []string{"restore"},
			Description: `Restore retreated packages`,
		}, {
			Name:        []string{"retreat"},
			Description: `Remove packages from project, but leave in lock file (to be restored later)`,
		}},
	}
}
