// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["spring"] = model.Subcommand{
		Name:        []string{"spring"},
		Description: `The Spring Boot CLI is a command line tool that you can use to bootstrap a new project from start.spring.io or encode a password`,
		Options: []model.Option{{
			Name:        []string{"--help"},
			Description: `Show help for spring`,
		}, {
			Name:        []string{"--version"},
			Description: `Get spring CLI version`,
		}, {
			Name:         []string{"--debug"},
			Description:  `Print additional status information for the command you are running`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"init"},
			Description: `Initialize a new project using Spring Initializr`,
			Options: []model.Option{{
				Name:        []string{"-a", "---artifact-id"},
				Description: `Project coordinates`,
				Args: []model.Arg{{
					Name: "Name",
				}},
			}, {
				Name:        []string{"-b", "--boot-version"},
				Description: `Spring Boot version`,
				Args: []model.Arg{{
					Name:      "Version",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--build"},
				Description: `Build system to use`,
				Args: []model.Arg{{
					Name:        "System",
					Suggestions: []model.Suggestion{{Name: []string{`maven`}}, {Name: []string{`gradle`}}},
				}},
			}, {
				Name:        []string{"-d", "--dependencies"},
				Description: `Comma-separated list of dependency identifiers to include in the generated project`,
				Args: []model.Arg{{
					Name:       "Dependencies",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--description"},
				Description: `Project description`,
				Args: []model.Arg{{
					Name: "description",
				}},
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Force overwrite of existing files`,
			}, {
				Name:        []string{"--format"},
				Description: `Format of the generated content`,
				Args: []model.Arg{{
					Name:        "Format",
					Suggestions: []model.Suggestion{{Name: []string{`build`}}, {Name: []string{`project`}}},
				}},
			}, {
				Name:        []string{"-g", "--group-id"},
				Description: `Project coordinates`,
				Args: []model.Arg{{
					Name: "Group ID",
				}},
			}, {
				Name:        []string{"-j", "--java-version"},
				Description: `Language level`,
				Args: []model.Arg{{
					Name:      "Version",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--list"},
				Description: `List the capabilities of the service`,
			}, {
				Name:        []string{"-n", "--name"},
				Description: `Project name`,
				Args: []model.Arg{{
					Name: "Name",
				}},
			}, {
				Name:        []string{"-p", "--packaging"},
				Description: `Project packaging`,
				Args: []model.Arg{{
					Name:        "Packaging",
					Suggestions: []model.Suggestion{{Name: []string{`jar`}}, {Name: []string{`war`}}},
				}},
			}, {
				Name:        []string{"--package-name"},
				Description: `Package name`,
				Args: []model.Arg{{
					Name: "Name",
				}},
			}, {
				Name:        []string{"-t", "--type"},
				Description: `Project type`,
				Args: []model.Arg{{
					Name: "Type",
					Suggestions: []model.Suggestion{{
						Name:        []string{`gradle-build`},
						Description: `Generate a Gradle build file`,
					}, {
						Name:        []string{`gradle-project`},
						Description: `Generate a Gradle based project archive using the Groovy DSL`,
					}, {
						Name:        []string{`gradle-project-kotlin`},
						Description: `Generate a Gradle based project archive using the Kotlin DSL`,
					}, {
						Name:        []string{`maven-build`},
						Description: `Generate a Maven pom.xml`,
					}, {
						Name:        []string{`maven-project`},
						Description: `Generate a Maven based project archive`,
					}},
				}},
			}, {
				Name:        []string{"--target"},
				Description: `URL of the service to use`,
				Args: []model.Arg{{
					Name: "URL",
				}},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Project version`,
				Args: []model.Arg{{
					Name: "Version",
				}},
			}, {
				Name:        []string{"-x", "--extract"},
				Description: `Extract the project archive. Inferred if a location is specified without an extension`,
			}},
		}, {
			Name:        []string{"encodepassword"},
			Description: `Encode a password for use with Spring Security`,
			Args: []model.Arg{{
				Name: "Password",
			}},
			Options: []model.Option{{
				Name:        []string{"-a", "--algorithm"},
				Description: `The algorithm to use`,
				Args: []model.Arg{{
					Name:        "Algorithm",
					Suggestions: []model.Suggestion{{Name: []string{`default`}}, {Name: []string{`bcrypt`}}, {Name: []string{`pbkdf2`}}},
				}},
			}},
		}, {
			Name:        []string{"shell"},
			Description: `Start a nested shell`,
		}, {
			Name:        []string{"help"},
			Description: `Show help for other commands`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateHelp},
				Name:      "Command",
			}},
		}},
	}
}
