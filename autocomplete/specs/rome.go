// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["rome"] = model.Subcommand{
		Name:        []string{"rome"},
		Description: `Rome CLI`,
		Options: []model.Option{{
			Name:        []string{"--colors"},
			Description: `Set the formatting mode for markup`,
			Args: []model.Arg{{
				Name:        "mode",
				Suggestions: []model.Suggestion{{Name: []string{`off`}}, {Name: []string{`force`}}},
			}},
		}, {
			Name:        []string{"--use-server"},
			Description: `Connect to a running instance of the Rome daemon server`,
		}, {
			Name:        []string{"--version"},
			Description: `Show the Rome version information and quit`,
		}, {
			Name:        []string{"--files-max-size"},
			Description: `The maximum allowed size for source code files in bytes`,
			Args: []model.Arg{{
				Name: "BYTES",
			}},
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"check"},
			Description: `Run the linter on a set of files`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "file, dir",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--apply"},
				Description: `Apply safe fixes`,
			}, {
				Name:        []string{"--apply-unsafe"},
				Description: `Apply safe and unsafe fixes`,
			}, {
				Name:        []string{"--max-diagnostics"},
				Description: `Cap the amount of diagnostics displayed`,
				Args: []model.Arg{{
					Name: "NUMBER",
				}},
			}, {
				Name:        []string{"--config-path"},
				Description: `Set the filesystem path to the config dir of the rome.json file`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "dir",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Print additional verbose advices on diagnostics`,
			}},
		}, {
			Name:        []string{"ci"},
			Description: `Run the linter and formatter check on a set of files`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "file, dir",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--formatter-enabled"},
				Description: `Allow to enable or disable the formatter check`,
			}, {
				Name:        []string{"--linter-enabled"},
				Description: `Allow to enable or disable the linter check`,
			}, {
				Name:        []string{"--organize-imports-enabled"},
				Description: `Allow to enable or disable the organize imports`,
			}, {
				Name:        []string{"--max-diagnostics"},
				Description: `Cap the amount of diagnostics displayed`,
				Args: []model.Arg{{
					Name: "NUMBER",
				}},
			}, {
				Name:        []string{"--config-path"},
				Description: `Set the filesystem path to the config dir of the rome.json file`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "dir",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Print additional verbose advices on diagnostics`,
			}, {
				Name:        []string{"--indent-style"},
				Description: `Change the indention character`,
				Args: []model.Arg{{
					Name:        "style",
					Suggestions: []model.Suggestion{{Name: []string{`tabs`}}, {Name: []string{`space`}}},
				}},
			}, {
				Name:        []string{"--indent-size"},
				Description: `How many spaces should be used for indentation`,
				Args: []model.Arg{{
					Name: "SIZE",
				}},
			}, {
				Name:        []string{"--line-width"},
				Description: `How many characters the formatter is allowed to print in a single line`,
				Args: []model.Arg{{
					Name: "width",
				}},
			}, {
				Name:        []string{"--quote-style"},
				Description: `Changes the quotation character for strings`,
				Args: []model.Arg{{
					Name:        "style",
					Suggestions: []model.Suggestion{{Name: []string{`single`}}, {Name: []string{`double`}}},
				}},
			}, {
				Name:        []string{"--quote-properties"},
				Description: `Changes when properties in object should be quoted`,
				Args: []model.Arg{{
					Name:        "property",
					Suggestions: []model.Suggestion{{Name: []string{`as-needed`}}, {Name: []string{`preserve`}}},
				}},
			}, {
				Name:        []string{"--trailing-comma"},
				Description: `Changes trailing commas in multi-line comma-separated syntactic structures`,
				Args: []model.Arg{{
					Name:        "trailing",
					Suggestions: []model.Suggestion{{Name: []string{`all`}}, {Name: []string{`es5`}}, {Name: []string{`none`}}},
				}},
			}, {
				Name:        []string{"--semicolons"},
				Description: `Changes when to print semicolons for statements`,
				Args: []model.Arg{{
					Name:        "rule",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`as-needed`}}},
				}},
			}},
		}, {
			Name:        []string{"format"},
			Description: `Run the formatter on a set of files`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "file, dir",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--write"},
				Description: `Edit the files in place (beware!) instead of printing the diff to the console`,
			}, {
				Name:        []string{"--skip-errors"},
				Description: `Skip over files containing syntax errors instead of emitting an error diagnostic`,
			}, {
				Name:        []string{"--max-diagnostics"},
				Description: `Cap the amount of diagnostics displayed`,
				Args: []model.Arg{{
					Name: "NUMBER",
				}},
			}, {
				Name:        []string{"--config-path"},
				Description: `Set the filesystem path to the config dir of the rome.json file`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "dir",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Print additional verbose advices on diagnostics`,
			}, {
				Name:        []string{"--indent-style"},
				Description: `Change the indention character`,
				Args: []model.Arg{{
					Name:        "style",
					Suggestions: []model.Suggestion{{Name: []string{`tabs`}}, {Name: []string{`space`}}},
				}},
			}, {
				Name:        []string{"--indent-size"},
				Description: `How many spaces should be used for indentation`,
				Args: []model.Arg{{
					Name: "SIZE",
				}},
			}, {
				Name:        []string{"--line-width"},
				Description: `How many characters the formatter is allowed to print in a single line`,
				Args: []model.Arg{{
					Name: "width",
				}},
			}, {
				Name:        []string{"--quote-style"},
				Description: `Changes the quotation character for strings`,
				Args: []model.Arg{{
					Name:        "style",
					Suggestions: []model.Suggestion{{Name: []string{`single`}}, {Name: []string{`double`}}},
				}},
			}, {
				Name:        []string{"--quote-properties"},
				Description: `Changes when properties in object should be quoted`,
				Args: []model.Arg{{
					Name:        "property",
					Suggestions: []model.Suggestion{{Name: []string{`as-needed`}}, {Name: []string{`preserve`}}},
				}},
			}, {
				Name:        []string{"--trailing-comma"},
				Description: `Changes trailing commas in multi-line comma-separated syntactic structures`,
				Args: []model.Arg{{
					Name:        "trailing",
					Suggestions: []model.Suggestion{{Name: []string{`all`}}, {Name: []string{`es5`}}, {Name: []string{`none`}}},
				}},
			}, {
				Name:        []string{"--semicolons"},
				Description: `Changes when to print semicolons for statements`,
				Args: []model.Arg{{
					Name:        "rule",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`as-needed`}}},
				}},
			}, {
				Name:        []string{"--stdin-file-path"},
				Description: `A file name with its extension to pass when reading from standard in`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"init"},
			Description: `Bootstraps a new rome project`,
		}, {
			Name:        []string{"start"},
			Description: `Start the Rome daemon server process`,
		}, {
			Name:        []string{"stop"},
			Description: `Stop the Rome daemon server process`,
		}, {
			Name:        []string{"lsp-proxy"},
			Description: `Acts as a server for the Language Server Protocol over stdin/stdout`,
		}, {
			Name:        []string{"rage"},
			Description: `Prints information for debugging`,
		}, {
			Name:        []string{"version"},
			Description: `Shows the Rome version information and quit`,
		}, {
			Name:        []string{"help"},
			Description: `Prints help message`,
		}},
	}
}
