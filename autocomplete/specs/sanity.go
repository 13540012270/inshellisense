// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["sanity"] = model.Subcommand{
		Name:        []string{"sanity"},
		Description: `Sanity CLI tool for managing Sanity installations, managing plugins, schemas and datasets`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for sanity`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"help"},
			Description: `Displays help information about Sanity`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateHelp},
				Name:       "command",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"build"},
			Description: `Builds the current Sanity configuration to a static bundle`,
			Options: []model.Option{{
				Name:        []string{"--source-maps"},
				Description: `Enable source maps for built bundles (increases size of bundle)`,
			}, {
				Name:        []string{"--no-minify"},
				Description: `Skip minifying built JavaScript (speeds up build, increases size of bundle)`,
			}, {
				Name:        []string{"-y", "--yes"},
				Description: `Use unattended mode, accepting defaults and using only flags for choices`,
			}},
		}, {
			Name:        []string{"codemod"},
			Description: `Runs a code modification script`,
			Options: []model.Option{{
				Name:        []string{"--dry"},
				Description: `Dry run (no changes are made to files)`,
			}, {
				Name:        []string{"--extensions"},
				Description: `Transform files with these file extensions (comma separated list) (default: js,ts,tsx)`,
				Args: []model.Arg{{
					Name: "extensions",
				}},
			}, {
				Name:        []string{"--no-verify"},
				Description: `Skip verification before running codemod`,
			}},
		}, {
			Name:        []string{"configcheck"},
			Description: `Checks if the required configuration files for plugins exists and are up to date`,
		}, {
			Name:        []string{"cors"},
			Description: `Interact with CORS-entries for your project`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"add"},
				Description: `Allow a new origin to use your project API through CORS`,
				Args: []model.Arg{{
					Name:        "origin",
					Description: `The origin to allow`,
				}},
				Options: []model.Option{{
					Name:        []string{"--credentials"},
					Description: `Allow credentials (token/cookie) to be sent from this origin`,
					ExclusiveOn: []string{"--no-credentials"},
				}, {
					Name:        []string{"--no-credentials"},
					Description: `Disallow credentials (token/cookie) to be sent from this origin`,
					ExclusiveOn: []string{"--credentials"},
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete an existing CORS-origin from your project`,
				Args: []model.Arg{{
					Name:        "origin",
					Description: `The origin to delete`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List all origins allowed to access the API for this project`,
			}},
		}, {
			Name:        []string{"dataset"},
			Description: `Interact with datasets in your project`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"alias"},
				Description: `You can manage your dataset alias using this command`,
				Subcommands: []model.Subcommand{{
					Name: []string{"create"},
					Args: []model.Arg{{
						Name:       "alias-name",
						IsOptional: true,
					}, {
						Name:       "target-dataset",
						IsOptional: true,
					}},
				}, {
					Name: []string{"delete"},
					Args: []model.Arg{{
						Name: "alias-name",
					}},
				}, {
					Name: []string{"link"},
					Args: []model.Arg{{
						Name:       "alias-name",
						IsOptional: true,
					}, {
						Name:       "target-dataset",
						IsOptional: true,
					}},
					Options: []model.Option{{
						Name:        []string{"--force"},
						Description: `Skips security prompt and forces link command`,
					}},
				}, {
					Name: []string{"unlink"},
					Args: []model.Arg{{
						Name:       "alias-name",
						IsOptional: true,
					}},
				}},
			}, {
				Name:        []string{"copy"},
				Description: `Manages dataset copying, including starting a new copy job, listing copy jobs and following the progress of a running copy job`,
				Args: []model.Arg{{
					Name:       "source-dataset",
					IsOptional: true,
				}, {
					Name:       "target-dataset",
					IsOptional: true,
				}},
				Options: []model.Option{{
					Name:        []string{"--detach"},
					Description: `Start the copy without waiting for it to finish`,
				}, {
					Name:        []string{"--attach"},
					Description: `Attach to the running copy process to show progress`,
					Args: []model.Arg{{
						Name: "job-id",
					}},
				}, {
					Name:        []string{"--skip-history"},
					Description: `Don't preserve document history on copy`,
				}, {
					Name:        []string{"--list"},
					Description: `Lists all dataset copy jobs corresponding to a certain criteria`,
				}, {
					Name:        []string{"--offset"},
					Description: `Start position in the list of jobs. Default 0. With --list`,
					Args: []model.Arg{{
						Name: "offset",
					}},
				}, {
					Name:        []string{"--limit"},
					Description: `Maximum number of jobs returned. Default 10. Maximum 1000. With --list`,
					Args: []model.Arg{{
						Name: "limit",
					}},
				}},
			}, {
				Name:        []string{"create"},
				Description: `Create a new dataset within your project`,
				Args: []model.Arg{{
					Name: "name",
				}},
				Options: []model.Option{{
					Name:        []string{"--visibility"},
					Description: `Set visibility for this dataset (public/private)`,
					Args: []model.Arg{{
						Name:        "visibility",
						Suggestions: []model.Suggestion{{Name: []string{`public`}}, {Name: []string{`private`}}},
					}},
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a dataset within your project`,
				Args: []model.Arg{{
					Name: "datasetName",
				}},
			}, {
				Name:        []string{"export"},
				Description: `Export dataset to local filesystem as a gzipped tarball`,
				Args: []model.Arg{{
					Name: "name",
				}, {
					Templates: []model.Template{model.TemplateFolders},
					Name:      "destination",
				}},
				Options: []model.Option{{
					Name:        []string{"--raw"},
					Description: `Extract only documents, without rewriting asset references`,
				}, {
					Name:        []string{"--no-assets"},
					Description: `Export only non-asset documents and remove references to image assets`,
				}, {
					Name:        []string{"--no-drafts"},
					Description: `Export only published versions of documents`,
				}, {
					Name:        []string{"--no-compress"},
					Description: `Skips compressing tarball entries (still generates a gzip file)`,
				}, {
					Name:        []string{"--types"},
					Description: `Defines which document types to export`,
					Args: []model.Arg{{
						Name: "types",
					}},
				}, {
					Name:        []string{"--overwrite"},
					Description: `Overwrite any file with the same name`,
				}, {
					Name:        []string{"--asset-concurrency"},
					Description: `Concurrent number of asset downloads`,
					Args: []model.Arg{{
						Name: "num",
					}},
				}},
			}, {
				Name:        []string{"import"},
				Description: `Import documents to given dataset from ndjson file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "file",
				}, {
					Name: "target_dataset",
				}},
				Options: []model.Option{{
					Name:        []string{"--missing"},
					Description: `On duplicate document IDs, skip importing document in question`,
				}, {
					Name:        []string{"--replace"},
					Description: `On duplicate document IDs, replace existing document with imported document`,
				}, {
					Name:        []string{"--allow-failing-assets"},
					Description: `Skip assets that cannot be fetched/uploaded`,
				}, {
					Name:        []string{"--replace-assets"},
					Description: `Skip reuse of existing assets`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List datasets of your project`,
			}, {
				Name:        []string{"visibility"},
				Description: `Set visibility of a dataset`,
				Args: []model.Arg{{
					Name: "dataset",
				}, {
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`get`}}, {Name: []string{`set`}}},
				}},
			}},
		}, {
			Name:        []string{"debug"},
			Description: `Gathers information on Sanity environment`,
			Options: []model.Option{{
				Name:        []string{"--secrets"},
				Description: `Include API keys in output`,
			}},
		}, {
			Name:        []string{"deploy"},
			Description: `Deploys a statically built Sanity studio`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "source_dir",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--source-maps"},
				Description: `Enable source maps for built bundles (increases size of bundle)`,
			}, {
				Name:        []string{"--no-minify"},
				Description: `Skip minifying built JavaScript (speeds up build, increases size of bundle)`,
			}, {
				Name:        []string{"--no-build"},
				Description: `Don't build the studio prior to deploy, instead deploying the version currently in "dist/"`,
			}},
		}, {
			Name:        []string{"docs"},
			Description: `Opens the Sanity documentation`,
		}, {
			Name:        []string{"documents"},
			Description: `Interact with documents in your project`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Create one or more documents`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "file",
					IsOptional: true,
				}},
				Options: []model.Option{{
					Name:        []string{"--replace"},
					Description: `On duplicate document IDs, replace existing document with specified document(s)`,
				}, {
					Name:        []string{"--missing"},
					Description: `On duplicate document IDs, don't modify the target document(s)`,
				}, {
					Name:        []string{"--watch"},
					Description: `Write the documents whenever the target file or buffer changes`,
				}, {
					Name:        []string{"--json5"},
					Description: `Use JSON5 file type to allow a "simplified" version of JSON`,
				}, {
					Name:        []string{"--id"},
					Description: `Specify a document ID to use. Will fetch remote document ID and populate editor`,
					Args: []model.Arg{{
						Name: "id",
					}},
				}, {
					Name:        []string{"--dataset"},
					Description: `NAME to override dataset`,
					Args: []model.Arg{{
						Name: "dataset",
					}},
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a document by ID`,
				Args: []model.Arg{{
					Name:       "id",
					IsVariadic: true,
				}},
				Options: []model.Option{{
					Name:        []string{"--dataset"},
					Description: `NAME to override dataset`,
					Args: []model.Arg{{
						Name: "dataset",
					}},
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get and print a document by ID`,
				Args: []model.Arg{{
					Name: "document_id",
				}},
				Options: []model.Option{{
					Name:        []string{"--pretty"},
					Description: `Colorized JSON output`,
				}, {
					Name:        []string{"--dataset"},
					Description: `NAME to override dataset`,
					Args: []model.Arg{{
						Name: "dataset",
					}},
				}},
			}, {
				Name:        []string{"query"},
				Description: `Query for documents`,
				Args: []model.Arg{{
					Name: "query",
				}},
				Options: []model.Option{{
					Name:        []string{"--pretty"},
					Description: `Colorized JSON output`,
				}, {
					Name:        []string{"--dataset"},
					Description: `NAME to override dataset`,
					Args: []model.Arg{{
						Name: "dataset",
					}},
				}, {
					Name:        []string{"--api-version"},
					Description: `API version to use (defaults to "v1")`,
					Args: []model.Arg{{
						Name: "version",
					}},
				}},
			}},
		}, {
			Name:        []string{"exec"},
			Description: `Runs a script in Sanity context`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "script",
			}},
			Options: []model.Option{{
				Name:        []string{"--with-user-token"},
				Description: `Preload access token from CLI config into 'part:@sanity/base/client' part`,
			}, {
				Name:        []string{"--mock-browser-env"},
				Description: `Mocks a browser-like environment using jsdom`,
			}},
		}, {
			Name:        []string{"graphql"},
			Description: `Interact with GraphQL APIs`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"deploy"},
				Description: `Deploy a GraphQL API from the current Sanity schema`,
				Options: []model.Option{{
					Name:        []string{"--dataset"},
					Description: `Deploy API for the given dataset`,
					Args: []model.Arg{{
						Name: "dataset",
					}},
				}, {
					Name:        []string{"--tag"},
					Description: `Deploy API to given tag (defaults to 'default')`,
					Args: []model.Arg{{
						Name: "tag",
					}},
				}, {
					Name:        []string{"--generation"},
					Description: `API generation to deploy (defaults to 'gen3')`,
					Args: []model.Arg{{
						Name: "generation",
					}},
				}, {
					Name:        []string{"--non-null-document-fields"},
					Description: `Set document interface fields (_id, _type etc) as non-null`,
				}, {
					Name:        []string{"--playground"},
					Description: `Deploy a GraphQL playground for easily testing queries (public)`,
				}, {
					Name:        []string{"--no-playground"},
					Description: `Skip playground prompt (do not deploy a playground)`,
				}, {
					Name:        []string{"--force"},
					Description: `Deploy API without confirming breaking changes`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `Lists all the GraphQL endpoints deployed for this project`,
			}, {
				Name:        []string{"undeploy"},
				Description: `Remove a deployed GraphQL API`,
				Options: []model.Option{{
					Name:        []string{"--dataset"},
					Description: `Delete GraphQL API for the given dataset`,
					Args: []model.Arg{{
						Name: "dataset",
					}},
				}, {
					Name:        []string{"--tag"},
					Description: `Delete GraphQL API for the given tag (defaults to 'default')`,
					Args: []model.Arg{{
						Name: "tag",
					}},
				}},
			}},
		}, {
			Name:        []string{"hook"},
			Description: `Interact with hooks in your project`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"attempt"},
				Description: `Print details of a given webhook delivery attempt`,
				Args: []model.Arg{{
					Name: "attempt_id",
				}},
			}, {
				Name:        []string{"create"},
				Description: `Create a new hook for the given dataset`,
			}, {
				Name:        []string{"delete"},
				Description: `Delete a hook within your project`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"list"},
				Description: `List hooks for a given project`,
			}, {
				Name:        []string{"logs"},
				Description: `List latest log entries for a given hook`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}},
		}, {
			Name:        []string{"init"},
			Description: `Initialize a new Sanity project or plugin`,
			Options: []model.Option{{
				Name:        []string{"-y", "--yes"},
				Description: `Use unattended mode, accepting defaults and using only flags for choices`,
			}, {
				Name:        []string{"--project"},
				Description: `Project ID to use for the studio`,
				Args: []model.Arg{{
					Name: "projectId",
				}},
			}, {
				Name:        []string{"--organization"},
				Description: `Organization ID to use for the project`,
				Args: []model.Arg{{
					Name: "organizationId",
				}},
			}, {
				Name:        []string{"--dataset"},
				Description: `Dataset name for the studio`,
				Args: []model.Arg{{
					Name: "dataset",
				}},
			}, {
				Name:        []string{"--dataset-default"},
				Description: `Set up a project with a public dataset named "production"`,
			}, {
				Name:        []string{"--output-path"},
				Description: `Path to write studio project to`,
				Args: []model.Arg{{
					Name: "path",
				}},
			}, {
				Name:        []string{"--template"},
				Description: `Project template to use [default: "clean"]`,
				Args: []model.Arg{{
					Name: "template",
				}},
			}, {
				Name:        []string{"--provider"},
				Description: `Login provider to use`,
				Args: []model.Arg{{
					Name: "provider",
				}},
			}, {
				Name:        []string{"--visibility"},
				Description: `Visibility mode for dataset (public/private)`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`public`}}, {Name: []string{`private`}}},
				}},
			}, {
				Name:        []string{"--create-project"},
				Description: `Create a new project with the given name`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"--project-plan"},
				Description: `Optionally select a plan for a new project`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"--coupon"},
				Description: `Optionally select a coupon for a new project (cannot be used with --project-plan)`,
				Args: []model.Arg{{
					Name: "name",
				}},
				ExclusiveOn: []string{"--project-plan"},
			}, {
				Name:        []string{"--reconfigure"},
				Description: `Reconfigure Sanity studio in current folder with new project/dataset`,
			}},
		}, {
			Name:        []string{"install"},
			Description: `Installs a Sanity plugin to the current Sanity configuration`,
			Args: []model.Arg{{
				Name: "plugin",
			}},
		}, {
			Name:        []string{"login"},
			Description: `Authenticates against the Sanity.io API (no flag) or a third-party identity provider (with --sso flag)`,
			Options: []model.Option{{
				Name:        []string{"--sso"},
				Description: `Authenticate against a third-party identity provider`,
				Args: []model.Arg{{
					Name: "slug",
				}},
			}},
		}, {
			Name:        []string{"logout"},
			Description: `Logs out of the Sanity.io session`,
		}, {
			Name:        []string{"manage"},
			Description: `Opens the Sanity project management UI`,
		}, {
			Name:        []string{"projects"},
			Description: `Interact with projects connected to your logged in user`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"list"},
				Description: `Lists projects connected to your user`,
				Options: []model.Option{{
					Name:        []string{"--sort"},
					Description: `Sort output by specified column`,
					Args: []model.Arg{{
						Name: "field",
					}},
				}, {
					Name:        []string{"--order"},
					Description: `Sort output ascending/descending`,
					Args: []model.Arg{{
						Name:        "order",
						Suggestions: []model.Suggestion{{Name: []string{`asc`}}, {Name: []string{`desc`}}},
					}},
				}},
			}},
		}, {
			Name:        []string{"start"},
			Description: `Starts a web server for the Content Studio`,
			Options: []model.Option{{
				Name:        []string{"--port"},
				Description: `TCP port to start server on. [default: 3333]`,
				Args: []model.Arg{{
					Name: "port",
				}},
			}, {
				Name:        []string{"--host"},
				Description: `The local network interface at which to listen. [default: "127.0.0.1"]`,
				Args: []model.Arg{{
					Name: "host",
				}},
			}},
		}, {
			Name:        []string{"undeploy"},
			Description: `Removes the deployed studio from <hostname>.sanity.studio`,
		}, {
			Name:        []string{"uninstall"},
			Description: `Removes a Sanity plugin from the current Sanity configuration`,
			Args: []model.Arg{{
				Name: "plugin",
			}},
		}, {
			Name:        []string{"upgrade"},
			Description: `Upgrades all (or some) Sanity modules to their latest versions`,
			Options: []model.Option{{
				Name:        []string{"--range"},
				Description: `Version range to upgrade to, eg '^2.2.7' or '2.1.x'`,
				Args: []model.Arg{{
					Name: "range",
				}},
			}, {
				Name:        []string{"--tag"},
				Description: `Tagged release to upgrade to, eg 'canary' or 'some-feature'`,
				Args: []model.Arg{{
					Name: "tag",
				}},
			}, {
				Name:        []string{"--save-exact"},
				Description: `Pin the resolved version numbers in package.json (no ^ prefix)`,
			}},
		}, {
			Name:        []string{"users"},
			Description: `Manage users of your project`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"invite"},
				Description: `Invite a new user to the project`,
				Args: []model.Arg{{
					Name: "email",
				}},
				Options: []model.Option{{
					Name:        []string{"--role"},
					Description: `Role to invite the user as`,
					Args: []model.Arg{{
						Name: "role",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List users of the project`,
				Options: []model.Option{{
					Name:        []string{"--no-invitations"},
					Description: `Don't include pending invitations`,
				}, {
					Name:        []string{"--no-robots"},
					Description: `Don't include robots (token users)`,
				}, {
					Name:        []string{"--sort"},
					Description: `Sort users by specified column: id, name, role, date`,
					Args: []model.Arg{{
						Name:        "field",
						Suggestions: []model.Suggestion{{Name: []string{`id`}}, {Name: []string{`name`}}, {Name: []string{`role`}}, {Name: []string{`date`}}},
					}},
				}, {
					Name:        []string{"--order"},
					Description: `Sort output ascending/descending`,
					Args: []model.Arg{{
						Name:        "order",
						Suggestions: []model.Suggestion{{Name: []string{`asc`}}, {Name: []string{`desc`}}},
					}},
				}},
			}},
		}, {
			Name:        []string{"versions"},
			Description: `Shows the installed versions of Sanity CLI and core components`,
		}},
	}
}
