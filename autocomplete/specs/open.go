// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["open"] = model.Subcommand{
		Name:        []string{"open"},
		Description: `Open files, apps, or URLs using default application`,
		Args: []model.Arg{{
			Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-a"},
			Description: `Specify the application to use for opening the file`,
			Args: []model.Arg{{
				Name:      "Application",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-b"},
			Description: `Specify the bundle identifier of the app to use to open the file`,
			Args: []model.Arg{{
				Name:      "Bundle Identifier",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-D"},
			Description: `Reveals the enclosing folder in finder`,
		}, {
			Name:        []string{"-e"},
			Description: `Opens the file with /Applications/TextEdit`,
		}, {
			Name:        []string{"-t"},
			Description: `Open the file with the default text editor`,
		}, {
			Name:        []string{"-f"},
			Description: `Read input from standard input and open the results in the default text editor`,
		}, {
			Name:        []string{"-F", "--fresh"},
			Description: `Opens the application without restoring windows`,
		}, {
			Name:        []string{"-W", "--wait-apps"},
			Description: `Waits until the applications exit`,
		}, {
			Name:        []string{"-R", "--reveal"},
			Description: `Reveals the file(s) in the Finder instead of opening them`,
		}, {
			Name:        []string{"-n", "--new"},
			Description: `Open a new instance of the application(s) even if one is already running`,
		}, {
			Name:        []string{"-j", "--hide"},
			Description: `Launches the app hidden`,
		}, {
			Name:        []string{"-g", "--background"},
			Description: `Do not bring the application to the foreground`,
		}, {
			Name:        []string{"-h", "--header"},
			Description: `Searches header locations for a header whose name matches the given string and then opens it`,
		}, {
			Name:        []string{"-s"},
			Description: `For -h, the SDK to use; if supplied, only SDKs whose names contain the argument value are searched`,
			Args: []model.Arg{{
				Name: "partial SDK name",
			}},
		}, {
			Name:        []string{"-u", "--url"},
			Description: `Open this URL, even if it matches exactly a filepath`,
			Args: []model.Arg{{
				Name: "URL",
			}},
		}, {
			Name:        []string{"-i", "--stdin"},
			Description: `Launches the application with stdin connected to PATH; defaults to /dev/null`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "PATH",
			}},
		}, {
			Name:        []string{"-o", "--stdout"},
			Description: `Launches the application with /dev/stdout connected to PATH`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "PATH",
			}},
		}, {
			Name:        []string{"--stderr"},
			Description: `Launches the application with /dev/stderr connected to PATH`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "PATH",
			}},
		}, {
			Name:        []string{"--env"},
			Description: `Add an enviroment variable to the launched process, where VAR is formatted AAA=foo`,
			Args: []model.Arg{{
				Name: "VAR",
			}},
		}, {
			Name:        []string{"--args"},
			Description: `All remaining arguments are passed to the opened application in the argv parameter to main().  These arguments are not opened or interpreted by the open tool`,
			Args: []model.Arg{{
				Name:       "Arguments",
				IsVariadic: true,
			}},
		}},
	}
}
