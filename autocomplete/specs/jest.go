// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["jest"] = model.Subcommand{
		Name:        []string{"jest"},
		Description: `A delightful JavaScript Testing Framework with a focus on simplicity`,
		Args:        []model.Arg{{}},
		Options: []model.Option{{
			Name:        []string{"--bail", "-b"},
			Description: `Exit the test suite immediately upon n number of failing test suite. Defaults to 1`,
			Args: []model.Arg{{
				Name: "n",
			}},
		}, {
			Name:        []string{"--cache"},
			Description: `Whether to use the cache`,
		}, {
			Name:        []string{"--no-cache"},
			Description: `Whether to use the cache`,
		}, {
			Name:        []string{"--changedFilesWithAncestor"},
			Description: `Runs tests related to the current changes and the changes made in the last commit`,
		}, {
			Name:        []string{"--changedSince"},
			Description: `Runs tests related to the changes since the provided branch or commit hash`,
			Args: []model.Arg{{
				Name: "since",
			}},
		}, {
			Name:        []string{"--ci"},
			Description: `Instead of the regular behavior of storing a new snapshot automatically, will fail the test and require Jest to be run with --updateSnapshot`,
		}, {
			Name:        []string{"--clearCache"},
			Description: `Deletes the Jest cache directory and then exits without running tests`,
			Args: []model.Arg{{
				Name: "cacheDirectory",
			}},
		}, {
			Name:        []string{"--collectCoverageFrom"},
			Description: `A glob pattern relative to rootDir matching the files that coverage info needs to be collected from`,
			Args: []model.Arg{{
				Name: "glob",
			}},
		}, {
			Name:        []string{"--colors"},
			Description: `Forces test results output highlighting even if stdout is not a TTY`,
		}, {
			Name:        []string{"--config", "-c"},
			Description: `The path to a Jest config file specifying how to find and execute tests`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--coverage"},
			Description: `Enable or disable coverage, disabled by default`,
			Args: []model.Arg{{
				Name: "true|false",
				Suggestions: []model.Suggestion{{
					Name: []string{`true`},
				}, {
					Name: []string{`false`},
				}},
			}},
		}, {
			Name:        []string{"--coverageProvider"},
			Description: `Indicates which provider should be used to instrument code for coverage`,
			Args: []model.Arg{{
				Name: "babel|v8",
				Suggestions: []model.Suggestion{{
					Name: []string{`babel`},
				}, {
					Name: []string{`v8`},
				}},
			}},
		}, {
			Name:        []string{"--debug"},
			Description: `Print debugging info about your Jest config`,
		}, {
			Name:        []string{"--detectOpenHandles"},
			Description: `Attempt to collect and print open handles preventing Jest from exiting cleanly`,
		}, {
			Name:        []string{"--env"},
			Description: `The test environment used for all tests`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "jsdom|node|path/to/env.js",
				Suggestions: []model.Suggestion{{
					Name: []string{`jsdom`},
				}, {
					Name: []string{`node`},
				}},
			}},
		}, {
			Name:        []string{"--errorOnDeprecated"},
			Description: `Make calling deprecated APIs throw helpful error messages`,
		}, {
			Name:        []string{"--expand", "-e"},
			Description: `Use this flag to show full diffs and errors instead of a patch`,
		}, {
			Name:        []string{"--findRelatedTests"},
			Description: `Find and run the tests that cover a space separated list of source files that were passed in as arguments`,
			Args: []model.Arg{{
				Name: "<path1> ... <pathN>",
			}},
		}, {
			Name:        []string{"--forceExit"},
			Description: `Force Jest to exit after all tests have completed running`,
		}, {
			Name:        []string{"--help"},
			Description: `Show the help information`,
		}, {
			Name:        []string{"--init"},
			Description: `Generate a basic configuration file`,
		}, {
			Name:        []string{"--injectGlobals"},
			Description: `Insert Jest's globals (expect, test, describe, beforeEach etc.) into the global environment`,
		}, {
			Name:        []string{"--json"},
			Description: `Prints the test results in JSON`,
		}, {
			Name:        []string{"--outputFile"},
			Description: `Write test results to a file when the --json option is also specified`,
			Args: []model.Arg{{
				Name: "filename",
			}},
		}, {
			Name:        []string{"--lastCommit"},
			Description: `Run all tests affected by file changes in the last commit made`,
		}, {
			Name:        []string{"--listTests"},
			Description: `Lists all tests as JSON that Jest will run given the arguments, and exits`,
		}, {
			Name:        []string{"--logHeapUsage"},
			Description: `Logs the heap usage after every test`,
		}, {
			Name:        []string{"--maxConcurrency"},
			Description: `Prevents Jest from executing more than the specified amount of tests at the same time`,
			Args: []model.Arg{{
				Name: "num",
			}},
		}, {
			Name:        []string{"--maxWorkers", "-w"},
			Description: `Specifies the maximum number of workers the worker-pool will spawn for running tests`,
			Args: []model.Arg{{
				Name: "<num>|<string>",
			}},
		}, {
			Name:        []string{"--noStackTrace"},
			Description: `Disables stack trace in test results output`,
		}, {
			Name:        []string{"--notify"},
			Description: `Activates notifications for test results`,
		}, {
			Name:        []string{"--onlyChanged", "-o"},
			Description: `Attempts to identify which tests to run based on which files have changed in the current repository`,
		}, {
			Name:        []string{"--passWithNoTests"},
			Description: `Allows the test suite to pass when no files are found`,
		}, {
			Name:        []string{"--projects"},
			Description: `Run tests from one or more projects, found in the specified paths; also takes path globs`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "<path1> ... <pathN>",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--reporters"},
			Description: `Run tests with specified reporters`,
			Args: []model.Arg{{
				Name: "reporter",
			}},
		}, {
			Name:        []string{"--roots"},
			Description: `A list of paths to directories that Jest should use to search for files in`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "<path1> ... <pathN>",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--runInBand", "-i"},
			Description: `Run all tests serially in the current process, rather than creating a worker pool of child processes that run tests`,
		}, {
			Name:        []string{"--selectProjects"},
			Description: `Run only the tests of the specified projects`,
			Args: []model.Arg{{
				Name: "<project1> ... <projectN>",
			}},
		}, {
			Name:        []string{"--runTestsByPath"},
			Description: `Run only the tests that were specified with their exact paths`,
		}, {
			Name:        []string{"--setupTestFrameworkScriptFile"},
			Description: `The path to a module that runs some code to configure or set up the testing framework before each test`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--showConfig"},
			Description: `Print your Jest config and then exits`,
		}, {
			Name:        []string{"--silent"},
			Description: `Prevent tests from printing messages through the console`,
		}, {
			Name:        []string{"--testNamePattern", "-t"},
			Description: `Run only tests with a name that matches the regex`,
			Args: []model.Arg{{
				Name: "regex",
			}},
		}, {
			Name:        []string{"--testLocationInResults"},
			Description: `Adds a location field to test results`,
		}, {
			Name:        []string{"--testPathPattern"},
			Description: `A regexp pattern string that is matched against all tests paths before executing the test`,
			Args: []model.Arg{{
				Name: "regex",
			}},
		}, {
			Name:        []string{"--testPathIgnorePatterns"},
			Description: `An array of regexp pattern strings that are tested against all tests paths before executing the test`,
			Args: []model.Arg{{
				Name: "[array]",
			}},
		}, {
			Name:        []string{"--testRunner"},
			Description: `Lets you specify a custom test runner`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--testSequencer"},
			Description: `Lets you specify a custom test sequencer`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--testTimeout"},
			Description: `Default timeout of a test in milliseconds`,
			Args: []model.Arg{{
				Name: "timeout in ms",
			}},
		}, {
			Name:        []string{"--updateSnapshot", "-u"},
			Description: `Use this flag to re-record every snapshot that fails during this test run`,
		}, {
			Name:        []string{"--useStderr"},
			Description: `Divert all output to stderr`,
		}, {
			Name:        []string{"--verbose"},
			Description: `Display individual test results with the test suite hierarchy`,
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Print the version and exit`,
		}, {
			Name:        []string{"--watch"},
			Description: `Watch files for changes and rerun tests related to changed files`,
		}, {
			Name:        []string{"--watchAll"},
			Description: `Watch files for changes and rerun all tests when something changes`,
		}, {
			Name:        []string{"--watchman"},
			Description: `Whether to use watchman for file crawling`,
		}, {
			Name:        []string{"--no-watchman"},
			Description: `Whether to use watchman for file crawling`,
		}},
	}
}
