// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["argo"] = model.Subcommand{
		Name:        []string{"argo"},
		Description: ``,
		Options: []model.Option{{
			Name:        []string{"--argo-base-href"},
			Description: `An path to use with HTTP client (e.g. due to BASE_HREF). Defaults to the ARGO_BASE_HREF environment variable`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--argo-http1"},
			Description:  `If True, Use the HTTP client. Defaults to the ARGO_HTTP1 environment variable`,
			IsPersistent: true,
		}, {
			Name:        []string{"--argo-server", "-s"},
			Description: `API server host:port. e.g. localhost:2746. Defaults to the ARGO_SERVER environment variable`,
			Args: []model.Arg{{
				Name: "host:port",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--as"},
			Description: `Username to impersonate for the operation`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--as-group"},
			Description: `Group to impersonate for the operation, This flag can be repeated to specify multiple groups`,
			Args: []model.Arg{{
				Name: "stringArray",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--as-uid"},
			Description: `UID to impersonate for the operation`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--certificate-authorityk"},
			Description: `Path to a cert file for the certificate authority`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--client-certificate"},
			Description: `Path to a client certificate file for TLS`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--client-key"},
			Description: `Path to a client key file for TLS`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--cluster"},
			Description: `The name of the kubeconfig cluster to use`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--context"},
			Description: `The name of the kubeconfig context to use`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--gloglevel"},
			Description: `Set the glog logging level`,
			Args: []model.Arg{{
				Name: "int",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--header", "-H"},
			Description: `Sets additional header to all requests made by Argo CLI. (Can be repeated multiple times to add multiple headers`,
			Args: []model.Arg{{
				Name: "int",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--help", "-h"},
			Description:  `Help for argo`,
			IsPersistent: true,
		}, {
			Name:         []string{"--insecure-skip-tls-verify"},
			Description:  `If True, The server's certificate will not be checked for validity. This will make your HTTPS connections insecure`,
			IsPersistent: true,
		}, {
			Name:         []string{"--insecure-skip-verify", "-k"},
			Description:  `If true the Argo Server's certificate will not be checked for validity. This will make your HTTPS connections insecure. Defaults to the ARGO_INSECURE_SKIP_VERIFY environment variable`,
			IsPersistent: true,
		}, {
			Name:        []string{"--instanceid"},
			Description: `Submit with a specific controller's instance id label. Default to the ARGO_INSTANCEID environment variable`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--kubeconfig"},
			Description: `Path to a kube config. Only required if out-of-cluster`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--loglevel"},
			Description: `Set the logging level. One of: debug|info|warn|error (default "info")`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--namespace", "-n"},
			Description: `If present the namespace scope for this CLI request`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--password"},
			Description: `Password for basic authentication to the API server`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--proxy-url"},
			Description: `This URL will be used to connect via proxy`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--request-timeout"},
			Description: `The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m)`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--secure", "-e"},
			Description:  `Whether or not the server is using TLS with the Argo Server. Defaults to the ARGO_SECURE environment variable. (default true)`,
			IsPersistent: true,
		}, {
			Name:        []string{"--server"},
			Description: `The address and port of the Kubernetes API server`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--tls-server-name"},
			Description: `If Provided, This name will be used to validate server certificate. If this is not provided`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--token"},
			Description: `Bearer token for authentication to the API server`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--user"},
			Description: `The name of the kubeconfig user to use`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--username"},
			Description: `Username for basic authentication to the API server`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--verbose", "-v"},
			Description:  `Enabled verbose logging i.e. --loglevel debug`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"archive"},
			Description: `Manage the workflow archive`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"delete"},
				Description: `Delete a workflow in the archive`,
				Args: []model.Arg{{
					Name: "UID",
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get a workflow in the archive`,
				Args: []model.Arg{{
					Name: "UID",
				}},
				Options: []model.Option{{
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: json|yaml|wide (default "wide")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List workflows in the archive`,
				Options: []model.Option{{
					Name:        []string{"--chunk-size"},
					Description: `Return large lists in chunks rather than all at once. Pass 0 to disable`,
					Args: []model.Arg{{
						Name: "int",
					}},
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for list`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: json|yaml|wide (default "wide")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--selector", "-l"},
					Description: `Selector (label query) to filter on not including uninitialized ones supports '=' '==' and '!='.(e.g. -l key1=value1,key2=value2)`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"list-label-keys"},
				Description: `List workflows label keys in the archive`,
			}, {
				Name:        []string{"list-label-values"},
				Description: `Get workflow label values in the archive`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for list-label-values`,
				}, {
					Name: []string{"--selector", "-l"},
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"resubmit"},
				Description: `Resubmit one or more workflows`,
				Args: []model.Arg{{
					Name: "UID",
				}},
				Options: []model.Option{{
					Name:        []string{"--field-selector"},
					Description: `Selector (field query) to filter on supports '=' '==' and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for resubmit`,
				}, {
					Name:        []string{"--log"},
					Description: `Log the workflow until it completes`,
				}, {
					Name:        []string{"--memoized"},
					Description: `Re-use successful steps & outputs from the previous run`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: name|json|yaml|wide`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--parameter", "-p"},
					Description: `Input parameter to override on the original workflow spec`,
					Args: []model.Arg{{
						Name: "stringArray",
					}},
				}, {
					Name:        []string{"--priority"},
					Description: `Workflow priority`,
					Args: []model.Arg{{
						Name: "int32",
					}},
				}, {
					Name:        []string{"--selector", "-l"},
					Description: `Selector (label query) to filter on not including uninitialized ones supports '=' '==' and '!='.(e.g. -l key1=value1,key2=value2)`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--wait", "-w"},
					Description: `Wait for the workflow to complete only works when a single workflow is resubmitted`,
				}, {
					Name:        []string{"--watch"},
					Description: `Watch the workflow until it completes only works when a single workflow is resubmitted`,
				}},
			}, {
				Name:        []string{"retry"},
				Description: `Retry zero or more workflows`,
				Args: []model.Arg{{
					Name: "UID",
				}},
				Options: []model.Option{{
					Name:        []string{"--field-selector"},
					Description: `Selector (field query) to filter on, supports '='`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for retry`,
				}, {
					Name:        []string{"--log"},
					Description: `Log the workflow until it completes`,
				}, {
					Name:        []string{"--node-field-selector"},
					Description: `Selector of nodes to reset eg: --node-field-selector inputs.paramaters.myparam.value=abc`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: name|json|yaml|wide`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--parameter", "-p"},
					Description: `Input parameter to override on the original workflow spec`,
					Args: []model.Arg{{
						Name: "stringArray",
					}},
				}, {
					Name:        []string{"--restart-successful"},
					Description: `Indicates to restart successful nodes matching the --node-field-selector`,
				}, {
					Name:        []string{"--selector", "-l"},
					Description: `Selector (label query) to filter on not including uninitialized ones supports '=' '=='`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--wait", "-w"},
					Description: `Wait for the workflow to complete only works when a single workflow is retried`,
				}, {
					Name:        []string{"--watch"},
					Description: `Watch the workflow until it completes only works when a single workflow is retried`,
				}},
			}},
		}, {
			Name:        []string{"auth"},
			Description: `Manage authentication settings`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"token"},
				Description: `Print the auth token`,
			}},
		}, {
			Name:        []string{"cluster-template", "cwftmpl", "cwft"},
			Description: `Manipulate cluster workflow templates`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Create a cluster workflow template`,
				Args: []model.Arg{{
					Name: "files",
				}},
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for create`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: name|json|yaml|wide`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--strict"},
					Description: `Perform strict workflow validation (default true)`,
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a cluster workflow template`,
				Args: []model.Arg{{
					Name: "WORKFLOW_TEMPLATE",
				}},
				Options: []model.Option{{
					Name:        []string{"--all"},
					Description: `Delete all cluster workflow templates`,
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for delete`,
				}},
			}, {
				Name:        []string{"get"},
				Description: `Display details about a cluster workflow template`,
				Args: []model.Arg{{
					Name: "CLUSTER",
				}, {
					Name: "WORKFLOW_TEMPLATE",
				}},
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for get`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: json|yaml|wide`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"lint"},
				Description: `Validate files or directories of cluster workflow template manifests`,
				Args: []model.Arg{{
					Name: "FILE",
				}},
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for lint`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Linting results output format. One of: pretty|simple (default "pretty")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--strict"},
					Description: `Perform strict workflow validation (default true)`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List cluster workflow templates`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for list`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: wide|name`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}},
		}, {
			Name:        []string{"completion"},
			Description: `Output shell completion code for the specified shell (bash or zsh)`,
			Args: []model.Arg{{
				Name: "SHELL",
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Help for completion`,
			}},
		}, {
			Name:        []string{"cp"},
			Description: `Copy artifacts from workflow`,
			Args: []model.Arg{{
				Name: "my-wf",
			}, {
				Name: "output-directory",
			}},
			Options: []model.Option{{
				Name:        []string{"--artifact-name"},
				Description: `Name of output artifact in workflow`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for cp`,
			}, {
				Name:        []string{"--node-id"},
				Description: `Id of node in workflow`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--path"},
				Description: `Use variables {workflowName} {nodeId} {templateName} {artifactName} and {namespace} to create a customized path to store the artifacts; example: {workflowName}/{templateName}/{artifactName} (default "{namespace}/{workflowName}/{nodeId}/outputs/{artifactName}")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--template-name"},
				Description: `Name of template in workflow`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"cron"},
			Description: `Manage cron workflows`,
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Help for cron`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Create a cron workflow`,
				Args: []model.Arg{{
					Name: "FILE1 FILE2...",
				}},
				Options: []model.Option{{
					Name:        []string{"--entrypoint"},
					Description: `Override entrypoint`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--generate-name"},
					Description: `Override metadata.generateName`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for create`,
				}, {
					Name:        []string{"--labels", "-l"},
					Description: `Comma separated labels to apply to the workflow. Will override previous values`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--name"},
					Description: `Override metadata.name`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: name|json|yaml|wide`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--parameter", "-p"},
					Description: `Pass an input parameter`,
					Args: []model.Arg{{
						Name: "stringArray",
					}},
				}, {
					Name:        []string{"--parameter-file", "-f"},
					Description: `Pass a file containing all input parameters`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--schedule"},
					Description: `Override cron workflow schedule`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--serviceaccount"},
					Description: `Run all pods in the workflow using specified serviceaccount`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--strict"},
					Description: `Perform strict workflow validation (default true)`,
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a cron workflow`,
				Args: []model.Arg{{
					Name: "[CRON_WORKFLOW... | --all]",
				}},
				Options: []model.Option{{
					Name:        []string{"--all"},
					Description: `Delete all cron workflows`,
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for delete`,
				}},
			}, {
				Name:        []string{"get"},
				Description: `Display details about a cron workflow`,
				Args: []model.Arg{{
					Name: "CRON_WORKFLOW",
				}},
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for get`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: json|yaml|wide`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"lint"},
				Description: `Validate files or directories of cron workflow manifests`,
				Args: []model.Arg{{
					Name: "FILE",
				}},
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for lint`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Linting results output format. One of: pretty|simple (default "pretty")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--strict"},
					Description: `Perform strict validation (default true)`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List cron workflows`,
				Options: []model.Option{{
					Name:        []string{"--all-namespaces", "-A"},
					Description: `Show workflows from all namespaces`,
				}, {
					Name:        []string{"--chunk-size"},
					Description: `Return large lists in chunks rather than all at once. Pass 0 to disable`,
					Args: []model.Arg{{
						Name: "int",
					}},
				}, {
					Name:        []string{"--completed"},
					Description: `Show completed workflows. Mutually exclusive with --running`,
				}, {
					Name:        []string{"--field-selector"},
					Description: `Selector (field query) to filter on. Supports '=' '==' and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for list`,
				}, {
					Name:        []string{"--no-headers"},
					Description: `Don't print headers (default print headers)`,
				}, {
					Name:        []string{"--older"},
					Description: `List completed workflows finished before the specified duration (e.g. 10m 3h 1d)`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: name|wide|yaml|json`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--prefix"},
					Description: `Filter workflows by prefix`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--resubmitted"},
					Description: `Show resubmitted workflows`,
				}, {
					Name:        []string{"--running"},
					Description: `Show running workflows. Mutually exclusive with --completed`,
				}, {
					Name:        []string{"--selector", "-l"},
					Description: `Selector (label query) to filter on`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--since"},
					Description: `Show only workflows created after than a relative duration`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--status"},
					Description: `Filter by status (comma separated)`,
					Args: []model.Arg{{
						Name: "strings",
					}},
				}},
			}, {
				Name:        []string{"resume"},
				Description: `Resume zero or more cron workflows`,
				Args: []model.Arg{{
					Name: "CRON_WORKFLOW",
				}},
			}, {
				Name:        []string{"suspend"},
				Description: `Suspend zero or more cron workflows`,
				Args: []model.Arg{{
					Name: "CRON_WORKFLOW",
				}},
			}},
		}, {
			Name:        []string{"delete"},
			Description: `Delete workflows`,
			Args: []model.Arg{{
				Name: "WORKFLOW",
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Delete all workflows`,
			}, {
				Name:        []string{"--all-namespaces", "-A"},
				Description: `Delete workflows from all namespaces`,
			}, {
				Name:        []string{"--completed"},
				Description: `Delete completed workflows`,
			}, {
				Name:        []string{"--dry-run"},
				Description: `Do not delete the workflow only print what would happen`,
			}, {
				Name:        []string{"--field-selector"},
				Description: `Selector (field query) to filter on supports '=' '==' and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--force"},
				Description: `Force delete workflows by removing finalizers`,
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for delete`,
			}, {
				Name:        []string{"--older"},
				Description: `Delete completed workflows finished before the specified duration (e.g. 10m 3h 1d)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--prefix"},
				Description: `Delete workflows by prefix`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--resubmitted"},
				Description: `Delete resubmitted workflows`,
			}, {
				Name:        []string{"--selector", "-l"},
				Description: `Selector (label query) to filter on not including uninitialized ones supports '=''=='and '!='.(e.g. -l key1=value1,key2=value2)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"executor-plugin"},
			Description: `Manage executor plugins`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"build"},
				Description: `Build an executor plugin`,
				Args: []model.Arg{{
					Name: "DIR",
				}},
			}},
		}, {
			Name:        []string{"get"},
			Description: `Display details about a workflow`,
			Args: []model.Arg{{
				Name: "WORKFLOW",
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Help for get`,
			}, {
				Name:        []string{"--no-color"},
				Description: `Disable colorized output`,
			}, {
				Name:        []string{"--no-utf8"},
				Description: `Use plain 7-bits ascii characters`,
			}, {
				Name:        []string{"--node-field-selector"},
				Description: `Selector of node to display, Eg: --node-field-selector phase=abc`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Output format. One of: json|yaml|short|wide`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--status"},
				Description: `Filter by status (Pending, Running, Succeeded, Skipped, Failed, Error)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"help"},
			Description: `Help about any command`,
		}, {
			Name:        []string{"lint"},
			Description: `Validate files or directories of manifests`,
			Args: []model.Arg{{
				Name: "FILE",
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Help for lint`,
			}, {
				Name:        []string{"--kinds"},
				Description: `Which kinds will be linted. Can be: workflows|workflowtemplates|cronworkflows|clusterworkflowtemplates (default [all])`,
				Args: []model.Arg{{
					Name: "strings",
				}},
			}, {
				Name:        []string{"--offline"},
				Description: `Perform offline linting`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Linting results output format. One of: pretty|simple (default "pretty")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--strict"},
				Description: `Perform strict workflow validation (default true)`,
			}},
		}, {
			Name:        []string{"list"},
			Description: `List workflows`,
			Options: []model.Option{{
				Name:        []string{"--all-namespaces", "-A"},
				Description: `Show workflows from all namespaces`,
			}, {
				Name:        []string{"--chunk-size"},
				Description: `Return large lists in chunks rather than all at once. Pass 0 to disable`,
				Args: []model.Arg{{
					Name: "int",
				}},
			}, {
				Name:        []string{"--completed"},
				Description: `Show completed workflows. Mutually exclusive with --running`,
			}, {
				Name:        []string{"--field-selector"},
				Description: `Selector (field query) to filter on supports '=' '==' and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for list`,
			}, {
				Name:        []string{"--no-headers"},
				Description: `Don't print headers (default print headers)`,
			}, {
				Name:        []string{"--older"},
				Description: `List completed workflows finished before the specified duration (e.g. 10m 3h 1d)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Output format. One of: name|wide|yaml|json`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--prefix"},
				Description: `Filter workflows by prefix`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--resubmitted"},
				Description: `Show resubmitted workflows`,
			}, {
				Name:        []string{"--running"},
				Description: `Show running workflows. Mutually exclusive with --completed`,
			}, {
				Name:        []string{"--selector", "-l"},
				Description: `Selector (label query) to filter on not including uninitialized ones supports '=' '==' and '!='.(e.g. -l key1=value1,key2=value2)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--since"},
				Description: `Show only workflows created after than a relative duration`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--status"},
				Description: `Filter by status (comma separated)`,
				Args: []model.Arg{{
					Name: "strings",
				}},
			}},
		}, {
			Name:        []string{"logs"},
			Description: `View logs of a pod or workflow`,
			Args: []model.Arg{{
				Name: "WORKFOW",
			}, {
				Name:       "POD",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--container", "-c"},
				Description: `Print the logs of this container (default "main")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--follow", "-f"},
				Description: `Specify if the logs should be streamed`,
			}, {
				Name:        []string{"--grep"},
				Description: `Grep for lines`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for logs`,
			}, {
				Name:        []string{"--no-color"},
				Description: `Disable colorized output`,
			}, {
				Name:        []string{"--previous", "-p"},
				Description: `Specify if the previously terminated container logs should be returned`,
			}, {
				Name:        []string{"--selector", "-l"},
				Description: `Log selector for some pod`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--since"},
				Description: `Only return logs newer than a relative duration like 5s 2m or 3h. Defaults to all logs. Only one of since-time / since may be used`,
				Args: []model.Arg{{
					Name: "duration",
				}},
			}, {
				Name:        []string{"--since-time"},
				Description: `Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--tail"},
				Description: `If set the number of lines from the end of the logs to show. If not specified logs are shown from the creation of the container or sinceSeconds or sinceTime (default -1)`,
				Args: []model.Arg{{
					Name: "int",
				}},
			}, {
				Name:        []string{"--timestamps"},
				Description: `Include timestamps on each line in the log output`,
			}},
		}, {
			Name:        []string{"node"},
			Description: `Perform action on a node in a workflow`,
			Args: []model.Arg{{
				Name: "ACTION",
			}, {
				Name: "WORKFLOW",
			}, {
				Name: "FLAGS",
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Help for node`,
			}, {
				Name:        []string{"--message", "-m"},
				Description: `Set the message of a node eg: --message "Hello World"`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--node-field-selector"},
				Description: `Selector of node to set eg: --node-field-selector inputs.paramaters.myparam.value=abc`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--output-parameter", "-p"},
				Description: `Set a "supplied" output parameter of node eg: --output-parameter parameter-name="Hello world!"`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--phase"},
				Description: `Phase to set the node to eg: --phase Succeeded`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"resubmit"},
			Description: `Resubmit one or more workflows`,
			Args: []model.Arg{{
				Name: "WORKFLOW...",
			}},
			Options: []model.Option{{
				Name:        []string{"--field-selector"},
				Description: `Selector (field query) to filter on: supports '=' '==' and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for resubmit`,
			}, {
				Name:        []string{"--log"},
				Description: `Log the workflow until it completes`,
			}, {
				Name:        []string{"--memoized"},
				Description: `Re-use successful steps & outputs from the previous run`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Output format. One of: name|json|yaml|wide`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--parameter", "-p"},
				Description: `Input parameter to override on the original workflow spec`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--priority"},
				Description: `Workflow priority`,
				Args: []model.Arg{{
					Name: "int32",
				}},
			}, {
				Name:        []string{"--selector", "-l"},
				Description: `Selector (label query) to filter on`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--wait", "-w"},
				Description: `Wait for the workflow to complete - only works when a single workflow is resubmitted`,
			}, {
				Name:        []string{"--watch"},
				Description: `Watch the workflow until it completes - only works when a single workflow is resubmitted`,
			}},
		}, {
			Name:        []string{"resume"},
			Description: `Resume zero or more workflows`,
			Args: []model.Arg{{
				Name: "WORKFLOW1",
			}, {
				Name: "WORKFLOW2...",
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Help for resume`,
			}, {
				Name:        []string{"--node-field-selector"},
				Description: `Selector of node to resume, Eg: --node-field-selector inputs.paramaters.myparam.value=abc`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"retry"},
			Description: `Retry zero or more workflows`,
			Args: []model.Arg{{
				Name: "WORKFLOW...",
			}},
			Options: []model.Option{{
				Name:        []string{"--field-selector"},
				Description: `Selector (field query) to filter on, Supports '='; '=='; and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for retry`,
			}, {
				Name:        []string{"--log"},
				Description: `Log the workflow until it completes`,
			}, {
				Name:        []string{"--node-field-selector"},
				Description: `Selector of nodes to reset; eg: --node-field-selector inputs.paramaters.myparam.value=abc`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Output format. One of: name|json|yaml|wide`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--parameter", "-p"},
				Description: `Input parameter to override on the original workflow spec`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--restart-successful"},
				Description: `Indicates to restart successful nodes matching the --node-field-selector`,
			}, {
				Name:        []string{"--selector", "-l"},
				Description: `Selector (label query) to filter on; not including uninitialized ones supports '=' '==' and '!='.(e.g. -l key1=value1,key2=value2)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--wait", "-w"},
				Description: `Wait for the workflow to complete only works when a single workflow is retried`,
			}, {
				Name:        []string{"--watch"},
				Description: `Watch the workflow until it completes only works when a single workflow is retried`,
			}},
		}, {
			Name:        []string{"server"},
			Description: `Start the Argo Server`,
			Options: []model.Option{{
				Name:        []string{"--access-control-allow-origin"},
				Description: `Set Access-Control-Allow-Origin header in HTTP responses`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--allowed-link-protocol"},
				Description: `Allowed link protocol in configMap. Used if the allowed configMap links protocol are different from http https. Defaults to the environment variable ALLOWED_LINK_PROTOCOL (default [http https])`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--api-rate-limit"},
				Description: `Set limit per IP for api ratelimiter (default 1000)`,
				Args: []model.Arg{{
					Name: "uint",
				}},
			}, {
				Name:        []string{"--auth-mode"},
				Description: `API server authentication mode. Any 1 or more length permutation of: client server sso (default [client])`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--basehref"},
				Description: `Value for base href in index.html. Used if the server is running behind reverse proxy under subpath different from /. Defaults to the environment variable BASE_HREF. (default " /")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"-b", "--browser"},
				Description: `Enable automatic launching of the browser [local mode]`,
			}, {
				Name:        []string{"--configmap"},
				Description: `Name of K8s configmap to retrieve workflow controller configuration (default "workflow-controller-configmap")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--event-async-dispatch"},
				Description: `Dispatch event async`,
			}, {
				Name:        []string{"--event-operation-queue-size"},
				Description: `How many events operations that can be queued at once (default 16)`,
				Args: []model.Arg{{
					Name: "int",
				}},
			}, {
				Name:        []string{"--event-worker-count"},
				Description: `How many event workers to run (default 4)`,
				Args: []model.Arg{{
					Name: "int",
				}},
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Help for server`,
			}, {
				Name:        []string{"--hsts"},
				Description: `Whether or not we should add a HTTP Secure Transport Security header. This only has effect if secure is enabled. (default true)`,
			}, {
				Name:        []string{"--log-format"},
				Description: `The formatter to use for logs. One of: text|json (default "text")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--managed-namespace"},
				Description: `Namespace that watches default to the installation namespace`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--namespaced"},
				Description: `Run as namespaced mode`,
			}, {
				Name:        []string{"-p", "--port"},
				Description: `Port to listen on (default 2746)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--tls-certificate-secret-name"},
				Description: `The name of a Kubernetes secret that contains the server certificates`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--x-frame-options"},
				Description: `Set X-Frame-Options header in HTTP responses. (default "DENY")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stop zero or more workflows allowing all exit handlers to run`,
			Args: []model.Arg{{
				Name: "WORKFLOW1",
			}, {
				Name: "WORKFLOW2...",
			}},
			Options: []model.Option{{
				Name:        []string{"--dry-run"},
				Description: `If true, only stop the workflows that would be stopped, without stopping them`,
			}, {
				Name:        []string{"--field-selector"},
				Description: `Selector (field query) to filter on  supports '='  '=='  and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Help for stop`,
			}, {
				Name:        []string{"--message"},
				Description: `Message to add to previously running nodes`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--node-field-selector"},
				Description: `Selector of node to stop eg: --node-field-selector inputs.paramaters.myparam.value=abc`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"-l", "--selector"},
				Description: `Selector (label query) to filter on not including uninitialized ones supports '=' '==' and '!='.(e.g. -l key1=value1, key2=value2)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"submit"},
			Description: `Submit a workflow`,
			Args: []model.Arg{{
				Name: "FILE...",
			}},
			Options: []model.Option{{
				Name:        []string{"--dry-run"},
				Description: `Modify the workflow on the client-side without creating it`,
			}, {
				Name:        []string{"--entrypoint"},
				Description: `Override entrypoint`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--from"},
				Description: `Submit from an existing kind/name E.g. --from=cronwf/hello-world-cwf`,
				Args: []model.Arg{{
					Name: "kind/name",
				}},
			}, {
				Name:        []string{"--generate-name"},
				Description: `Override metadata.generateName`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Help for submit`,
			}, {
				Name:        []string{"-l", "--labels"},
				Description: `Comma separated labels to apply to the workflow. Will override previous values`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--log"},
				Description: `Log the workflow until it completes`,
			}, {
				Name:        []string{"--name"},
				Description: `Override metadata.name`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--node-field-selector"},
				Description: `Selector of node to display eg: --node-field-selector phase=abc`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Output format. One of: name|json|yaml|wide`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"-p", "--parameter"},
				Description: `Pass an input parameter`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"-f", "--parameter-file"},
				Description: `Pass a file containing all input parameters`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--priority"},
				Description: `Workflow priority`,
				Args: []model.Arg{{
					Name: "int32",
				}},
			}, {
				Name:        []string{"--scheduled-time"},
				Description: `Override the workflow's scheduledTime parameter (useful for backfilling). The time must be RFC3339`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--server-dry-run"},
				Description: `Send request to server with dry-run flag which will modify the workflow without creating it`,
			}, {
				Name:        []string{"--serviceaccount"},
				Description: `Run all pods in the workflow using specified serviceaccount`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--status"},
				Description: `Filter by status (Pending Running Succeeded Skipped Failed Error). Should only be used with --watch`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--strict"},
				Description: `Perform strict workflow validation (default true)`,
			}, {
				Name:        []string{"-w", "--wait"},
				Description: `Wait for the workflow to complete`,
			}, {
				Name:        []string{"--watch"},
				Description: `Watch the workflow until it completes`,
			}},
		}, {
			Name:        []string{"suspend"},
			Description: `Suspend zero or more workflow`,
			Args: []model.Arg{{
				Name: "WORKFLOW1",
			}, {
				Name: "WORKFLOW2...",
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for suspend`,
			}},
		}, {
			Name:        []string{"template"},
			Description: `Manipulate workflow templates`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for template`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Create a workflow template`,
				Args: []model.Arg{{
					Name: "FILE1",
				}, {
					Name: "FILE2...",
				}},
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for create`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: name|json|yaml|wide`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--strict"},
					Description: `Perform strict workflow validation (default true)`,
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a workflow template`,
				Args: []model.Arg{{
					Name: "WORKFLOW_TEMPLATE",
				}},
				Options: []model.Option{{
					Name:        []string{"--all"},
					Description: `Delete all workflow templates`,
				}, {
					Name:        []string{"-h", "--help"},
					Description: `Help for delete`,
				}},
			}, {
				Name:        []string{"get"},
				Description: `Display details about a workflow template`,
				Args: []model.Arg{{
					Name: "WORKFLOW_TEMPLATE",
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Help for get`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. One of: json|yaml|wide`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"lint"},
				Description: `Validate a file or directory of workflow template manifests`,
				Args: []model.Arg{{
					Name: "DIRECTORY",
				}, {
					Name: "FILE1 FILE2 FILE3...",
				}},
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for lint`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Linting results output format. One of: pretty|simple (default "pretty")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--strict"},
					Description: `Perform strict workflow validation (default true)`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List workflow templates`,
				Options: []model.Option{{
					Name:        []string{"--all-namespaces", "-A"},
					Description: `Show workflows from all namespaces`,
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for list`,
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Output format. One of: wide|name`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}},
		}, {
			Name:        []string{"terminate"},
			Description: `Terminate zero or more workflows immediately`,
			Args: []model.Arg{{
				Name: "WORKFLOOW WORKFLOW2...",
			}},
			Options: []model.Option{{
				Name:        []string{"--dry-run"},
				Description: `Do not terminate the workflow only print what would happen`,
			}, {
				Name:        []string{"--field-selector"},
				Description: `Selector (field query) to filter on supports '=' '==' and '!='.(e.g. --field-selector key1=value1key2=value2). The server only supports a limited number of field queries per type`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Help for terminate`,
			}, {
				Name:        []string{"-l", "--selector"},
				Description: `Selector (label query) to filter on not including uninitialized ones supports '=' '==' and '!='.(e.g. -l key1=value1key2=value2)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"version"},
			Description: `Print version information`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Help for version`,
			}, {
				Name:        []string{"--short"},
				Description: `Print just the version number`,
			}},
		}, {
			Name:        []string{"wait"},
			Description: `Waits for workflows to complete`,
			Args: []model.Arg{{
				Name: "[WORKFLOW...]",
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for wait`,
			}, {
				Name:        []string{"--ignore-not-found"},
				Description: `Ignore the wait if the workflow is not found`,
			}},
		}, {
			Name:        []string{"watch"},
			Description: `Watch a workflow until it completes`,
			Args: []model.Arg{{
				Name: "WORKFLOW",
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for watch`,
			}, {
				Name:        []string{"--node-field-selector"},
				Description: `Selector of node to display eg: --node-field-selector phase=abc`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--status"},
				Description: `Filter by status (Pending, Running, Succeeded, Skipped, Failed, Error)`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}},
	}
}
