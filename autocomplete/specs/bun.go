// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["bun"] = model.Subcommand{
		Name:        []string{"bun"},
		Description: `A fast bundler, transpiler, JavaScript Runtime and package manager for web software`,
		Args: []model.Arg{{
			Name:      "file",
			Generator: nil, // TODO: port over generator
		}, {
			Name: "args",
		}},
		Options: []model.Option{{
			Name:        []string{"--use"},
			Description: `Choose a framework, e.g. "--use next". It checks first for a package named "bun-framework-packagename" and then "packagename"`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "framework",
				Suggestions: []model.Suggestion{{Name: []string{`next`}}},
			}},
		}, {
			Name:        []string{"--bunfile"},
			Description: `Use a .bun file (default: node_modules.bun)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--server-bunfile"},
			Description: `Use a .server.bun file (default: node_modules.server.bun)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--cwd"},
			Description: `Absolute path to resolve files & entry points from. This just changes the process' cwd`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "path",
			}},
		}, {
			Name:        []string{"-c", "--config"},
			Description: `Config file to load bun from (e.g. -c bunfig.toml`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "path",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"--disable-react-fast-refresh"},
			Description: `Disable React Fast Refresh`,
		}, {
			Name:        []string{"--disable-hmr"},
			Description: `Disable Hot Module Reloading (disables fast refresh too)`,
		}, {
			Name:        []string{"--extension-order"},
			Description: `Defaults to: .tsx,.ts,.jsx,.js,.json`,
			Args: []model.Arg{{
				Name:       "order",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--jsx-factory"},
			Description: `Changes the function called when compiling JSX elements using the classic JSX runtime`,
			Args: []model.Arg{{
				Name:        "name",
				Suggestions: []model.Suggestion{{Name: []string{`React.createElement`}}, {Name: []string{`h`}}, {Name: []string{`preact.h`}}},
			}},
		}, {
			Name:        []string{"--jsx-fragment"},
			Description: `Changes the function called when compiling JSX fragments`,
			Args: []model.Arg{{
				Name:        "name",
				Suggestions: []model.Suggestion{{Name: []string{`React.Fragment`}}, {Name: []string{`Fragment`}}},
			}},
		}, {
			Name:        []string{"--jsx-import-source"},
			Description: `Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"`,
			Args: []model.Arg{{
				Name:        "module",
				Suggestions: []model.Suggestion{{Name: []string{`react`}}},
			}},
		}, {
			Name:        []string{"--jsx-production"},
			Description: `Use jsx instead of jsxDEV (default) for the automatic runtime`,
		}, {
			Name:        []string{"--jsx-runtime"},
			Description: `"automatic" (default) or "classic"`,
			Args: []model.Arg{{
				Name:        "name",
				Suggestions: []model.Suggestion{{Name: []string{`automatic`}}, {Name: []string{`classic`}}},
			}},
		}, {
			Name:        []string{"--main-fields"},
			Description: `Main fields to lookup in package.json. Defaults to --platform dependent`,
			Args: []model.Arg{{
				Name:       "fields",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--no-summary"},
			Description: `Don't print a summary (when generating .bun)`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Print version and exit`,
		}, {
			Name:        []string{"--platform"},
			Description: `"browser" or "node". Defaults to "browser"`,
			Args: []model.Arg{{
				Name:        "name",
				Suggestions: []model.Suggestion{{Name: []string{`browser`}}, {Name: []string{`node`}}},
			}},
		}, {
			Name:        []string{"--public-dir"},
			Description: `Top-level directory for .html files, fonts or anything external. Defaults to "<cwd>/public", to match create-react-app and Next.js`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--tsconfig-override"},
			Description: `Load tsconfig from path instead of cwd/tsconfig.json`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"-d", "--define"},
			Description: `Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON`,
			Args: []model.Arg{{
				Name:       "k:v",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-e", "--external"},
			Description: `Exclude module from transpilation (can use * wildcards). ex: -e react`,
			Args: []model.Arg{{
				Name:       "module",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Display this help and exit`,
		}, {
			Name:        []string{"-i", "--inject"},
			Description: `Inject module at the top of every file`,
			Args: []model.Arg{{
				Name:       "module",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-l", "--loader"},
			Description: `Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: jsx, js, json, tsx, ts, css`,
			Args: []model.Arg{{
				Name:       "loader",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-u", "--origin"},
			Description: `Rewrite import URLs to start with --origin. Default: ""`,
			Args: []model.Arg{{
				Name: "url",
			}},
		}, {
			Name:        []string{"-p", "--port"},
			Description: `Port to serve bun's dev server on. Default: "3000"`,
			Args: []model.Arg{{
				Name: "port",
			}},
		}, {
			Name:        []string{"--silent"},
			Description: `Don't repeat the command for bun run`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"dev"},
			Description: `Start a bun Dev server`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "files",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"bun"},
			Description: `Bundle dependencies of input files into a '.bun' file`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "files",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"c", "create"},
			Description: `Start a new project from a template`,
			Args: []model.Arg{{
				Name:        "template",
				Description: `Package from @bun-examples, GitHub repo, or local file`,
				Suggestions: []model.Suggestion{{Name: []string{`react`}}, {Name: []string{`next`}}, {Name: []string{`hono`}}, {Name: []string{`discord-interactions`}}, {Name: []string{`blank`}}, {Name: []string{`bun-bakery`}}},
				Generator:   nil, // TODO: port over generator
			}, {
				Templates: []model.Template{model.TemplateFolders},
				Name:      "name",
			}},
			Options: []model.Option{{
				Name:        []string{"--force"},
				Description: `Overwrite existing files`,
			}, {
				Name:        []string{"--no-install"},
				Description: `Don't install node_modules`,
			}, {
				Name:        []string{"--no-git"},
				Description: `Don't create a git repository`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Too many logs`,
			}, {
				Name:        []string{"--no-package-json"},
				Description: `Disable package.json transforms`,
			}, {
				Name:        []string{"--open"},
				Description: `On finish, start bun and open in browser`,
			}},
		}, {
			Name:        []string{"run"},
			Description: `Run a package.json script or executable`,
			Args: []model.Arg{{
				Name:           "script",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
			}, {
				Name:       "args",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"i", "install"},
			Description: `Install dependencies for a package.json`,
			Options: []model.Option{{
				Name:        []string{"-c", "--config"},
				Description: `Load config (bunfig.toml)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-y", "--yarn"},
				Description: `Write a yarn.lock file (yarn v1)`,
			}, {
				Name:        []string{"-p", "--production"},
				Description: `Don't install devDependencies`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Don't save a lockfile`,
			}, {
				Name:        []string{"--dry-run"},
				Description: `Don't install anything`,
			}, {
				Name:        []string{"--lockfile"},
				Description: `Store & load a lockfile at a specific filepath`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Always request the latest versions from the registry & reinstall all dependenices`,
			}, {
				Name:        []string{"--cache-dir"},
				Description: `Store & load cached data from a specific directory path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--no-cache"},
				Description: `Ignore manifest cache entirely`,
			}, {
				Name:        []string{"--silent"},
				Description: `Don't log anything`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Excessively verbose logging`,
			}, {
				Name:        []string{"-g", "--global"},
				Description: `Install globally`,
			}, {
				Name:        []string{"--cwd"},
				Description: `Set a specific cwd`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--backend"},
				Description: `Platform-specific optimizations for installing dependencies. For macOS, 'clonefile' (default), 'copyfile'`,
				Args: []model.Arg{{
					Name:        "syscall",
					Suggestions: []model.Suggestion{{Name: []string{`clonefile`}}, {Name: []string{`copyfile`}}},
				}},
			}, {
				Name:        []string{"--link-native-bins"},
				Description: `Link 'bin' from a matching platform-specific 'optionalDependencies' instead. Default: esbuild, turbo`,
				Args: []model.Arg{{
					Name:       "str",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--help"},
				Description: `Print the help menu`,
			}},
		}, {
			Name:        []string{"a", "add"},
			Description: `Add a dependency to package.json`,
			Args: []model.Arg{{
				Name:           "package",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
				IsVariadic:     true,
			}},
			Options: []model.Option{{
				Name:        []string{"-c", "--config"},
				Description: `Load config (bunfig.toml)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-y", "--yarn"},
				Description: `Write a yarn.lock file (yarn v1)`,
			}, {
				Name:        []string{"-p", "--production"},
				Description: `Don't install devDependencies`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Don't save a lockfile`,
			}, {
				Name:        []string{"--dry-run"},
				Description: `Don't install anything`,
			}, {
				Name:        []string{"--lockfile"},
				Description: `Store & load a lockfile at a specific filepath`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Always request the latest versions from the registry & reinstall all dependenices`,
			}, {
				Name:        []string{"--cache-dir"},
				Description: `Store & load cached data from a specific directory path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--no-cache"},
				Description: `Ignore manifest cache entirely`,
			}, {
				Name:        []string{"--silent"},
				Description: `Don't log anything`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Excessively verbose logging`,
			}, {
				Name:        []string{"-g", "--global"},
				Description: `Install globally`,
			}, {
				Name:        []string{"--cwd"},
				Description: `Set a specific cwd`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--backend"},
				Description: `Platform-specific optimizations for installing dependencies. For macOS, 'clonefile' (default), 'copyfile'`,
				Args: []model.Arg{{
					Name:        "syscall",
					Suggestions: []model.Suggestion{{Name: []string{`clonefile`}}, {Name: []string{`copyfile`}}},
				}},
			}, {
				Name:        []string{"--link-native-bins"},
				Description: `Link 'bin' from a matching platform-specific 'optionalDependencies' instead. Default: esbuild, turbo`,
				Args: []model.Arg{{
					Name:       "str",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--help"},
				Description: `Print the help menu`,
			}},
		}, {
			Name:        []string{"rm", "remove"},
			Description: `Remove a dependency from package.json`,
			Args: []model.Arg{{
				Name:           "package",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
				IsVariadic:     true,
			}},
			Options: []model.Option{{
				Name:        []string{"-c", "--config"},
				Description: `Load config (bunfig.toml)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-y", "--yarn"},
				Description: `Write a yarn.lock file (yarn v1)`,
			}, {
				Name:        []string{"-p", "--production"},
				Description: `Don't install devDependencies`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Don't save a lockfile`,
			}, {
				Name:        []string{"--dry-run"},
				Description: `Don't install anything`,
			}, {
				Name:        []string{"--lockfile"},
				Description: `Store & load a lockfile at a specific filepath`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Always request the latest versions from the registry & reinstall all dependenices`,
			}, {
				Name:        []string{"--cache-dir"},
				Description: `Store & load cached data from a specific directory path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--no-cache"},
				Description: `Ignore manifest cache entirely`,
			}, {
				Name:        []string{"--silent"},
				Description: `Don't log anything`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Excessively verbose logging`,
			}, {
				Name:        []string{"-g", "--global"},
				Description: `Install globally`,
			}, {
				Name:        []string{"--cwd"},
				Description: `Set a specific cwd`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--backend"},
				Description: `Platform-specific optimizations for installing dependencies. For macOS, 'clonefile' (default), 'copyfile'`,
				Args: []model.Arg{{
					Name:        "syscall",
					Suggestions: []model.Suggestion{{Name: []string{`clonefile`}}, {Name: []string{`copyfile`}}},
				}},
			}, {
				Name:        []string{"--link-native-bins"},
				Description: `Link 'bin' from a matching platform-specific 'optionalDependencies' instead. Default: esbuild, turbo`,
				Args: []model.Arg{{
					Name:       "str",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--help"},
				Description: `Print the help menu`,
			}},
		}, {
			Name:        []string{"upgrade"},
			Description: `Get the latest version of bun`,
		}, {
			Name:        []string{"completions"},
			Description: `Install shell completions`,
		}, {
			Name:        []string{"discord"},
			Description: `Open bun's Discord server`,
		}, {
			Name:        []string{"help"},
			Description: `Print the help menu`,
		}},
	}
}
