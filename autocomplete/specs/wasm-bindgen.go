// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["wasm-bindgen"] = model.Subcommand{
		Name:        []string{"wasm-bindgen"},
		Description: `Generate bindings between WebAssembly and JavaScript`,
		Args: []model.Arg{{
			Name:        "input",
			Description: `File name to output the compiled binary bindings`,
			Generator:   nil, // TODO: port over generator
		}},
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for wasm-bindgen`,
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Show version for wasm-bindgen`,
		}, {
			Name:        []string{"--out-dir"},
			Description: `Output directory`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Target directory to emit JS bindings, TS definitions, .wasm binaries, etc`,
			}},
		}, {
			Name:        []string{"--out-name"},
			Description: `Set a custom output filename (Without extension. Defaults to crate name)`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "filename",
				Description: `Output filename`,
			}},
		}, {
			Name:        []string{"--target"},
			Description: `What type of output to generate`,
			Args: []model.Arg{{
				Name: "target",
				Suggestions: []model.Suggestion{{
					Name:        []string{`web`},
					Description: `Directly loadable in a web browser`,
				}, {
					Name:        []string{`bundler`},
					Description: `Suitable for loading in bundlers like Webpack`,
				}, {
					Name:        []string{`nodejs`},
					Description: `Loadable via require as a Node.js module`,
				}, {
					Name:        []string{`no-modules`},
					Description: `Like web, but older and doesn't use ES modules`,
				}, {
					Name:        []string{`deno`},
					Description: `Loadable using imports from Deno modules`,
				}},
			}},
		}, {
			Name:        []string{"--no-modules-global"},
			Description: `Name of global to assign generated bindings to`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"--browser"},
			Description: `Hint that JS should only be compatible with a browser`,
		}, {
			Name:        []string{"--typescript"},
			Description: `Output a TypeScript definition file (on by default)`,
		}, {
			Name:        []string{"--no-typescript"},
			Description: `Don't emit a *.d.ts file`,
		}, {
			Name:        []string{"--omit-imports"},
			Description: `Don't emit imports in generated JavaScript`,
		}, {
			Name:        []string{"--debug"},
			Description: `Include otherwise-extraneous debug checks in output`,
		}, {
			Name:        []string{"--no-demangle"},
			Description: `Don't demangle Rust symbol names`,
		}, {
			Name:        []string{"--keep-debug"},
			Description: `Keep debug sections in wasm files`,
		}, {
			Name:        []string{"--remove-name-section"},
			Description: `Remove the debugging "name" section of the file`,
		}, {
			Name:        []string{"--remove-producers-section"},
			Description: `Remove the telemetry "producers" section`,
		}, {
			Name:        []string{"--omit-default-module-path"},
			Description: `Don't add WebAssembly fallback imports in generated JavaScript`,
		}, {
			Name:        []string{"--encode-into"},
			Description: `Whether or not to use TextEncoder#encodeInto()`,
			Args: []model.Arg{{
				Name: "option",
				Suggestions: []model.Suggestion{{
					Name: []string{`test`},
				}, {
					Name:        []string{`always`},
					Description: `Always use TextEncoder#encodeInto()`,
				}, {
					Name:        []string{`never`},
					Description: `Never use TextEncoder#encodeInto()`,
				}},
			}},
		}, {
			Name:        []string{"--nodejs"},
			Description: `Deprecated, use "--target nodejs"`,
		}, {
			Name:        []string{"--web"},
			Description: `Deprecated, use "--target web"`,
		}, {
			Name:        []string{"--no-modules"},
			Description: `Deprecated, use "--target no-modules"`,
		}, {
			Name:        []string{"--weak-refs"},
			Description: `Enable usage of the JS weak references proposal`,
		}, {
			Name:        []string{"--reference-types"},
			Description: `Enable usage of WebAssembly reference types`,
		}},
	}
}
