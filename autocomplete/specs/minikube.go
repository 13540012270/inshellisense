// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["minikube"] = model.Subcommand{
		Name:        []string{"minikube"},
		Description: `Minikube provisions and manages local Kubernetes clusters optimized for development workflows`,
		Subcommands: []model.Subcommand{{
			Name:        []string{"start"},
			Description: `Starts a local Kubernetes cluster`,
			Options: []model.Option{{
				Name:        []string{"--addons"},
				Description: `Enable addons. see "minikube addons list" for a list of valid addon names`,
			}, {
				Name:        []string{"--apiserver-ips"},
				Description: `A set of apiserver IP Addresses which are used in the generated certificate for kubernetes`,
			}, {
				Name:        []string{"--apiserver-name"},
				Description: `The authoritative apiserver hostname for apiserver certificates and connectivity`,
			}, {
				Name:        []string{"--apiserver-names"},
				Description: `A set of apiserver names which are used in the generated certificate for kubernetes`,
			}, {
				Name:        []string{"--apiserver-port"},
				Description: `The apiserver listening port`,
			}, {
				Name:        []string{"--auto-update-drivers"},
				Description: `If set, automatically updates drivers to the latest version`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				}},
			}, {
				Name:        []string{"--base-image"},
				Description: `The base image to use for docker/podman drivers. Intended for local development`,
			}, {
				Name:        []string{"--cache-images"},
				Description: `If true, cache docker images for the current bootstrapper and load them into the machine`,
			}, {
				Name:        []string{"--cert-expiration"},
				Description: `Duration until minikube certificate expiration`,
			}, {
				Name:        []string{"--cni"},
				Description: `CNI plug-in to use`,
				Args: []model.Arg{{
					Name:        "cni-plugin",
					Suggestions: []model.Suggestion{{Name: []string{`auto`}}, {Name: []string{`bridge`}}, {Name: []string{`cilium`}}, {Name: []string{`flannel`}}, {Name: []string{`kindnet`}}},
				}},
			}, {
				Name:        []string{"--container-runtime"},
				Description: `The container runtime to be used`,
				Args: []model.Arg{{
					Name:        "container-runtime",
					Suggestions: []model.Suggestion{{Name: []string{`docker`}}, {Name: []string{`cri-o`}}, {Name: []string{`containerd`}}},
				}},
			}, {
				Name:        []string{"--cpus"},
				Description: `Number of CPUs allocated to Kubernetes`,
				Args: []model.Arg{{
					Name:        "cpu number",
					Suggestions: []model.Suggestion{{Name: []string{`max`}}},
				}},
			}, {
				Name:        []string{"--cri-socket"},
				Description: `The cri socket path to be used`,
			}, {
				Name:        []string{"--delete-on-failure"},
				Description: `If set, delete the current cluster if start fails and try again`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				}},
			}, {
				Name:        []string{"--disable-driver-mounts"},
				Description: `Disables the filesystem mounts provided by the hypervisors`,
			}, {
				Name:        []string{"--disk-size"},
				Description: `Disk size allocated to the minikube VM`,
			}, {
				Name:        []string{"--dns-domain"},
				Description: `The cluster dns domain name used in the Kubernetes cluster`,
			}, {
				Name:        []string{"--dns-proxy"},
				Description: `Enable proxy for NAT DNS requests`,
			}, {
				Name:        []string{"--docker-env"},
				Description: `Environment variables to pass to the Docker daemon. (format: key=value)`,
			}, {
				Name:        []string{"--docker-opt"},
				Description: `Specify arbitrary flags to pass to the Docker daemon. (format: key=value)`,
			}, {
				Name:        []string{"--download-only"},
				Description: `If true, only download and cache files for later use - don't install or start anything`,
			}, {
				Name:        []string{"--driver"},
				Description: `Choose driver`,
				Args: []model.Arg{{
					Name:        "driver",
					Suggestions: []model.Suggestion{{Name: []string{`virtualbox`}}, {Name: []string{`parallels`}}, {Name: []string{`vmwarefusion`}}, {Name: []string{`hyperkit`}}, {Name: []string{`vmware`}}, {Name: []string{`docker`}}, {Name: []string{`podman`}}},
				}},
			}, {
				Name:        []string{"--dry-run"},
				Description: `Dry-run mode. Validates configuration, but does not mutate system state`,
			}, {
				Name:        []string{"--embed-certs"},
				Description: `If true, will embed the certs in kubeconfig`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				}},
			}, {
				Name:        []string{"--extra-config"},
				Description: `A set of key=value pairs that describe configuration that may be passed to different components`,
			}, {
				Name:        []string{"--extra-disks"},
				Description: `Number of extra disks created and attached to the minikube VM`,
			}, {
				Name:        []string{"--feature-gates"},
				Description: `A set of key=value pairs that describe feature gates for alpha/experimental features`,
			}, {
				Name:        []string{"--force"},
				Description: `Force minikube to perform possibly dangerous operations`,
			}, {
				Name:        []string{"--force-systemd"},
				Description: `If set, force the container runtime to use systemd as cgroup manager`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				}},
			}, {
				Name:        []string{"--host-dns-resolver"},
				Description: `Enable host resolver for NAT DNS requests`,
			}, {
				Name:        []string{"--host-only-cidr"},
				Description: `The CIDR to be used for the minikube VM`,
			}, {
				Name:        []string{"--host-only-nic-type"},
				Description: `NIC Type used for host only network`,
				Args: []model.Arg{{
					Name:        "nic type",
					Suggestions: []model.Suggestion{{Name: []string{`Am79C970A`}}, {Name: []string{`Am79C973`}}, {Name: []string{`82540EM`}}, {Name: []string{`82543GC`}}, {Name: []string{`82545EM`}}, {Name: []string{`virtio`}}},
				}},
			}, {
				Name:        []string{"--hyperkit-vpnkit-sock"},
				Description: `Location of the VPNKit socket used for networking`,
			}, {
				Name:        []string{"--hyperkit-vsock-ports"},
				Description: `List of guest VSock ports that should be exposed as sockets on the host`,
			}, {
				Name:        []string{"--hyperv-external-adapter"},
				Description: `External Adapter on which external switch will be created if no external switch is found`,
			}, {
				Name:        []string{"--hyperv-use-external-switch"},
				Description: `Whether to use external switch over Default Switch if virtual switch not explicitly specified`,
			}, {
				Name:        []string{"--hyperv-virtual-switch"},
				Description: `The hyperv virtual switch name. Defaults to first found`,
			}, {
				Name:        []string{"--image-mirror-country"},
				Description: `Country code of the image mirror to be used`,
			}, {
				Name:        []string{"--image-repository"},
				Description: `Alternative image repository to pull docker images from`,
			}, {
				Name:        []string{"--insecure-registry"},
				Description: `Insecure Docker registries to pass to the Docker daemon`,
			}, {
				Name:        []string{"--install-addons"},
				Description: `If set, install addons. Defaults to true`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				}},
			}, {
				Name:        []string{"--interactive"},
				Description: `Allow user prompts for more information`,
			}, {
				Name:        []string{"--iso-url"},
				Description: `Locations to fetch the minikube ISO from`,
			}, {
				Name:        []string{"--keep-context"},
				Description: `This will keep the existing kubectl context and will create a minikube context`,
			}, {
				Name:        []string{"--kubernetes-version"},
				Description: `The Kubernetes version that the minikube VM will use`,
			}, {
				Name:        []string{"--kvm-gpu"},
				Description: `Enable experimental NVIDIA GPU support in minikube`,
			}, {
				Name:        []string{"--kvm-hidden"},
				Description: `Hide the hypervisor signature from the guest in minikube`,
			}, {
				Name:        []string{"--kvm-network"},
				Description: `The KVM default network name`,
			}, {
				Name:        []string{"--kvm-numa-count"},
				Description: `Simulate numa node count in minikube, supported numa node count range is 1-8`,
				Args: []model.Arg{{
					Name:        "numa count",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}, {Name: []string{`6`}}, {Name: []string{`7`}}, {Name: []string{`8`}}},
				}},
			}, {
				Name:        []string{"--kvm-qemu-uri"},
				Description: `The KVM QEMU connection URI`,
			}, {
				Name:        []string{"--listen-address"},
				Description: `IP Address to use to expose ports`,
			}, {
				Name:        []string{"--memory"},
				Description: `Amount of RAM to allocate to Kubernetes`,
			}, {
				Name:        []string{"--mount"},
				Description: `This will start the mount daemon and automatically mount files into minikube`,
			}, {
				Name:        []string{"--mount-string"},
				Description: `The argument to pass the minikube mount command on start`,
			}, {
				Name:        []string{"--namespace"},
				Description: `The named space to activate after start`,
			}, {
				Name:        []string{"--nat-nic-type"},
				Description: `NIC Type used for nat network`,
			}, {
				Name:        []string{"--native-ssh"},
				Description: `Use native Golang SSH client`,
			}, {
				Name:        []string{"--network"},
				Description: `Network to run minikube with`,
			}, {
				Name:        []string{"--network-plugin"},
				Description: `Kubelet network plug-in to use`,
			}, {
				Name:        []string{"--nfs-share"},
				Description: `Local folders to share with Guest via NFS mounts`,
			}, {
				Name:        []string{"--nfs-shares-root"},
				Description: `Where to root the NFS Shares`,
			}, {
				Name:        []string{"--no-kubernetes"},
				Description: `If set, minikube VM/container will start without starting or configuring Kubernetes`,
			}, {
				Name:        []string{"--no-vtx-check"},
				Description: `Disable checking for the availability of hardware virtualization before the vm is started`,
			}, {
				Name:        []string{"--nodes", "-n"},
				Description: `The number of nodes to spin up`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Format to print stdout in`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`text`}}},
				}},
			}, {
				Name:        []string{"--ports"},
				Description: `List of ports that should be exposed`,
			}, {
				Name:        []string{"--preload"},
				Description: `If set, download tarball of preloaded images if available to improve start time`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				}},
			}, {
				Name:        []string{"--registry-mirror"},
				Description: `Registry mirrors to pass to the Docker daemon`,
			}, {
				Name:        []string{"--service-cluster-ip-range"},
				Description: `The CIDR to be used for service cluster IPs`,
			}, {
				Name:        []string{"--ssh-ip-address"},
				Description: `IP address`,
			}, {
				Name:        []string{"--ssh-key"},
				Description: `SSH key`,
			}, {
				Name:        []string{"--ssh-port"},
				Description: `SSH port`,
			}, {
				Name:        []string{"--ssh-user"},
				Description: `SSH user`,
			}, {
				Name:        []string{"--trace"},
				Description: `Send trace events`,
				Args: []model.Arg{{
					Name:        "trace",
					Suggestions: []model.Suggestion{{Name: []string{`gcp`}}},
				}},
			}, {
				Name:        []string{"--uuid"},
				Description: `Provide VM UUID to restore MAC address`,
			}, {
				Name:        []string{"--vm"},
				Description: `Filter to use only VM Drivers`,
			}, {
				Name:        []string{"--wait"},
				Description: `Comma separated list of Kubernetes components to verify and wait for after starting a cluster`,
			}, {
				Name:        []string{"--wait-timeout"},
				Description: `Max time to wait per Kubernetes or host to be healthy`,
			}},
		}, {
			Name:        []string{"status"},
			Description: `Gets the status of a local Kubernetes cluster`,
			Options: []model.Option{{
				Name:        []string{"--format", "-f"},
				Description: `Go template format string for the status output`,
			}, {
				Name:        []string{"--layout", "-l"},
				Description: `Output layout`,
			}, {
				Name:        []string{"--node", "-n"},
				Description: `The node to check status for`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Format to print stdout in`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`text`}}},
				}},
			}, {
				Name:        []string{"--watch", "-w"},
				Description: `Continuously listing/getting the status with optional interval duration`,
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stops a running local Kubernetes cluster`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Set flag to stop all profiles (clusters)`,
			}, {
				Name:        []string{"--cancel-scheduled"},
				Description: `Output layout`,
			}, {
				Name:        []string{"--keep-context-active"},
				Description: `The node to check status for`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Format to print stdout in`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`text`}}},
				}},
			}, {
				Name:        []string{"--schedule"},
				Description: `Set flag to stop cluster after a set amount of time`,
			}},
		}, {
			Name:        []string{"delete"},
			Description: `Deletes a local Kubernetes cluster`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Set flag to delete all profiles`,
			}, {
				Name:        []string{"--purge"},
				Description: `Set this flag to delete the '.minikube' folder from your user directory`,
			}},
		}, {
			Name:        []string{"unpause"},
			Description: `Unpause Kubernetes`,
			Options: []model.Option{{
				Name:        []string{"--all-namespaces", "-A"},
				Description: `If set, unpause all namespaces`,
			}, {
				Name:        []string{"--namespaces", "-n"},
				Description: `Namespaces to unpause`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Format to print stdout in`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`text`}}},
				}},
			}},
		}, {
			Name:        []string{"docker-env"},
			Description: `Configure environment to use minikube's Docker daemon`,
			Options: []model.Option{{
				Name:        []string{"--no-proxy", "-A"},
				Description: `If set, unpause all namespaces`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Format to print stdout in`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`text`}}},
				}},
			}, {
				Name:        []string{"--shell"},
				Description: `Force environment to be configured for a specified shell`,
			}, {
				Name:        []string{"--ssh-host"},
				Description: `Use SSH connection instead of HTTPS (port 2376)`,
			}, {
				Name:        []string{"--unset", "-u"},
				Description: `Unset variables instead of setting them`,
			}},
		}, {
			Name:        []string{"podman-env"},
			Description: `Configure environment to use minikube's Podman service`,
			Options: []model.Option{{
				Name:        []string{"--shell"},
				Description: `Force environment to be configured for a specified shell`,
			}, {
				Name:        []string{"--unset", "-u"},
				Description: `Unset variables instead of setting them`,
			}},
		}, {
			Name:        []string{"cache"},
			Description: `Add, delete, or push a local image into minikube`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"add"},
				Description: `Add an image to local cache`,
			}, {
				Name:        []string{"delete"},
				Description: `Delete an image from the local cache`,
			}, {
				Name:        []string{"list"},
				Description: `List all available images from the local cache`,
			}, {
				Name:        []string{"reload"},
				Description: `Reload cached images`,
			}},
		}, {
			Name:        []string{"image"},
			Description: `Manage images`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"build"},
				Description: `Build a container image in minikube`,
			}, {
				Name:        []string{"load"},
				Description: `Load a image into minikube`,
			}, {
				Name:        []string{"ls"},
				Description: `List images`,
			}, {
				Name:        []string{"pull"},
				Description: `Pull images`,
			}, {
				Name:        []string{"push"},
				Description: `Push images`,
			}, {
				Name:        []string{"rm"},
				Description: `Remove one or more images`,
			}, {
				Name:        []string{"save"},
				Description: `Save a image from minikube`,
			}, {
				Name:        []string{"tag"},
				Description: `Tag images`,
			}},
		}, {
			Name:        []string{"addons"},
			Description: `Enable or disable a minikube addon`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"configure"},
				Description: `Configures the addon w/ADDON_NAME within minikube`,
			}, {
				Name:        []string{"disable"},
				Description: `Disables the addon w/ADDON_NAME within minikube`,
			}, {
				Name:        []string{"enable"},
				Description: `Enables the addon w/ADDON_NAME within minikube`,
			}, {
				Name:        []string{"images"},
				Description: `List image names the addon w/ADDON_NAME used`,
			}, {
				Name:        []string{"list"},
				Description: `Lists all available minikube addons as well as their current statuses`,
			}, {
				Name:        []string{"open"},
				Description: `Opens the addon w/ADDON_NAME within minikube`,
			}},
		}, {
			Name:        []string{"config"},
			Description: `Modify persistent configuration values`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"defaults"},
				Description: `Lists all valid default values for PROPERTY_NAME`,
			}, {
				Name:        []string{"get"},
				Description: `Gets the value of PROPERTY_NAME from the minikube config file`,
			}, {
				Name:        []string{"set"},
				Description: `Sets an individual value in a minikube config file`,
			}, {
				Name:        []string{"unset"},
				Description: `Unsets an individual value in a minikube config file`,
			}, {
				Name:        []string{"view"},
				Description: `Display values currently set in the minikube config file`,
			}},
		}, {
			Name:        []string{"profile"},
			Description: `Get or list the current profiles (clusters)`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"list"},
				Description: `Lists all minikube profiles`,
			}},
		}, {
			Name:        []string{"update-context"},
			Description: `Update kubeconfig in case of an IP or port change`,
		}, {
			Name:        []string{"service"},
			Description: `Returns a URL to connect to a service`,
			Options: []model.Option{{
				Name:        []string{"--https"},
				Description: `Open the service URL with https instead of http`,
			}, {
				Name:        []string{"--interval"},
				Description: `The initial time interval for each check that wait performs in seconds`,
			}, {
				Name:        []string{"--namespace"},
				Description: `The service namespace`,
			}, {
				Name:        []string{"--url"},
				Description: `Display the Kubernetes service URL in the CLI instead of opening it in the default browser`,
			}, {
				Name:        []string{"--wait"},
				Description: `Amount of time to wait for a service in seconds`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"list"},
				Description: `Lists the URLs for the services in your local cluster`,
				Options: []model.Option{{
					Name:        []string{"--namespace", "-n"},
					Description: `The services namespace`,
				}},
			}},
		}, {
			Name:        []string{"tunnel"},
			Description: `Connect to LoadBalancer services`,
			Options: []model.Option{{
				Name:        []string{"--cleanup", "-c"},
				Description: `Call with cleanup=true to remove old tunnels`,
			}},
		}, {
			Name:        []string{"mount"},
			Description: `Mounts the specified directory into minikube`,
			Options: []model.Option{{
				Name:        []string{"--9p-version"},
				Description: `Specify the 9p version that the mount should use`,
			}, {
				Name:        []string{"--gid"},
				Description: `Default group id used for the mount`,
			}, {
				Name:        []string{"--ip"},
				Description: `Specify the ip that the mount should be setup on`,
			}, {
				Name:        []string{"--kill"},
				Description: `Kill the mount process spawned by minikube start`,
			}, {
				Name:        []string{"--mode"},
				Description: `File permissions used for the mount`,
			}, {
				Name:        []string{"--msize"},
				Description: `The number of bytes to use for 9p packet payload`,
			}, {
				Name:        []string{"--options"},
				Description: `Additional mount options, such as cache=fscache`,
			}, {
				Name:        []string{"--port"},
				Description: `Specify the port that the mount should be setup on`,
			}, {
				Name:        []string{"--type"},
				Description: `Specify the mount filesystem type (supported types: 9p)`,
			}, {
				Name:        []string{"--uid"},
				Description: `Default user id used for the mount`,
			}},
		}, {
			Name:        []string{"ssh"},
			Description: `Log into the minikube environment (for debugging)`,
			Options: []model.Option{{
				Name:        []string{"--native-ssh"},
				Description: `Use native Golang SSH client`,
			}, {
				Name:        []string{"--node", "-n"},
				Description: `The node to ssh into`,
			}},
		}, {
			Name:        []string{"kubectl"},
			Description: `Run a kubectl binary matching the cluster version`,
			Options: []model.Option{{
				Name:        []string{"--ssh"},
				Description: `Use SSH for running kubernetes client on the node`,
			}},
		}, {
			Name:        []string{"node"},
			Description: `Add, remove, or list additional nodes`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"add"},
				Description: `Adds a node to the given cluster`,
			}, {
				Name:        []string{"delete"},
				Description: `Deletes a node from a cluster`,
			}, {
				Name:        []string{"list"},
				Description: `List nodes`,
			}, {
				Name:        []string{"start"},
				Description: `Starts a node`,
			}, {
				Name:        []string{"stop"},
				Description: `Stops a node in a cluster`,
			}},
		}, {
			Name:        []string{"cp"},
			Description: `Copy the specified file into minikube`,
			Args: []model.Arg{{
				Name: "[source] [target]",
			}},
		}, {
			Name:        []string{"ssh-key"},
			Description: `Retrieve the ssh identity key path of the specified node`,
			Options: []model.Option{{
				Name:        []string{"--node", "-n"},
				Description: `The node to get ssh-key path`,
			}},
		}, {
			Name:        []string{"ssh-host"},
			Description: `Retrieve the ssh host key of the specified node`,
			Options: []model.Option{{
				Name:        []string{"--append-known"},
				Description: `Add host key to SSH known_hosts file`,
			}, {
				Name:        []string{"--node", "-n"},
				Description: `The node to ssh into`,
			}},
		}, {
			Name:        []string{"ip"},
			Description: `Retrieves the IP address of the specified node`,
			Options: []model.Option{{
				Name:        []string{"--node", "-n"},
				Description: `The node to get IP`,
			}},
		}, {
			Name:        []string{"logs"},
			Description: `Returns logs to debug a local Kubernetes cluster`,
			Options: []model.Option{{
				Name:        []string{"--file"},
				Description: `If present, writes to the provided file instead of stdout`,
			}, {
				Name:        []string{"--follow", "-f"},
				Description: `Show only the most recent journal entries`,
			}, {
				Name:        []string{"--length", "-n"},
				Description: `Number of lines back to go within the log`,
			}, {
				Name:        []string{"--node"},
				Description: `The node to get logs from. Defaults to the primary control plane`,
			}, {
				Name:        []string{"--problems"},
				Description: `Show only log entries which point to known problems`,
			}},
		}, {
			Name:        []string{"update-check"},
			Description: `Print current and latest version number`,
		}, {
			Name:        []string{"version"},
			Description: `Print the version of minikube`,
			Options: []model.Option{{
				Name:        []string{"--components"},
				Description: `List versions of all components included with minikube`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Format to print stdout in`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`text`}}},
				}},
			}, {
				Name:        []string{"--short"},
				Description: `Print just the version number`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				}},
			}},
		}, {
			Name:        []string{"options"},
			Description: `Add, remove, or list additional nodes`,
		}, {
			Name:        []string{"completion"},
			Description: `Generate command completion for a shell`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"bash"},
				Description: `Bash completion`,
			}, {
				Name:        []string{"fish"},
				Description: `Fish completion`,
			}, {
				Name:        []string{"zsh"},
				Description: `Zsh completion`,
			}},
		}},
	}
}
