// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["cliff-jumper"] = model.Subcommand{
		Name:        []string{"cliff-jumper"},
		Description: `A small CLI tool to create a semantic release and git-cliff powered Changelog`,
		Options: []model.Option{{
			Name:         []string{"--help", "-h"},
			Description:  `Display help for command`,
			IsPersistent: true,
		}, {
			Name:        []string{"--name", "-n"},
			Description: `The package name to release`,
			Args: []model.Arg{{
				Name: "name",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--package-path", "-p"},
			Description: `The path to the current package. For non-monorepos this is just "."`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "path",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--dry-run"},
			Description: `Whether the package should be bumped or not. When this is set no actions will be taken and only the release strategy will be logged`,
		}, {
			Name:        []string{"--first-release"},
			Description: `Whether this is the first release (skips bumping the version)'`,
		}, {
			Name: []string{"--mono-repo"},
			Description: `Whether the package to be bumped resides in a mono repo,
which enables Lerna-like scanning for what kind of version bump should be applied
Defaults to "true" when "org" is set, false otherwise`,
		}, {
			Name: []string{"--no-mono-repo"},
			Description: `Whether the package to be bumped resides in a mono repo,
which enables Lerna-like scanning for what kind of version bump should be applied
Defaults to "true" when "org" is set, false otherwise`,
		}, {
			Name:        []string{"--org", "-o"},
			Description: `The NPM org scope that should be used. This should be WITHOUT "@" sign or trailing "/"`,
			Args: []model.Arg{{
				Name: "organisation",
			}},
		}, {
			Name:        []string{"--preid"},
			Description: `The "prerelease identifier" to use as a prefix for the "prerelease" part of a semver`,
			Args: []model.Arg{{
				Name: "id",
			}},
		}, {
			Name: []string{"--commit-message-template", "-c"},
			Description: `A custom commit message template to use.
Defaults to "chore({{name}}): release {{full-name}}@{{new-version}}"
You can use "{{new-version}}" in your template which will be dynamically replaced with whatever the new version is that will be published.
You can use "{{name}}" in your template, this will be replaced with the name provided through "-n", "--name" or the same value set in your config file.
You can use "{{full-name}}" in your template, this will be replaced "{{name}}" (when "org" is not provided), or "@{{org}}/{{name}}" (when "org" is provided).`,
			Args: []model.Arg{{
				Name: "template",
			}},
		}, {
			Name: []string{"--tag-template"},
			Description: `A custom tag template to use.
When "org" is provided this will default to "@{{org}}/{{name}}@{{new-version}}", for example "@favware/cliff-jumper@1.0.0"
When "org" is not provided this will default to "v{{new-version}}", for example "v1.0.0"
You can use "{{new-version}}" in your template which will be dynamically replaced with whatever the new version is that will be published.
You can use "{{org}}" in your template, this will be replaced with the org provided through "-o", "--org" or the same value set in your config file.
You can use "{{name}}" in your template, this will be replaced with the name provided through "-n", "--name" or the same value set in your config file.
You can use "{{full-name}}" in your template, this will be replaced "{{name}}" (when "org" is not provided), or "@{{org}}/{{name}}" (when "org" is provided).`,
			Args: []model.Arg{{
				Name: "template",
			}},
		}, {
			Name:        []string{"--install", "-i"},
			Description: `Whether to run npm install (or your package manager's equivalent) after bumping the version but before committing and creating a git tag. This is useful when you have a mono repo where bumping one package would then cause the lockfile to be out of date`,
		}, {
			Name: []string{"--skip-changelog"},
			Description: `Whether to skip updating your CHANGELOG.md
default "true" when CI=true, "false" otherwise`,
		}, {
			Name: []string{"--no-skip-changelog"},
			Description: `Whether to skip updating your CHANGELOG.md
default "true" when CI=true, "false" otherwise`,
		}, {
			Name: []string{"--skip-tag", "-t"},
			Description: `Whether to skip creating a git tag
default "true" when CI=true, "false" otherwise`,
		}, {
			Name: []string{"--no-skip-tag"},
			Description: `Whether to skip creating a git tag
default "true" when CI=true, "false" otherwise`,
		}, {
			Name:        []string{"--verbose", "-v"},
			Description: `Whether to print verbose information`,
		}, {
			Name:        []string{"--version", "-V"},
			Description: `Output the version number`,
		}},
	}
}
