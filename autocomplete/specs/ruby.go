// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["ruby"] = model.Subcommand{
		Name:        []string{"ruby"},
		Description: `Interpreted object-oriented scripting language`,
		Options: []model.Option{{
			Name:        []string{"--copyright"},
			Description: `Prints the copyright notice`,
		}, {
			Name:        []string{"--version"},
			Description: `Prints the version of Ruby interpreter`,
		}, {
			Name:        []string{"-0"},
			Description: `Specifies the input record separator ($/) as an octal number`,
			Args: []model.Arg{{
				Name: "octal",
			}},
		}, {
			Name:        []string{"-C"},
			Description: `Causes Ruby to switch to the directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "directory",
			}},
		}, {
			Name:        []string{"-F"},
			Description: `Specifies input field separator ($;)`,
			Args: []model.Arg{{
				Name: "pattern",
			}},
		}, {
			Name:        []string{"-I"},
			Description: `Used to tell Ruby where to load the library scripts. Directory path will be added to the load-path variable ($:)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "directory",
			}},
		}, {
			Name:        []string{"-K"},
			Description: `Specifies KANJI (Japanese) encoding`,
			Args: []model.Arg{{
				Name: "kcode",
			}},
		}, {
			Name:        []string{"-S"},
			Description: `Makes Ruby use the PATH environment variable to search for script, unless its name begins with a slash. This is used to emulate #! on machines that don't support it, in the following manner: #! /usr/local/bin/ruby # This line makes the next one a comment in Ruby \ exec /usr/local/bin/ruby -S $0 $*`,
		}, {
			Name:        []string{"-T"},
			Description: `Turns on taint checks at the specified level (default 1)`,
			Args: []model.Arg{{
				Name: "level",
			}},
		}, {
			Name:        []string{"-a"},
			Description: `Turns on auto-split mode when used with -n or -p`,
		}, {
			Name:        []string{"-c"},
			Description: `Causes Ruby to check the syntax of the script and exit without executing. If there are no syntax errors, Ruby will print “Syntax OK” to the standard output`,
		}, {
			Name:        []string{"-d", "--debug"},
			Description: `Turns on debug mode. $DEBUG will be set to true`,
		}, {
			Name:        []string{"-e"},
			Description: `Specifies script from command-line while telling Ruby not to search the rest of arguments for a script file name`,
			Args: []model.Arg{{
				Name: "command",
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Prints a summary of the options`,
		}, {
			Name:        []string{"-i"},
			Description: `Specifies in-place-edit mode. The extension, if specified, is added to old file name to make a backup copy`,
			Args: []model.Arg{{
				Name:       "extension",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"-l"},
			Description: `Enables automatic line-ending processing, which means to firstly set $\ to the value of $/, and secondly chops every line read using chop!`,
		}, {
			Name:        []string{"-n"},
			Description: `Causes Ruby to assume the following loop around your script`,
		}, {
			Name:        []string{"-p"},
			Description: `Acts mostly same as -n switch, but print the value of variable $_ at the each end of the loop`,
		}, {
			Name:        []string{"-r"},
			Description: `Causes Ruby to load the library using require`,
			Args: []model.Arg{{
				Name: "library",
			}},
		}, {
			Name:        []string{"-s"},
			Description: `Enables some switch parsing for switches after script name but before any file name arguments (or before a --)`,
		}, {
			Name:        []string{"-v", "--verbose"},
			Description: `Enables verbose mode`,
		}, {
			Name:        []string{"-w"},
			Description: `Enables verbose mode without printing version message at the beginning. It sets the $VERBOSE variable to true`,
		}, {
			Name:        []string{"-x"},
			Description: `Tells Ruby that the script is embedded in a message. Leading garbage will be discarded until the first that starts with “#!” and contains the string, “ruby”. Any meaningful switches on that line will applied. The end of script must be specified with either EOF, ^D (control-D), ^Z (control-Z), or reserved word __END__. If the directory name is specified, Ruby will switch to that directory before executing script`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "directory",
			}},
		}, {
			Name:        []string{"-y", "--yydebug"},
			Description: `Turns on compiler debug mode. Ruby will print a bunch of internal state messages during compiling scripts. You don't have to specify this switch, unless you are going to debug the Ruby interpreter`,
		}},
	}
}
