// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["prettier"] = model.Subcommand{
		Name:        []string{"prettier"},
		Description: `Run Prettier from the command line`,
		Args: []model.Arg{{
			Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
			Name:       "file, dir or glob",
			IsOptional: true,
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-c", "--check"},
			Description: `Check if your files are formatted`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "file, dir, or glob",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-l", "--list-different"},
			Description: `Print the names of files that are different from Prettier's formatting`,
		}, {
			Name:        []string{"-w", "--write"},
			Description: `Edit files in-place`,
		}, {
			Name:        []string{"--arrow-parens"},
			Description: `Include parentheses around a sole arrow function parameter`,
			Args: []model.Arg{{
				Name:        "mode",
				Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`avoid`}}},
			}},
		}, {
			Name:        []string{"--no-bracket-spacing"},
			Description: `Do not print spaces between brackets`,
		}, {
			Name:        []string{"--embedded-language-formatting"},
			Description: `Control how Prettier formats quoted code embedded in the file`,
			Args: []model.Arg{{
				Name:        "mode",
				Suggestions: []model.Suggestion{{Name: []string{`auto`}}, {Name: []string{`off`}}},
			}},
		}, {
			Name:        []string{"--end-of-line"},
			Description: `Which end of line characters to apply`,
			Args: []model.Arg{{
				Name:        "choice",
				Suggestions: []model.Suggestion{{Name: []string{`lf`}}, {Name: []string{`crlf`}}, {Name: []string{`cr`}}, {Name: []string{`auto`}}},
			}},
		}, {
			Name:        []string{"--html-whitespace-sensitivity"},
			Description: `How to handle whitespaces in HTML`,
			Args: []model.Arg{{
				Name:        "choice",
				Suggestions: []model.Suggestion{{Name: []string{`css`}}, {Name: []string{`strict`}}, {Name: []string{`ignore`}}},
			}},
		}, {
			Name:        []string{"--jsx-bracket-same-line"},
			Description: `Put > on the last line instead of at a new line`,
		}, {
			Name:        []string{"--jsx-single-quote"},
			Description: `Use single quotes in JSX`,
		}, {
			Name:        []string{"--parser"},
			Description: `Which parser to use`,
			Args: []model.Arg{{
				Name:        "parser",
				Suggestions: []model.Suggestion{{Name: []string{`flow`}}, {Name: []string{`babel`}}, {Name: []string{`babel-flow`}}, {Name: []string{`babel-ts`}}, {Name: []string{`typescript`}}, {Name: []string{`espree`}}, {Name: []string{`meriyah`}}, {Name: []string{`css`}}, {Name: []string{`less`}}, {Name: []string{`scss`}}, {Name: []string{`json`}}, {Name: []string{`json5`}}, {Name: []string{`json-stringify`}}, {Name: []string{`graphql`}}, {Name: []string{`markdown`}}, {Name: []string{`mdx`}}, {Name: []string{`vue`}}, {Name: []string{`yaml`}}, {Name: []string{`html`}}, {Name: []string{`angular`}}, {Name: []string{`lwc`}}},
			}},
		}, {
			Name:        []string{"--print-width"},
			Description: `The line length where Prettier will try wrap`,
			Args: []model.Arg{{
				Name: "int",
			}},
		}, {
			Name:        []string{"--prose-wrap"},
			Description: `How to wrap prose`,
			Args: []model.Arg{{
				Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`preserve`}}},
			}},
		}, {
			Name:        []string{"--quote-props"},
			Description: `Change when properties in objects are quoted`,
			Args: []model.Arg{{
				Name:        "when",
				Suggestions: []model.Suggestion{{Name: []string{`as-needed`}}, {Name: []string{`consistent`}}, {Name: []string{`preserve`}}},
			}},
		}, {
			Name:        []string{"--no-semi"},
			Description: `Do not print semicolons, except at the beginning of lines which may need them`,
		}, {
			Name:        []string{"--single-quote"},
			Description: `Use single quotes instead of double quotes`,
		}, {
			Name:        []string{"--tab-width"},
			Description: `Number of spaces per indentation level`,
			Args: []model.Arg{{
				Name: "int",
			}},
		}, {
			Name:        []string{"--trailing-comma"},
			Description: `Print trailing commas wherever possible when multi-line`,
			Args: []model.Arg{{
				Name:        "type",
				Suggestions: []model.Suggestion{{Name: []string{`es5`}}, {Name: []string{`none`}}, {Name: []string{`all`}}},
			}},
		}, {
			Name:        []string{"--use-tabs"},
			Description: `Indent with tabs instead of spaces`,
		}, {
			Name:        []string{"--vue-indent-script-and-style"},
			Description: `Indent script and style tags in Vue files`,
		}, {
			Name:        []string{"--config"},
			Description: `Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
			ExclusiveOn: []string{"--no-config"},
		}, {
			Name:        []string{"--no-config"},
			Description: `Do not look for a configuration file`,
			ExclusiveOn: []string{"--config"},
		}, {
			Name:        []string{"--config-precedence"},
			Description: `Define in which order config files and CLI options should be evaluated`,
			Args: []model.Arg{{
				Name:        "precedence",
				Suggestions: []model.Suggestion{{Name: []string{`cli-override`}}, {Name: []string{`file-override`}}, {Name: []string{`prefer-file`}}},
			}},
		}, {
			Name:        []string{"--no-editorconfig"},
			Description: `Don't take .editorconfig into account when parsing configuration`,
		}, {
			Name:        []string{"--find-config-path"},
			Description: `Finds a path to the configuration file for the given input file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--ignore-path"},
			Description: `Path to a file with patterns describing files to ignore`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--plugin"},
			Description: `Add a plugin`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--plugin-search-dir"},
			Description: `Custom directory that contains prettier plugins in node_modules subdirectory`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "path",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--with-node-modules"},
			Description: `Process files inside 'node_modules' directory`,
		}, {
			Name:        []string{"--cursor-offset"},
			Description: `Print (to stderr) where a cursor at the given position would move to after formatting`,
			Args: []model.Arg{{
				Name: "int",
			}},
			ExclusiveOn: []string{"--range-start", "--range-end"},
		}, {
			Name:        []string{"--range-end"},
			Description: `Format code ending at a given character offset (exclusive)`,
			Args: []model.Arg{{
				Name: "int",
			}},
			ExclusiveOn: []string{"--cursor-offset"},
		}, {
			Name:        []string{"--range-start"},
			Description: `Format code starting at a given character offset`,
			Args: []model.Arg{{
				Name: "int",
			}},
		}, {
			Name:        []string{"--no-color"},
			Description: `Do not colorize error messages`,
		}, {
			Name:        []string{"--file-info"},
			Description: `Extract the following info (as JSON) for a given file path`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Show CLI usage, or details about the given flag`,
			Args: []model.Arg{{
				Name:       "flag",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"-u", "--ignore-unknown"},
			Description: `Ignore unknown files`,
		}, {
			Name:        []string{"--insert-pragma"},
			Description: `Insert @format pragma into file's first docblock comment`,
		}, {
			Name:        []string{"--loglevel"},
			Description: `What level of logs to report`,
			Args: []model.Arg{{
				Name:        "level",
				Suggestions: []model.Suggestion{{Name: []string{`silent`}}, {Name: []string{`error`}}, {Name: []string{`warn`}}, {Name: []string{`log`}}, {Name: []string{`debug`}}},
			}},
		}, {
			Name:        []string{"--require-pragma"},
			Description: `Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted`,
		}, {
			Name:        []string{"--stdin-filepath"},
			Description: `Path to the file to pretend that stdin comes from`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--support-info"},
			Description: `Print support information as JSON`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Print Prettier version`,
		}, {
			Name:        []string{"--debug-check"},
			Description: `This will cause Prettier to print an error message if it detects that code correctness might have changed`,
		}, {
			Name:        []string{"--no-error-on-unmatched-pattern"},
			Description: `Prevent errors when pattern is unmatched`,
		}},
	}
}
