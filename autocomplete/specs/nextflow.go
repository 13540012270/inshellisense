// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["nextflow"] = model.Subcommand{
		Name:        []string{"nextflow"},
		Description: `Nextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of pipelines written in the most common scripting languages`,
		Options: []model.Option{{
			Name:        []string{"-C"},
			Description: `Use the specified configuration file(s) overriding any defaults`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "configuration file",
			}},
		}, {
			Name:        []string{"-D"},
			Description: `Set JVM properties`,
			Args: []model.Arg{{
				Name: "custom Java system property",
			}},
		}, {
			Name:        []string{"-bg"},
			Description: `Execute nextflow in background`,
		}, {
			Name:        []string{"-c", "-config"},
			Description: `Add the specified file to configuration set`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "configuration file",
			}},
		}, {
			Name:        []string{"-d", "-dockerize"},
			Description: `Launch nextflow via Docker (experimental)`,
		}, {
			Name:        []string{"-h"},
			Description: `Print this help`,
		}, {
			Name:        []string{"-log"},
			Description: `Set nextflow log file path`,
		}, {
			Name:        []string{"-q", "-quiet"},
			Description: `Do not print information messages`,
		}, {
			Name:        []string{"-syslog"},
			Description: `Send logs to syslog server (eg. localhost:514)`,
		}, {
			Name:        []string{"-v", "-version"},
			Description: `Print the program version`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"clean"},
			Description: `Clean up project cache and work directories (Default: last run)`,
			Args: []model.Arg{{
				Name:      "run_name|session_id",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-after"},
				Description: `Clean up runs executed after the specified one`,
				Args: []model.Arg{{
					Name:      "run name",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"-before"},
				Description: `Clean up runs executed before the specified one`,
				Args: []model.Arg{{
					Name:      "run name",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"-but"},
				Description: `Clean up all runs except the specified one`,
				Args: []model.Arg{{
					Name:      "run name",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"-n", "-dry-run"},
				Description: `Print names of file to be removed without deleting them (Default: false)`,
			}, {
				Name:        []string{"-f", "-force"},
				Description: `Force clean command (Default: false)`,
			}, {
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-k", "-keep-logs"},
				Description: `Removes only temporary files but retains execution log entries and metadata (Default: false)`,
			}, {
				Name:        []string{"-q", "-quiet"},
				Description: `Do not print names of files removed (Default: false)`,
			}},
		}, {
			Name:        []string{"clone"},
			Description: `Clone a project into a folder`,
			Args: []model.Arg{{
				Name: "namespace/repository_name",
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-hub"},
				Description: `Service hub where the project is hosted (Default: GitHub)`,
				Args: []model.Arg{{
					Name: "gitlab|github|bitbucket",
				}},
			}, {
				Name:        []string{"-r"},
				Description: `Revision to clone - It can be a git branch, tag or revision number`,
				Args: []model.Arg{{
					Name: "revision",
				}},
			}, {
				Name:        []string{"-user"},
				Description: `Private repository user name`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}},
		}, {
			Name:        []string{"config"},
			Description: `Print a project configuration`,
			Args: []model.Arg{{
				Name:      "project name",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-flat"},
				Description: `Print config using flat notation (Default: false)`,
			}, {
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-profile"},
				Description: `Choose a configuration profile`,
			}, {
				Name:        []string{"-properties"},
				Description: `Prints config using Java properties notatio (Default: false)`,
			}, {
				Name:        []string{"-a", "-show-profiles"},
				Description: `Show all configuration profiles`,
			}, {
				Name:        []string{"-sort"},
				Description: `Sort config attributes (Default: false)`,
			}},
		}, {
			Name:        []string{"console"},
			Description: `Launch Nextflow interactive console`,
			Options: []model.Option{{
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}},
		}, {
			Name:        []string{"drop"},
			Description: `Delete the local copy of a project`,
			Args: []model.Arg{{
				Name:      "name of the project to drop",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-f"},
				Description: `Delete the repository without taking care of local changes (Default: false)`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Print the usage help for a command`,
			Options: []model.Option{{
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}},
		}, {
			Name:        []string{"info"},
			Description: `Print project and system runtime information`,
			Args: []model.Arg{{
				Name:      "project name",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-u", "-check-updates"},
				Description: `Check for remote updates (Default: false)`,
			}, {
				Name:        []string{"-d"},
				Description: `Show detailed information (Default: false)`,
			}, {
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-o"},
				Description: `Output format, either: text (default), json, yaml`,
			}},
		}, {
			Name:        []string{"kuberun"},
			Description: `Execute a workflow in a Kubernetes cluster (experimental)`,
			Args: []model.Arg{{
				Name:      "project name",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-E"},
				Description: `Exports all current system environment (Default: false)`,
			}, {
				Name:        []string{"-ansi-log"},
				Description: `Enable/disable ANSI console logging`,
			}, {
				Name:        []string{"-bucket-dir"},
				Description: `Remote bucket where intermediate result files are stored`,
				Args: []model.Arg{{
					Name: "remote bucket",
				}},
			}, {
				Name:        []string{"-cache"},
				Description: `Enable/disable processes caching`,
			}, {
				Name:        []string{"-disable-jobs-cancellation"},
				Description: `Prevent the cancellation of child jobs on execution termination`,
			}, {
				Name:        []string{"-dsl1"},
				Description: `Execute the workflow using DSL1 syntax (Default: false)`,
			}, {
				Name:        []string{"-dsl2"},
				Description: `Execute the workflow using DSL2 syntax (Default: false)`,
			}, {
				Name:        []string{"-dump-channels"},
				Description: `Dump channels for debugging purpose`,
			}, {
				Name:        []string{"-dump-hashes"},
				Description: `Dump task hash keys for debugging purpose (Default: false)`,
			}, {
				Name:        []string{"-e"},
				Description: `Add the specified variable to execution environment. Syntax: -e.key=value (Default: {})`,
				Args: []model.Arg{{
					Name: "key=value",
				}},
			}, {
				Name:        []string{"-entry"},
				Description: `Entry workflow name to be executed`,
				Args: []model.Arg{{
					Name: "entry workflow name",
				}},
			}, {
				Name:        []string{"-head-cpus"},
				Description: `Specify number of CPUs requested for the Nextflow pod (Default: 0)`,
			}, {
				Name:        []string{"-head-memory"},
				Description: `Specify amount of memory requested for the Nextflow pod`,
			}, {
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-hub"},
				Description: `Service hub where the project is hosted (Default: github)`,
				Args: []model.Arg{{
					Name: "service hub",
				}},
			}, {
				Name:        []string{"-latest"},
				Description: `Pull latest changes before run (Default: false)`,
			}, {
				Name:        []string{"-lib"},
				Description: `Library extension path`,
				Args: []model.Arg{{
					Name: "library extension path",
				}},
			}, {
				Name:        []string{"-main-script"},
				Description: `The script file to be executed when launching a project directory or repository`,
				Args: []model.Arg{{
					Name: "script file",
				}},
			}, {
				Name:        []string{"-name"},
				Description: `Assign a mnemonic name to the a pipeline run`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-n", "-namespace"},
				Description: `Specify the K8s namespace to use`,
			}, {
				Name:        []string{"-offline"},
				Description: `Do not check for remote project updates (Default: false)`,
			}, {
				Name:        []string{"-params-file"},
				Description: `Load script parameters from a JSON/YAML file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "JSON/YAML file",
				}},
			}, {
				Name:        []string{"-plugins"},
				Description: `Specify the plugins to be applied for this run e.g. nf-amazon,nf-tower`,
				Args: []model.Arg{{
					Name: "plugins ids separated by comma",
				}},
			}, {
				Name:        []string{"-pod-image"},
				Description: `Specify the container image for the Nextflow pod`,
			}, {
				Name:        []string{"-process"},
				Description: `Set process options. Syntax: -process.key=value (Default: {}`,
				Args: []model.Arg{{
					Name: "key=value",
				}},
			}, {
				Name:        []string{"-profile"},
				Description: `Choose a configuration profile`,
				Args: []model.Arg{{
					Name: "profile",
				}},
			}, {
				Name:        []string{"-qs", "-queue-size"},
				Description: `Max number of processes that can be executed in parallel by each executor`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"-remoteProfile"},
				Description: `Choose a configuration profile in the remoteConfig`,
			}, {
				Name:        []string{"-resume"},
				Description: `Execute the script using the cached results, useful to continue executions that was stopped by an error`,
			}, {
				Name:        []string{"-r", "-revision"},
				Description: `Revision of the project to run (either a git branch, tag or commit SHA number)`,
				Args: []model.Arg{{
					Name: "project revision (tag/branch/hash",
				}},
			}, {
				Name:        []string{"-stub-run", "-stub"},
				Description: `Execute the workflow replacing process scripts with command stubs (Default: false)`,
			}, {
				Name:        []string{"-test"},
				Description: `Test a script function with the name specified`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-user"},
				Description: `Private repository user name`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"-v", "-volume-mount"},
				Description: `Volume claim mounts eg. my-pvc:/mnt/path`,
			}, {
				Name:        []string{"-with-charliecloud"},
				Description: `Enable process execution in a Charliecloud container runtime`,
			}, {
				Name:        []string{"-with-conda"},
				Description: `Use the specified Conda environment package or file (must end with .yml|.yaml suffix)`,
				Args: []model.Arg{{
					Name: "conda .yml/.yaml file",
				}},
			}, {
				Name:        []string{"-with-dag"},
				Description: `Create pipeline DAG file`,
				Args: []model.Arg{{
					Name: "filename, e.g. dag.dot",
				}},
			}, {
				Name:        []string{"-with-docker"},
				Description: `Enable process execution in a Docker container`,
				Args: []model.Arg{{
					Name:       "a docker container image",
					Generator:  nil, // TODO: port over generator
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-N", "-with-notification"},
				Description: `Send a notification email on workflow completion to the specified recipients`,
				Args: []model.Arg{{
					Name: "email",
				}},
			}, {
				Name:        []string{"-with-podman"},
				Description: `Enable process execution in a Podman container`,
			}, {
				Name:        []string{"-with-report"},
				Description: `Create processes execution html report`,
				Args: []model.Arg{{
					Name: "report filename e.g. report.html",
				}},
			}, {
				Name:        []string{"-with-singularity"},
				Description: `Enable process execution in a Singularity container`,
			}, {
				Name:        []string{"-with-timeline"},
				Description: `Create processes execution timeline file`,
				Args: []model.Arg{{
					Name: "timeline filename e.g. timeline.html",
				}},
			}, {
				Name:        []string{"-with-tower"},
				Description: `Monitor workflow execution with Seqera Tower service`,
			}, {
				Name:        []string{"-with-trace"},
				Description: `Create processes execution tracing file`,
				Args: []model.Arg{{
					Name: "trace text filename e.g. trace.txt",
				}},
			}, {
				Name:        []string{"-with-weblog"},
				Description: `Send workflow status messages via HTTP to target URL`,
				Args: []model.Arg{{
					Name: "target web URL",
				}},
			}, {
				Name:        []string{"-without-docker"},
				Description: `Disable process execution with Docker (Default: false)`,
			}, {
				Name:        []string{"-without-podman"},
				Description: `Disable process execution in a Podman container`,
			}, {
				Name:        []string{"-w", "-work-dir"},
				Description: `Directory where intermediate result files are stored`,
				Args: []model.Arg{{
					Name: "work dir",
				}},
			}},
		}, {
			Name:        []string{"list"},
			Description: `List all downloaded projects`,
			Options: []model.Option{{
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}},
		}, {
			Name:        []string{"log"},
			Description: `Print executions log and runtime info`,
			Args: []model.Arg{{
				Name:      "run name",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-after"},
				Description: `Show log entries for runs executed after the specified one`,
				Args: []model.Arg{{
					Name:      "run name",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"-before"},
				Description: `Show log entries for runs executed before the specified one`,
				Args: []model.Arg{{
					Name:      "run name",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"-but"},
				Description: `Show log entries of all runs except the specified one`,
				Args: []model.Arg{{
					Name:      "run name",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"-f", "-fields"},
				Description: `Comma separated list of fields to include in the printed log -- Use the "-l" option to show the list of available fields`,
				Args: []model.Arg{{
					Name: "field1,field2,...",
				}},
			}, {
				Name:        []string{"-F", "filter"},
				Description: `Filter log entries by a custom expression e.g. process =~ /foo.*/ && status == 'COMPLETED'`,
				Args: []model.Arg{{
					Name: "expression",
				}},
			}, {
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-l", "-list-fields"},
				Description: `Show all available fields (Default: false)`,
			}, {
				Name:        []string{"-q", "-quiet"},
				Description: `Show only run names (Default: false)`,
			}, {
				Name:        []string{"-s"},
				Description: `Character used to separate column values (Default: )`,
				Args: []model.Arg{{
					Name: "character",
				}},
			}, {
				Name:        []string{"-t", "-template"},
				Description: `Text template used to each record in the log`,
				Args: []model.Arg{{
					Name: "template",
				}},
			}},
		}, {
			Name:        []string{"pull"},
			Description: `Download or update a project`,
			Args: []model.Arg{{
				Name:      "project name or repository url to pull",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-all"},
				Description: `Update all downloaded projects (Default: false)`,
			}, {
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-hub"},
				Description: `Service hub where the project is hosted`,
			}, {
				Name:        []string{"-r", "-revision"},
				Description: `Revision of the project to run (either a git branch, tag or commit SHA number)`,
			}, {
				Name:        []string{"-user"},
				Description: `Private repository user name`,
			}},
		}, {
			Name:        []string{"run"},
			Description: `Execute a pipeline project`,
			Args: []model.Arg{{
				Name:      "project name, repository url, or local path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-E"},
				Description: `Exports all current system environment (Default: false)`,
			}, {
				Name:        []string{"-ansi-log"},
				Description: `Enable/disable ANSI console logging`,
			}, {
				Name:        []string{"-bucket-dir"},
				Description: `Remote bucket where intermediate result files are stored`,
				Args: []model.Arg{{
					Name: "remote bucket",
				}},
			}, {
				Name:        []string{"-cache"},
				Description: `Enable/disable processes caching`,
			}, {
				Name:        []string{"-disable-jobs-cancellation"},
				Description: `Prevent the cancellation of child jobs on execution termination`,
			}, {
				Name:        []string{"-dsl1"},
				Description: `Execute the workflow using DSL1 syntax (Default: false)`,
			}, {
				Name:        []string{"-dsl2"},
				Description: `Execute the workflow using DSL2 syntax (Default: false)`,
			}, {
				Name:        []string{"-dump-channels"},
				Description: `Dump channels for debugging purpose`,
			}, {
				Name:        []string{"-dump-hashes"},
				Description: `Dump task hash keys for debugging purpose (Default: false)`,
			}, {
				Name:        []string{"-e."},
				Description: `Add the specified variable to execution environment. Syntax: -e.key=value (Default: {})`,
				Args: []model.Arg{{
					Name: "key=value",
				}},
			}, {
				Name:        []string{"-entry"},
				Description: `Entry workflow name to be executed`,
				Args: []model.Arg{{
					Name: "entry workflow name",
				}},
			}, {
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-hub"},
				Description: `Service hub where the project is hosted (Default: github)`,
				Args: []model.Arg{{
					Name: "service hub",
				}},
			}, {
				Name:        []string{"-latest"},
				Description: `Pull latest changes before run (Default: false)`,
			}, {
				Name:        []string{"-lib"},
				Description: `Library extension path`,
				Args: []model.Arg{{
					Name: "library extension path",
				}},
			}, {
				Name:        []string{"-main-script"},
				Description: `The script file to be executed when launching a project directory or repository`,
				Args: []model.Arg{{
					Name: "script file",
				}},
			}, {
				Name:        []string{"-name"},
				Description: `Assign a mnemonic name to the a pipeline run`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-offline"},
				Description: `Do not check for remote project updates (Default: false)`,
			}, {
				Name:        []string{"-params-file"},
				Description: `Load script parameters from a JSON/YAML file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "JSON/YAML file",
				}},
			}, {
				Name:        []string{"-plugins"},
				Description: `Specify the plugins to be applied for this run e.g. nf-amazon,nf-tower`,
				Args: []model.Arg{{
					Name: "plugins ids separated by comma",
				}},
			}, {
				Name:        []string{"-process."},
				Description: `Set process options. Syntax: -process.key=value (Default: {}`,
				Args: []model.Arg{{
					Name: "key=value",
				}},
			}, {
				Name:        []string{"-profile"},
				Description: `Choose a configuration profile`,
				Args: []model.Arg{{
					Name: "profile",
				}},
			}, {
				Name:        []string{"-qs", "-queue-size"},
				Description: `Max number of processes that can be executed in parallel by each executor`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"-resume"},
				Description: `Execute the script using the cached results, useful to continue executions that was stopped by an error`,
				Args: []model.Arg{{
					Name:       "session ID",
					Generator:  nil, // TODO: port over generator
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-r", "-revision"},
				Description: `Revision of the project to run (either a git branch, tag or commit SHA number)`,
				Args: []model.Arg{{
					Name: "project revision (tag/branch/hash",
				}},
			}, {
				Name:        []string{"-stub-ru", "-stub"},
				Description: `Execute the workflow replacing process scripts with command stubs (Default: false)`,
			}, {
				Name:        []string{"-test"},
				Description: `Test a script function with the name specified`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-user"},
				Description: `Private repository user name`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"-with-charliecloud"},
				Description: `Enable process execution in a Charliecloud container runtime`,
			}, {
				Name:        []string{"-with-conda"},
				Description: `Use the specified Conda environment package or file (must end with .yml|.yaml suffix)`,
				Args: []model.Arg{{
					Name: "conda .yml/.yaml file",
				}},
			}, {
				Name:        []string{"-with-dag"},
				Description: `Create pipeline DAG file`,
				Args: []model.Arg{{
					Name: "filename, e.g. dag.dot",
				}},
			}, {
				Name:        []string{"-with-docker"},
				Description: `Enable process execution in a Docker container`,
				Args: []model.Arg{{
					Name:       "a docker container image",
					Generator:  nil, // TODO: port over generator
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-N", "-with-notification"},
				Description: `Send a notification email on workflow completion to the specified recipients`,
				Args: []model.Arg{{
					Name: "email",
				}},
			}, {
				Name:        []string{"-with-podman"},
				Description: `Enable process execution in a Podman container`,
			}, {
				Name:        []string{"-with-report"},
				Description: `Create processes execution html report`,
				Args: []model.Arg{{
					Name: "report filename e.g. report.html",
				}},
			}, {
				Name:        []string{"-with-singularity"},
				Description: `Enable process execution in a Singularity container`,
			}, {
				Name:        []string{"-with-timeline"},
				Description: `Create processes execution timeline file`,
				Args: []model.Arg{{
					Name: "timeline filename e.g. timeline.html",
				}},
			}, {
				Name:        []string{"-with-tower"},
				Description: `Monitor workflow execution with Seqera Tower service`,
			}, {
				Name:        []string{"-with-trace"},
				Description: `Create processes execution tracing file`,
				Args: []model.Arg{{
					Name: "trace text filename e.g. trace.txt",
				}},
			}, {
				Name:        []string{"-with-weblog"},
				Description: `Send workflow status messages via HTTP to target URL`,
				Args: []model.Arg{{
					Name: "target web URL",
				}},
			}, {
				Name:        []string{"-without-docker"},
				Description: `Disable process execution with Docker (Default: false)`,
			}, {
				Name:        []string{"-without-podman"},
				Description: `Disable process execution in a Podman container`,
			}, {
				Name:        []string{"-w", "-work-dir"},
				Description: `Directory where intermediate result files are stored`,
				Args: []model.Arg{{
					Name: "work dir",
				}},
			}},
		}, {
			Name:        []string{"secrets"},
			Description: `Handle and manage sensitive information for pipeline execution in a safe manner`,
			Options: []model.Option{{
				Name:        []string{"list"},
				Description: `List secrets available in the current store e.g. nextflow secrets list`,
			}, {
				Name:        []string{"get"},
				Description: `Allows retrieving a secret value e.g. nextflow secrets get FOO`,
				Args: []model.Arg{{
					Name:      "secret name",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"set"},
				Description: `Allows creating creating a new secret or overriding an existing one e.g. nextflow secrets set FOO "Hello world"`,
				Args: []model.Arg{{
					Name:      "secret name and value",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Allows deleting an existing secret e.g. nextflow secrets delete FOO`,
				Args: []model.Arg{{
					Name:      "secret name",
					Generator: nil, // TODO: port over generator
				}},
			}},
		}, {
			Name:        []string{"self-update"},
			Description: `Update nextflow runtime to the latest available version`,
			Options: []model.Option{{
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}},
		}, {
			Name:        []string{"view"},
			Description: `View project script file(s)`,
			Args: []model.Arg{{
				Name:      "project name",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "-help"},
				Description: `Print the command usage (Default: false)`,
			}, {
				Name:        []string{"-l"},
				Description: `List repository content (Default: false)`,
			}, {
				Name:        []string{"-q"},
				Description: `Hide header line (Default: false)`,
			}},
		}},
	}
}
