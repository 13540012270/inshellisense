// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["babel"] = model.Subcommand{
		Name: []string{"babel"},
		Options: []model.Option{{
			Name:        []string{"-f", "--filename"},
			Description: `The filename to use when reading from stdin. This will be used in source-maps, errors etc`,
			Args: []model.Arg{{
				Name: "filename",
			}},
		}, {
			Name:        []string{"--presets"},
			Description: `A comma-separated list of preset names`,
			Args: []model.Arg{{
				Name: "list",
			}},
		}, {
			Name:        []string{"--plugins"},
			Description: `A comma-separated list of plugin names`,
			Args: []model.Arg{{
				Name: "list",
			}},
		}, {
			Name:        []string{"--config-file"},
			Description: `Path to a .babelrc file to use`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--env-name"},
			Description: `The name of the 'env' to use when loading configs and plugins. Defaults to the value of BABEL_ENV, or else NODE_ENV, or else 'development'`,
			Args: []model.Arg{{
				Name:        "env",
				Suggestions: []model.Suggestion{{Name: []string{`production`}}, {Name: []string{`development`}}},
			}},
		}, {
			Name:        []string{"--root-mode"},
			Description: `The project-root resolution mode`,
			Args: []model.Arg{{
				Name: "mode",
				Suggestions: []model.Suggestion{{
					Name:        []string{`root`},
					Description: `Passes the "root" value through as unchanged`,
				}, {
					Name:        []string{`upward`},
					Description: `Walks upward from the "root" directory, looking for a directory containing a babel.config.json file, and throws an error if a babel.config.json is not found`,
				}, {
					Name:        []string{`upward-optional`},
					Description: `Walk upward from the "root" directory, looking for a directory containing a babel.config.json file, and falls back to "root" if a babel.config.json is not found`,
				}},
			}},
		}, {
			Name: []string{"--source-type"},
			Args: []model.Arg{{
				Name:        "type",
				Suggestions: []model.Suggestion{{Name: []string{`script`}}, {Name: []string{`module`}}},
			}},
		}, {
			Name:        []string{"--no-babelrc"},
			Description: `Whether or not to look up .babelrc and .babelignore files`,
		}, {
			Name:        []string{"--ignore"},
			Description: `List of glob paths to **not** compile`,
			Args: []model.Arg{{
				Name: "list",
			}},
		}, {
			Name:        []string{"--only"},
			Description: `List of glob paths to **only** compile`,
			Args: []model.Arg{{
				Name: "list",
			}},
		}, {
			Name:        []string{"--no-highlight-code"},
			Description: `Enable or disable ANSI syntax highlighting of code frames`,
		}, {
			Name:        []string{"--no-comments"},
			Description: `Write comments to generated output`,
		}, {
			Name:        []string{"--retain-lines"},
			Description: `Retain line numbers. This will result in really ugly code`,
		}, {
			Name:        []string{"--compact"},
			Description: `Do not include superfluous whitespace characters and line terminators`,
			Args: []model.Arg{{
				Name:        "mode",
				Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}, {Name: []string{`auto`}}},
			}},
		}, {
			Name:        []string{"--minified"},
			Description: `Save as many bytes when printing. (false by default)`,
		}, {
			Name:        []string{"--auxiliary-comment-before"},
			Description: `Print a comment before any injected non-user code`,
			Args: []model.Arg{{
				Name: "comment",
			}},
		}, {
			Name:        []string{"--auxiliary-comment-after"},
			Description: `Print a comment after any injected non-user code`,
			Args: []model.Arg{{
				Name: "comment",
			}},
		}, {
			Name: []string{"-s", "--source-maps"},
			Args: []model.Arg{{
				Name:        "mode",
				Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}, {Name: []string{`inline`}}, {Name: []string{`both`}}},
			}},
		}, {
			Name:        []string{"--source-map-target"},
			Description: `Set "file" on returned source map`,
			Args: []model.Arg{{
				Name: "string",
			}},
		}, {
			Name:        []string{"--source-file-name"},
			Description: `Set "sources[0]" on returned source map`,
			Args: []model.Arg{{
				Name: "string",
			}},
		}, {
			Name:        []string{"--source-root"},
			Description: `The root from which all sources are relative`,
			Args: []model.Arg{{
				Name: "filename",
			}},
		}, {
			Name:        []string{"-x", "--extensions"},
			Description: `Comma separated list of extensions to compile when a directory has been the input. [js,ts,jsx,tsx]`,
			Args: []model.Arg{{
				Name: "extensions",
			}},
		}, {
			Name:        []string{"--keep-file-extension"},
			Description: `Preserve the file extensions of the input files`,
		}, {
			Name:        []string{"-w", "--watch"},
			Description: `Recompile files on changes`,
		}, {
			Name:        []string{"--skip-initial-build"},
			Description: `Do not compile files before watching`,
		}, {
			Name:        []string{"-o", "--out-file"},
			Description: `Compile all input files into a single file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"-d", "--out-dir"},
			Description: `Compile an input directory of modules into an output directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "directory",
			}},
		}, {
			Name:        []string{"--relative"},
			Description: `Compile into an output directory relative to input directory or file`,
		}, {
			Name:        []string{"-D", "--copy-files"},
			Description: `When compiling a directory copy over non-compilable files`,
		}, {
			Name:        []string{"--include-dotfiles"},
			Description: `Include dotfiles when compiling and copying non-compilable files`,
		}, {
			Name:        []string{"--no-copy-ignored"},
			Description: `Exclude ignored files when copying non-compilable files`,
		}, {
			Name:        []string{"--verbose"},
			Description: `Log everything. This option conflicts with --quiet`,
			ExclusiveOn: []string{"--quiet"},
		}, {
			Name:        []string{"--quiet"},
			Description: `Don't log anything. This option conflicts with --verbose`,
			ExclusiveOn: []string{"--verbose"},
		}, {
			Name:        []string{"--delete-dir-on-start"},
			Description: `Delete the out directory before compilation`,
		}, {
			Name:        []string{"--out-file-extension"},
			Description: `Use a specific extension for the output files`,
			Args: []model.Arg{{
				Name:        "extension",
				Suggestions: []model.Suggestion{{Name: []string{`.es6`}}, {Name: []string{`.js`}}, {Name: []string{`.es`}}, {Name: []string{`.jsx`}}, {Name: []string{`.mjs`}}},
			}},
		}, {
			Name:        []string{"-V", "--version"},
			Description: `Output the version number`,
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Output usage information`,
		}},
	}
}
