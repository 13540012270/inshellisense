// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["tfsec"] = model.Subcommand{
		Name:        []string{"tfsec"},
		Description: `Tfsec is a simple tool to detect potential security vulnerabilities in your terraformed infrastructure`,
		Args: []model.Arg{{
			Templates: []model.Template{model.TemplateFolders},
			Name:      "directory",
		}},
		Options: []model.Option{{
			Name:        []string{"--concise-output"},
			Description: `Reduce the amount of output and no statistics`,
		}, {
			Name:        []string{"--config-file"},
			Description: `Config file to use during run`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "config-file",
			}},
		}, {
			Name:        []string{"--custom-check-dir"},
			Description: `Explicitly the custom checks dir location`,
			Args: []model.Arg{{
				Name: "custom-check-dir",
			}},
		}, {
			Name:        []string{"--debug"},
			Description: `Enable debug logging (same as verbose)`,
		}, {
			Name:        []string{"-G", "--disable-grouping"},
			Description: `Disable grouping of similar results`,
		}, {
			Name:        []string{"-e", "--exclude"},
			Description: `Provide comma-separated list of rule IDs to exclude from run`,
			Args: []model.Arg{{
				Name: "excludeList",
			}},
		}, {
			Name:        []string{"--exclude-downloaded-modules"},
			Description: `Remove results for downloaded modules in .terraform folder`,
		}, {
			Name:        []string{"--exclude-path"},
			Description: `Folder path to exclude, can be used multiple times and evaluated in order of specification`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "excludePath",
			}},
		}, {
			Name:        []string{"--filter-results"},
			Description: `Filter results to return specific checks only (supports comma-delimited input)`,
			Args: []model.Arg{{
				Name: "filterResults",
			}},
		}, {
			Name:        []string{"--force-all-dirs"},
			Description: `Don't search for tf files, include everything below provided directory`,
		}, {
			Name:        []string{"-f", "--format"},
			Description: `Select output format: default, json, csv, checkstyle, junit, sarif. To use multiple formats, separate with a comma and specify a base output filename with --out. A file will be written for each type. The first format will additionally be written stdout`,
			Args: []model.Arg{{
				Name:        "format",
				Suggestions: []model.Suggestion{{Name: []string{`default`}}, {Name: []string{`json`}}, {Name: []string{`csv`}}, {Name: []string{`checkstyle`}}, {Name: []string{`junit`}}, {Name: []string{`sarif`}}},
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Help for tfsec`,
		}, {
			Name:        []string{"--ignore-hcl-errors"},
			Description: `Stop and report an error if an HCL parse error is encountered`,
		}, {
			Name:        []string{"--include-ignored"},
			Description: `Include ignored checks in the result output`,
		}, {
			Name:        []string{"--include-passed"},
			Description: `Include passed checks in the result output`,
		}, {
			Name:        []string{"--migrate-ignores"},
			Description: `Migrate ignore codes to the new ID structure`,
		}, {
			Name:        []string{"-m", "--minimum-severity"},
			Description: `The minimum severity to report. One of CRITICAL, HIGH, MEDIUM, LOW`,
			Args: []model.Arg{{
				Name:        "minimumSeverity",
				Suggestions: []model.Suggestion{{Name: []string{`CRITICAL`}}, {Name: []string{`HIGH`}}, {Name: []string{`MEDIUM`}}, {Name: []string{`LOW`}}},
			}},
		}, {
			Name:        []string{"--no-color"},
			Description: `Disable colored output (American style!)`,
		}, {
			Name:        []string{"--no-colour"},
			Description: `Disable coloured output`,
		}, {
			Name:        []string{"--no-ignores"},
			Description: `Do not apply any ignore rules - normally ignored checks will fail`,
		}, {
			Name:        []string{"--no-module-downloads"},
			Description: `Do not download remote modules`,
		}, {
			Name:        []string{"-O", "--out"},
			Description: `Set output file. This filename will have a format descriptor appended if multiple formats are specified with --format`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "outputFile",
			}},
		}, {
			Name:        []string{"--print-rego-input"},
			Description: `Print a JSON representation of the input supplied to rego policies`,
		}, {
			Name:        []string{"--rego-policy-dir"},
			Description: `Directory to load rego policies from (recursively)`,
			Args: []model.Arg{{
				Name: "regoPolicyDir",
			}},
		}, {
			Name:        []string{"--run-statistics"},
			Description: `View statistics table of current findings`,
		}, {
			Name:        []string{"--single-thread"},
			Description: `Run checks using a single thread`,
		}, {
			Name:        []string{"-s", "--soft-fail"},
			Description: `Runs checks but suppresses error code`,
		}, {
			Name:        []string{"--tfvars-file"},
			Description: `Path to .tfvars file, can be used multiple times and evaluated in order of specification`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "tfvarsFilePath",
			}},
		}, {
			Name:        []string{"--update"},
			Description: `Update to latest version`,
		}, {
			Name:        []string{"--verbose"},
			Description: `Enable verbose logging (same as debug)`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Show version information and exit`,
		}, {
			Name:        []string{"-W", "--workspace"},
			Description: `Specify a workspace for ignore limits (default "default")`,
			Args: []model.Arg{{
				Name:      "workspace",
				Generator: nil, // TODO: port over generator
			}},
		}},
	}
}
