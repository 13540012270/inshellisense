// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["browser-sync"] = model.Subcommand{
		Name:        []string{"browser-sync"},
		Description: `Keep multiple browsers & devices in sync when building websites`,
		Args: []model.Arg{{
			Templates:  []model.Template{model.TemplateFolders},
			Name:       "site or directory",
			IsOptional: true,
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"--version"},
			Description: `Show version number`,
		}, {
			Name:         []string{"--help"},
			Description:  `Show help`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"start"},
			Description: `Start Browsersync`,
			Options: []model.Option{{
				Name:        []string{"-s", "--server"},
				Description: `Run a Local server (uses your cwd as the web root)`,
			}, {
				Name:        []string{"--cwd"},
				Description: `Working directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "directory",
				}},
			}, {
				Name:        []string{"--json"},
				Description: `If true, certain logs will output as json only`,
			}, {
				Name:        []string{"--serveStatic", "--ss"},
				Description: `Directories to serve static files from`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "directories",
				}},
			}, {
				Name:        []string{"--port"},
				Description: `Specify a port to use`,
				Args: []model.Arg{{
					Name: "port",
				}},
			}, {
				Name:        []string{"-p", "--proxy"},
				Description: `Proxy an existing server`,
			}, {
				Name:        []string{"--ws"},
				Description: `Proxy mode only - enable websocket proxying`,
			}, {
				Name:        []string{"-b", "--browser"},
				Description: `Choose which browser should be auto-opened`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-w", "--watch"},
				Description: `Watch files`,
			}, {
				Name:        []string{"--ignore"},
				Description: `Ignore patterns for file watchers`,
				Args: []model.Arg{{
					Name: "patterns",
				}},
			}, {
				Name:        []string{"-f", "--files"},
				Description: `File paths to watch`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "paths",
				}},
			}, {
				Name:        []string{"--index"},
				Description: `Specify which file should be used as the index page`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "file",
				}},
			}, {
				Name:        []string{"--plugins"},
				Description: `Load Browsersync plugins`,
				Args: []model.Arg{{
					Name: "plugins",
				}},
			}, {
				Name:        []string{"--extensions"},
				Description: `Specify file extension fallbacks`,
				Args: []model.Arg{{
					Name: "extensions",
				}},
			}, {
				Name:        []string{"--startPath"},
				Description: `Specify the start path for the opened browser`,
				Args: []model.Arg{{
					Name: "start-path",
				}},
			}, {
				Name:        []string{"--single"},
				Description: `If true, the connect-history-api-fallback middleware will be added`,
			}, {
				Name:        []string{"--https"},
				Description: `Enable SSL for local development`,
			}, {
				Name:        []string{"--directory"},
				Description: `Show a directory listing for the server`,
			}, {
				Name:        []string{"--xip"},
				Description: `Use xip.io domain routing`,
			}, {
				Name:        []string{"--tunnel"},
				Description: `Use a public URL`,
			}, {
				Name:        []string{"--open"},
				Description: `Choose which URL is auto-opened (local, external or tunnel), or provide a url`,
				Args: []model.Arg{{
					Name:        "string",
					Suggestions: []model.Suggestion{{Name: []string{`local`}}, {Name: []string{`external`}}, {Name: []string{`tunnel`}}},
				}},
			}, {
				Name:        []string{"--cors"},
				Description: `Add Access Control headers to every request`,
			}, {
				Name:        []string{"-c", "--config"},
				Description: `Specify a path to a configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--host"},
				Description: `Specify a hostname to use`,
				Args: []model.Arg{{
					Name: "hostname",
				}},
			}, {
				Name:        []string{"--listen"},
				Description: `Specify a hostname bind to (this will prevent binding to all interfaces)`,
				Args: []model.Arg{{
					Name: "hostname",
				}},
			}, {
				Name:        []string{"--logLevel"},
				Description: `Set the logger output level (silent, info or debug)`,
				Args: []model.Arg{{
					Name:        "level",
					Suggestions: []model.Suggestion{{Name: []string{`silent`}}, {Name: []string{`info`}}, {Name: []string{`debug`}}},
				}},
			}, {
				Name:        []string{"--reload-delay"},
				Description: `Time in milliseconds to delay the reload event following file changes`,
				Args: []model.Arg{{
					Name: "milliseconds",
				}},
			}, {
				Name:        []string{"--reload-debounce"},
				Description: `Restrict the frequency in which browser:reload events can be emitted to connected clients`,
				Args: []model.Arg{{
					Name: "milliseconds",
				}},
			}, {
				Name:        []string{"--ui-port"},
				Description: `Specify a port for the UI to use`,
				Args: []model.Arg{{
					Name: "port",
				}},
			}, {
				Name:        []string{"--watchEvents"},
				Description: `Specify which file events to respond to`,
				Args: []model.Arg{{
					Name: "events",
				}},
			}, {
				Name:        []string{"--no-notify"},
				Description: `Disable the notify element in browsers`,
			}, {
				Name:        []string{"--no-open"},
				Description: `Don't open a new browser window`,
			}, {
				Name:        []string{"--no-snippet"},
				Description: `Disable the snippet injection`,
			}, {
				Name:        []string{"--no-online"},
				Description: `Force offline usage`,
			}, {
				Name:        []string{"--no-ui"},
				Description: `Don't start the user interface`,
			}, {
				Name:        []string{"--no-ghost-mode"},
				Description: `Disable Ghost Mode`,
			}, {
				Name:        []string{"--no-inject-changes"},
				Description: `Reload on every file change`,
			}, {
				Name:        []string{"--no-reload-on-restart"},
				Description: `Don't auto-reload all browsers following a restart`,
			}},
		}, {
			Name:        []string{"init"},
			Description: `Create a configuration file`,
			Options: []model.Option{{
				Name:        []string{"--cwd"},
				Description: `Working directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "string",
				}},
			}},
		}, {
			Name:        []string{"reload"},
			Description: `Send a reload event over HTTP protocol`,
			Options: []model.Option{{
				Name:        []string{"-f", "--files"},
				Description: `File paths to reload`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "paths",
				}},
			}, {
				Name:        []string{"-p", "--port"},
				Description: `Target a running instance by port number`,
				Args: []model.Arg{{
					Name: "port",
				}},
			}, {
				Name:        []string{"-u", "--url"},
				Description: `Provide the full URL to the running browsersync isntance`,
				Args: []model.Arg{{
					Name: "url",
				}},
			}, {
				Name:        []string{"--cwd"},
				Description: `Working directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "directory",
				}},
			}},
		}, {
			Name:        []string{"recipe"},
			Description: `Generate the files for a recipe`,
			Args: []model.Arg{{
				Name:      "recipe-name",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--cwd"},
				Description: `Working directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "directory",
				}},
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Specify an output directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "directory",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"ls"},
				Description: `List recipes`,
			}},
		}},
	}
}
