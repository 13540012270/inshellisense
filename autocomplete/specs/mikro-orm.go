// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["mikro-orm"] = model.Subcommand{
		Name:        []string{"mikro-orm"},
		Description: `TypeScript ORM for Node.js based on Data Mapper, Unit of Work and Identity Map patterns. Supports MongoDB, MySQL, MariaDB, PostgreSQL and SQLite databases`,
		Options: []model.Option{{
			Name:        []string{"-v", "--version"},
			Description: `Show version number`,
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Show help`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"cache:clear"},
			Description: `Clear metadata cache`,
		}, {
			Name:        []string{"cache:generate"},
			Description: `Generate metadata cache for production`,
		}, {
			Name:        []string{"generate-entities"},
			Description: `Generate entities based on current database schema`,
			Options: []model.Option{{
				Name:        []string{"-s", "--save"},
				Description: `Saves entities to directory defined by --path`,
			}, {
				Name:        []string{"-d", "--dump"},
				Description: `Dumps all entities to console`,
			}, {
				Name:        []string{"-p", "--path"},
				Description: `Sets path to directory where to save entities`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--schema"},
				Description: `Generates entities only for given schema`,
				Args: []model.Arg{{
					Name: "schema",
				}},
			}},
		}, {
			Name:        []string{"database:create"},
			Description: `Create your database if it does not exist`,
		}, {
			Name:        []string{"database:import"},
			Description: `Imports the SQL file to the database`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"seeder:run"},
			Description: `Seed the database using the seeder class`,
		}, {
			Name:        []string{"seeder:create"},
			Description: `Create a new seeder class`,
			Options: []model.Option{{
				Name:        []string{"--class"},
				Description: `Seeder class to run`,
			}},
		}, {
			Name:        []string{"schema:create"},
			Description: `Create database schema based on current metadata`,
			Options: []model.Option{{
				Name:        []string{"-r", "--run"},
				Description: `Runs queries`,
			}, {
				Name:        []string{"-d", "--dump"},
				Description: `Dumps all queries to console`,
			}, {
				Name:        []string{"--fk-checks"},
				Description: `Do not skip foreign key checks`,
			}, {
				Name:        []string{"--schema"},
				Description: `Set the current schema for wildcard schema entities`,
				Args: []model.Arg{{
					Name: "schema",
				}},
			}, {
				Name:        []string{"--seed"},
				Description: `Allows to seed the database on create or drop and recreate`,
				Args: []model.Arg{{
					Name: "seed",
				}},
			}},
		}, {
			Name:        []string{"schema:drop"},
			Description: `Drop database schema based on current metadata`,
			Options: []model.Option{{
				Name:        []string{"-r", "--run"},
				Description: `Runs queries`,
			}, {
				Name:        []string{"-d", "--dump"},
				Description: `Dumps all queries to console`,
			}, {
				Name:        []string{"--fk-checks"},
				Description: `Do not skip foreign key checks`,
			}, {
				Name:        []string{"--schema"},
				Description: `Set the current schema for wildcard schema entities`,
				Args: []model.Arg{{
					Name: "schema",
				}},
			}, {
				Name:        []string{"--drop-migrations-table"},
				Description: `Drop also migrations table`,
			}, {
				Name:        []string{"--drop-db"},
				Description: `Drop the whole database`,
			}},
		}, {
			Name:        []string{"schema:update"},
			Description: `Update database schema based on current metadata`,
			Options: []model.Option{{
				Name:        []string{"-r", "--run"},
				Description: `Runs queries`,
			}, {
				Name:        []string{"-d", "--dump"},
				Description: `Dumps all queries to console`,
			}, {
				Name:        []string{"--fk-checks"},
				Description: `Do not skip foreign key checks`,
			}, {
				Name:        []string{"--schema"},
				Description: `Set the current schema for wildcard schema entities`,
				Args: []model.Arg{{
					Name: "schema",
				}},
			}, {
				Name:        []string{"--safe"},
				Description: `Allows to disable table and column dropping`,
			}, {
				Name:        []string{"--drop-tables"},
				Description: `Allows to disable table dropping`,
			}},
		}, {
			Name:        []string{"schema:fresh"},
			Description: `Drop and recreate database schema based on current metadata`,
			Options: []model.Option{{
				Name:        []string{"-r", "--run"},
				Description: `Runs queries`,
			}, {
				Name:        []string{"--schema"},
				Description: `Set the current schema for wildcard schema entities`,
				Args: []model.Arg{{
					Name: "schema",
				}},
			}, {
				Name:        []string{"--seed"},
				Description: `Allows to seed the database on create or drop and recreate`,
				Args: []model.Arg{{
					Name: "seed",
				}},
			}},
		}, {
			Name:        []string{"migration:create"},
			Description: `Create new migration with current schema diff`,
			Options: []model.Option{{
				Name:        []string{"-b", "--blank"},
				Description: `Create blank migration`,
			}, {
				Name:        []string{"-i", "--initial"},
				Description: `Create initial migration`,
			}, {
				Name:        []string{"-d", "--dump"},
				Description: `Dumps all queries to console`,
			}, {
				Name:        []string{"-p", "--path"},
				Description: `Sets path to directory where to save entities`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}},
		}, {
			Name:        []string{"migration:up"},
			Description: `Migrate up to the latest version`,
			Options: []model.Option{{
				Name:        []string{"-t", "--to"},
				Description: `Migrate up to specific version`,
			}, {
				Name:        []string{"-f", "--from"},
				Description: `Start migration from specific version`,
			}, {
				Name:        []string{"-o", "--only"},
				Description: `Migrate only specified versions`,
			}},
		}, {
			Name:        []string{"migration:down"},
			Description: `Migrate one step down`,
			Options: []model.Option{{
				Name:        []string{"-t", "--to"},
				Description: `Migrate down to specific version`,
			}, {
				Name:        []string{"-f", "--from"},
				Description: `Start migration from specific version`,
			}, {
				Name:        []string{"-o", "--only"},
				Description: `Migrate only specified versions`,
			}},
		}, {
			Name:        []string{"migration:list"},
			Description: `List all executed migrations`,
		}, {
			Name:        []string{"migration:pending"},
			Description: `List all pending migrations`,
		}, {
			Name:        []string{"migration:fresh"},
			Description: `Clear the database and rerun all migrations`,
			Options: []model.Option{{
				Name:        []string{"--seed"},
				Description: `Allows to seed the database on create or drop and recreate`,
				Args: []model.Arg{{
					Name: "seed",
				}},
			}},
		}, {
			Name:        []string{"debug"},
			Description: `Debug CLI configuration`,
		}},
	}
}
