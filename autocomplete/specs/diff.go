// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["diff"] = model.Subcommand{
		Name:        []string{"diff"},
		Description: `Compare files line by line`,
		Args: []model.Arg{{
			Templates:  []model.Template{model.TemplateFilepaths},
			Name:       "file",
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-i", "--ignore-case"},
			Description: `Ignore case differences in file contents`,
		}, {
			Name:        []string{"--ignore-file-name-case"},
			Description: `Ignore case when comparing file names`,
			ExclusiveOn: []string{"--no-ignore-file-name-case"},
		}, {
			Name:        []string{"--no-ignore-file-name-case"},
			Description: `Consider case when comparing file names`,
			ExclusiveOn: []string{"--ignore-file-name-case"},
		}, {
			Name:        []string{"-E", "--ignore-tab-expansion"},
			Description: `Ignore changes due to tab expansion`,
		}, {
			Name:        []string{"-b", "--ignore-space-change"},
			Description: `Ignore changes in the amount of white space`,
		}, {
			Name:        []string{"-w", "--ignore-all-space"},
			Description: `Ignore all white space`,
		}, {
			Name:        []string{"-B", "--ignore-blank-lines"},
			Description: `Ignore changes whose lines are all blank`,
		}, {
			Name:        []string{"-I", "--ignore-matching-lines"},
			Description: `Ignore changes whose lines all match RE`,
			Args: []model.Arg{{
				Name: "RE",
			}},
		}, {
			Name:        []string{"--strip-trailing-cr"},
			Description: `Strip trailing carriage return on input`,
		}, {
			Name:        []string{"-a", "--text"},
			Description: `Treat all files as text`,
		}, {
			Name:        []string{"-c", "-C", "--context"},
			Description: `Output NUM lines of copied context`,
			Args: []model.Arg{{
				Name: "NUM",
			}},
		}, {
			Name:        []string{"-u", "-U", "--unified"},
			Description: `Output NUM lines of unified context`,
			Args: []model.Arg{{
				Name: "NUM",
			}},
		}, {
			Name:        []string{"--label"},
			Description: `Use LABEL instead of file name`,
			Args: []model.Arg{{
				Name: "LABEL",
			}},
		}, {
			Name:        []string{"-p", "--show-c-function"},
			Description: `Show which C function each change is in`,
		}, {
			Name:        []string{"-F", "--show-function-line"},
			Description: `Show the most recent line matching RE`,
			Args: []model.Arg{{
				Name: "RE",
			}},
		}, {
			Name:        []string{"-q", "--brief"},
			Description: `Output only whether files differ`,
		}, {
			Name:        []string{"-e", "--ed"},
			Description: `Output an ed script`,
		}, {
			Name:        []string{"--normal"},
			Description: `Output a normal diff`,
		}, {
			Name:        []string{"-n", "--rcs"},
			Description: `Output an RCS format diff`,
		}, {
			Name:        []string{"-y", "--side-by-side"},
			Description: `Output in two columns`,
		}, {
			Name:        []string{"-W", "--width"},
			Description: `Output at most NUM (default 130) print columns`,
			Args: []model.Arg{{
				Name: "NUM",
			}},
		}, {
			Name:        []string{"--left-column"},
			Description: `Output only the left column of common lines`,
		}, {
			Name:        []string{"--suppress-common-lines"},
			Description: `Do not output common lines`,
		}, {
			Name:        []string{"-D", "--ifdef"},
			Description: `Output merged file to show "#ifdef NAME' diffs`,
			Args: []model.Arg{{
				Name: "NAME",
			}},
		}, {
			Name:        []string{"-l", "--paginate"},
			Description: `Pass the output through "pr' to paginate it`,
		}, {
			Name:        []string{"-t", "--expand-tabs"},
			Description: `Expand tabs to spaces in output`,
		}, {
			Name:        []string{"-T", "--initial-tab"},
			Description: `Make tabs line up by prepending a tab`,
		}, {
			Name:        []string{"-r", "--recursive"},
			Description: `Recursively compare any subdirectories found`,
		}, {
			Name:        []string{"-N", "--new-file"},
			Description: `Treat absent files as empty`,
		}, {
			Name:        []string{"--unidirectional-new-file"},
			Description: `Treat absent first files as empty`,
		}, {
			Name:        []string{"-s", "--report-identical-files"},
			Description: `Report when two files are the same`,
		}, {
			Name:        []string{"-x", "--exclude"},
			Description: `Exclude files that match PAT`,
			Args: []model.Arg{{
				Name: "PAT",
			}},
		}, {
			Name:        []string{"-X", "--exclude-from"},
			Description: `Exclude files that match any pattern in FILE`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "FILE",
			}},
		}, {
			Name:        []string{"-S", "--starting-file"},
			Description: `Start with FILE when comparing directories`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "FILE",
			}},
		}, {
			Name:        []string{"--from-file"},
			Description: `Compare FILE1 to all operands. FILE1 can be a directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:      "FILE1",
			}},
		}, {
			Name:        []string{"--to-file"},
			Description: `Compare all operands to FILE2. FILE2 can be a directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:      "FILE2",
			}},
		}, {
			Name:        []string{"--horizon-lines"},
			Description: `Keep NUM lines of the common prefix and suffix`,
			Args: []model.Arg{{
				Name: "NUM",
			}},
		}, {
			Name:        []string{"-d", "--minimal"},
			Description: `Try hard to find a smaller set of changes`,
		}, {
			Name:        []string{"--speed-large-files"},
			Description: `Assume large files and many scattered small changes`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Output version info`,
		}, {
			Name:        []string{"--help"},
			Description: `Show help`,
		}, {
			Name:        []string{"--old-group-format"},
			Description: `Similar, but format old input groups with GFTM`,
			Args: []model.Arg{{
				Name: "GFTM",
				Description: `%<  lines from FILE1
%>  lines from FILE2
%=  lines common to FILE1 and FILE2
%[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
LETTERs are as follows for new group, lower case for old group:
F  first line number
L  last line number
N  number of lines = L-F+1
E  F-1
M  L+1
%%  %
%c'C'  the single character C
%c'OOO'  the character with octal code OOO`,
			}},
		}, {
			Name:        []string{"--new-group-format"},
			Description: `Similar, but format new input groups with GFTM`,
			Args: []model.Arg{{
				Name: "GFTM",
				Description: `%<  lines from FILE1
%>  lines from FILE2
%=  lines common to FILE1 and FILE2
%[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
LETTERs are as follows for new group, lower case for old group:
F  first line number
L  last line number
N  number of lines = L-F+1
E  F-1
M  L+1
%%  %
%c'C'  the single character C
%c'OOO'  the character with octal code OOO`,
			}},
		}, {
			Name:        []string{"--unchanged-group-format"},
			Description: `Similar, but format unchanged input groups with GFTM`,
			Args: []model.Arg{{
				Name: "GFTM",
				Description: `%<  lines from FILE1
%>  lines from FILE2
%=  lines common to FILE1 and FILE2
%[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
LETTERs are as follows for new group, lower case for old group:
F  first line number
L  last line number
N  number of lines = L-F+1
E  F-1
M  L+1
%%  %
%c'C'  the single character C
%c'OOO'  the character with octal code OOO`,
			}},
		}, {
			Name:        []string{"--changed-group-format"},
			Description: `Similar, but format changed input groups with GFTM`,
			Args: []model.Arg{{
				Name: "GFTM",
				Description: `%<  lines from FILE1
%>  lines from FILE2
%=  lines common to FILE1 and FILE2
%[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER
LETTERs are as follows for new group, lower case for old group:
F  first line number
L  last line number
N  number of lines = L-F+1
E  F-1
M  L+1
%%  %
%c'C'  the single character C
%c'OOO'  the character with octal code OOO`,
			}},
		}, {
			Name:        []string{"--line-format"},
			Description: `Format all input lines with LFMT`,
			Args: []model.Arg{{
				Name: "LFTM",
			}},
		}, {
			Name:        []string{"--old-line-format"},
			Description: `Format old input lines with LFTM`,
			Args: []model.Arg{{
				Name: "LFTM",
				Description: `%L  contents of line
%l  contents of line, excluding any trailing newline
%[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number
%%  %
%c'C'  the single character C
%c'OOO'  the character with octal code OOO`,
			}},
		}, {
			Name:        []string{"--new-line-format"},
			Description: `Format new input lines with LFTM`,
			Args: []model.Arg{{
				Name: "LFTM",
				Description: `%L  contents of line
%l  contents of line, excluding any trailing newline
%[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number
%%  %
%c'C'  the single character C
%c'OOO'  the character with octal code OOO`,
			}},
		}, {
			Name:        []string{"--unchanged-line-format"},
			Description: `Format unchanged input lines with LFTM`,
			Args: []model.Arg{{
				Name: "LFTM",
				Description: `%L  contents of line
%l  contents of line, excluding any trailing newline
%[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number
%%  %
%c'C'  the single character C
%c'OOO'  the character with octal code OOO`,
			}},
		}},
	}
}
