// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["pkgutil"] = model.Subcommand{
		Name:        []string{"pkgutil"},
		Description: `Query and manipulate for macOS Installer packages and receipts`,
		Options: []model.Option{{
			Name:        []string{"-h", "--help"},
			Description: `A brief summary of commands and usage`,
		}, {
			Name:        []string{"-f", "--force"},
			Description: `Skip confirmation before a potentially destructive or ambiguous action`,
		}, {
			Name:        []string{"-v", "--verbose"},
			Description: `Output in a human-readable format`,
		}, {
			Name:        []string{"--volume"},
			Description: `Perform all operations on specified volume`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "volume",
				Description: `Volume to perform operations on`,
			}},
		}, {
			Name:        []string{"--edit-pkg"},
			Description: `Specifies an existing receipt to be modified in-place by --learn`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `Package ID of the receipt to modify`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--only-files"},
			Description: `List only files (not directories) in --files listing`,
		}, {
			Name:        []string{"--only-dirs"},
			Description: `List only directories (not files) in --files listing`,
		}, {
			Name:        []string{"--regexp"},
			Description: `Use regex to match package-id arguments, if an exact match isn't found`,
		}, {
			Name:        []string{"--pkgs"},
			Description: `List all installed package IDs, optionally matching kwarg REGEXP, on the specified --volume`,
			Args: []model.Arg{{
				Name:        "REGEXP",
				Description: `Regular expression`,
			}},
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"--packages", "--pkgs"},
			Description: `List all installed package IDs on the specified --volume`,
		}, {
			Name:        []string{"--pkgs-plist"},
			Description: `List all installed package IDs, in Mac OS X plist(5) format, on the specified --volume`,
		}, {
			Name:        []string{"--files"},
			Description: `List all of the files installed under the package-id`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `The package ID to list the files of`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--export-plist"},
			Description: `Print all receipt information about the specified package-id in Mac OS X plist(5) format`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `The package ID to export the plist of`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--verify"},
			Description: `Run repair_packages(8) to verify the specified package-id`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `The package ID to verify`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--repair"},
			Description: `Run repair_packages(8) to repair the specified package-id`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `The package ID to repair`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--pkg-info"},
			Description: `Print extended information about the specified package-id`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `The package ID to print the info of`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--pkg-info-plist"},
			Description: `Print extended information about the specified package-id in Mac OS X plist(5) format`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `The package ID to print the info of`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--forget"},
			Description: `Discard all receipt data about package-id, but don't touch installed files`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `The package ID to forget`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--learn"},
			Description: `Update the ACLs of the given path in the receipt identified by --edit-pkg`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The path to update ACLs on`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--pkg-groups"},
			Description: `List all of the package groups this package-id is a member of`,
			Args: []model.Arg{{
				Name:        "package-id",
				Description: `The package ID to list the groups of`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--groups"},
			Description: `List all of the package groups ont he specified --volume`,
		}, {
			Name:        []string{"--group-plist"},
			Description: `List all of the package groups ont he specified --volume in Mac OS X plist(5) format`,
		}, {
			Name:        []string{"--group-pkgs"},
			Description: `List all of the packages that are members of this group-id`,
			Args: []model.Arg{{
				Name:        "group-id",
				Description: `The group ID to list the packages of`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--file-info"},
			Description: `Show the metadata known about path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "path",
				Description: `The path to show the metadata of`,
			}},
		}, {
			Name:        []string{"--file-info-plist"},
			Description: `Show the metadata known about path in Mac OS X plist(5) format`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "path",
				Description: `The path to show the metadata of`,
			}},
		}, {
			Name:        []string{"--expand"},
			Description: `Expand the flat package at pkg-path into a new directory specified by dir-path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "pkg-path",
				Description: `The path to the flat package to expand`,
			}, {
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir-path",
				Description: `The path to the directory to expand the package into`,
			}},
		}, {
			Name:        []string{"--flatten"},
			Description: `Flatten the dir-path into a new flat package created at pkg-path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir-path",
				Description: `The path to the directory to flatten`,
			}, {
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "pkg-path",
				Description: `The path to the flat package to create`,
			}},
		}, {
			Name:        []string{"--bom"},
			Description: `Extract any BOM files from the flat pkg at path into /tmp and return the filename(s)`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The path to the flat package to extract the BOM from`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--payload-files"},
			Description: `List the files archived within the uninstalled flat package(s) at path`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The path to the flat package to list the archived files of`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--check-signature"},
			Description: `Check the validity and trust of the signature on the package at pkg-path`,
			Args: []model.Arg{{
				Name:        "pkg-path",
				Description: `The path to the flat package to check the signature of`,
				Generator:   nil, // TODO: port over generator
			}},
		}},
	}
}
