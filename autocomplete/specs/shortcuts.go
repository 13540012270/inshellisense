// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["shortcuts"] = model.Subcommand{
		Name:        []string{"shortcuts"},
		Description: `Command-line utility for running shortcuts`,
		Subcommands: []model.Subcommand{{
			Name:        []string{"run"},
			Description: `Run a shortcut`,
			Args: []model.Arg{{
				Name:        "shortcut-name",
				Description: `The name of the shortcut to run`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-i", "--input-path"},
				Description: `The input to provide to the shortcut`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "input-path",
				}},
			}, {
				Name:        []string{"-o", "--output-path"},
				Description: `Where to write the shortcut output, if applicable`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "output-path",
				}},
			}, {
				Name:        []string{"--output-type"},
				Description: `What type to output data in, in Universal Type Identifier format`,
				Args: []model.Arg{{
					Name: "output-type",
					Suggestions: []model.Suggestion{{
						Name:        []string{`public.json`},
						Description: `JavaScript Object Notation (JSON)`,
					}, {
						Name:        []string{`public.plain-text`},
						Description: `Plain text`,
					}, {
						Name:        []string{`public.html`},
						Description: `HTML`,
					}, {
						Name:        []string{`public.xml`},
						Description: `XML`,
					}, {
						Name:        []string{`com.adobe.pdf`},
						Description: `Adobe PDF`,
					}, {
						Name:        []string{`public.vcard`},
						Description: `VCard`,
					}},
				}},
			}},
		}, {
			Name:        []string{"list"},
			Description: `List your shortcuts`,
			Options: []model.Option{{
				Name:        []string{"--folder-name", "-f"},
				Description: `The name of the folder to list`,
				Args: []model.Arg{{
					Name:      "folder-name",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--folders"},
				Description: `List folders instead of shortcuts`,
			}},
		}, {
			Name:        []string{"view"},
			Description: `View a shortcut in Shortcuts`,
			Args: []model.Arg{{
				Name:        "shortcut-name",
				Description: `The name of the shortcut to view`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"sign"},
			Description: `Sign a shortcut file`,
			Options: []model.Option{{
				Name:        []string{"--input", "-i"},
				Description: `The shortcut file to sign`,
				Args: []model.Arg{{
					Name:      "input",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Output path for the signed shortcut file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "output",
				}},
			}, {
				Name:        []string{"--mode", "-m"},
				Description: `The signing mode. (default: people-who-know-me)`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`people-who-know-me`}}, {Name: []string{`anyone`}}},
				}},
			}},
		}, {
			Name:        []string{"help"},
			Description: `Show help information`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"run"},
				Description: `Run a shortcut`,
			}, {
				Name:        []string{"list"},
				Description: `List your shortcuts`,
			}, {
				Name:        []string{"view"},
				Description: `View a shortcut in Shortcuts`,
			}, {
				Name:        []string{"sign"},
				Description: `Sign a shortcut file`,
			}},
		}},
	}
}
