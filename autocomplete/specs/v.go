// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["v"] = model.Subcommand{
		Name:        []string{"v"},
		Description: `The V Programming Language`,
		Args: []model.Arg{{
			Templates:   []model.Template{model.TemplateFilepaths},
			Name:        "file",
			Description: `The file to compile`,
		}},
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for V`,
		}, {
			Name:        []string{"version", "--version", "-v"},
			Description: `Show V installed version`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"run"},
			Description: `Compile and run the program`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `The input file`,
			}},
		}, {
			Name:        []string{"crun"},
			Description: `Compile if executable inexistent or not updated and run the program`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `The input file`,
			}},
		}, {
			Name:        []string{"watch"},
			Description: `Watch the file for changes and recompile`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `The input file`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"run"},
				Description: `Run the program after recompiling`,
				Args: []model.Arg{{
					Templates:   []model.Template{model.TemplateFilepaths},
					Name:        "file",
					Description: `The input file`,
				}},
			}},
		}, {
			Name:        []string{"new"},
			Description: `Setup the file structure for a V project (in a sub folder)`,
		}, {
			Name:        []string{"init"},
			Description: `Setup the file structure for an already existing V project`,
		}, {
			Name:        []string{"test"},
			Description: `Run all test files in the provided directory`,
		}, {
			Name:        []string{"fmt"},
			Description: `Format the V code provided`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `The input file`,
			}},
		}, {
			Name:        []string{"vet"},
			Description: `Report suspicious code constructs`,
		}, {
			Name:        []string{"doc"},
			Description: `Generate documentation for a V module`,
		}, {
			Name:        []string{"vlib-docs"},
			Description: `Generate and open the documentation of all the vlib modules`,
		}, {
			Name:        []string{"repl"},
			Description: `Run the REPL`,
		}, {
			Name:        []string{"where"},
			Description: `Find and print the location of current project declarations`,
		}, {
			Name:        []string{"symlink"},
			Description: `Create a symbolic link for V`,
		}, {
			Name:        []string{"up"},
			Description: `Run the V self-updater`,
		}, {
			Name:        []string{"self"},
			Description: `Run the V self-compiler`,
			Options: []model.Option{{
				Name:        []string{"-prod"},
				Description: `Compile V for production (optimize compilation)`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Display help for V`,
			Args: []model.Arg{{
				Generator: nil, // TODO: port over generator
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"other"},
				Description: `Display help for less frequently used commands`,
			}, {
				Name:        []string{"topics"},
				Description: `Display a list of all known help topics`,
			}},
		}},
	}
}
