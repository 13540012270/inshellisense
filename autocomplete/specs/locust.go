// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["locust"] = model.Subcommand{
		Name:        []string{"locust"},
		Description: `Locust is an easy to use, scriptable and scalable Python-based performance testing tool`,
		Options: []model.Option{{
			Name:        []string{"-v", "--version"},
			Description: `Show program's version number and exit`,
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Show this help message and exit`,
		}, {
			Name:        []string{"-f", "--locustfile"},
			Description: `Show program's version number and exit`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "files...",
				Description: `Python module to import, e.g. '../other_test.py'. Either a .py file, multiple comma-separated .py files or a package directory. Defaults to 'locustfile'`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"--config"},
			Description: `Config file path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "files...",
				Description: `Config file path`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"-H", "--host"},
			Description: `Host to load test in the following format: http://10.21.32.33`,
		}, {
			Name:        []string{"-u", "--users"},
			Description: `Peak number of concurrent Locust users. Primarily used together with --headless or --autostart`,
		}, {
			Name:        []string{"-r", "--spawn-rate"},
			Description: `Rate to spawn users at (users per second). Primarily used together with --headless or --autostart`,
		}, {
			Name:        []string{"-t", "--run-time"},
			Description: `Stop after the specified amount of time, e.g. (300s, 20m, 3h, 1h30m, etc.)`,
		}, {
			Name:        []string{"-l", "--list"},
			Description: `Show list of possible User classes and exit`,
		}, {
			Name:        []string{"--web-host"},
			Description: `Host to bind the web interface to. Defaults to '*' (all interfaces)`,
		}, {
			Name:        []string{"-P", "--web-port"},
			Description: `Port on which to run web host`,
		}, {
			Name:        []string{"--headless"},
			Description: `Disable the web interface, and start the test immediately`,
		}, {
			Name:        []string{"--autostart"},
			Description: `Starts the test immediately (without disabling the web UI)`,
		}, {
			Name:        []string{"--autoquit"},
			Description: `Quits Locust entirely, X seconds after the run is finished`,
		}, {
			Name:        []string{"--web-auth"},
			Description: `Turn on Basic Auth for the web interface. e.g. username:password`,
		}, {
			Name:        []string{"--tls-cert"},
			Description: `Optional path to TLS certificate to use to serve over HTTPS`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "tls-cert",
				Description: `Optional path to TLS certificate`,
			}},
		}, {
			Name:        []string{"--tls-key"},
			Description: `Optional path to TLS private key to use to serve over HTTPS`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "tls-key",
				Description: `Optional path to TLS private key`,
			}},
		}, {
			Name:        []string{"--class-picker"},
			Description: `Enable select boxes in the web interface to choose from all available User classes and Shape classes`,
		}, {
			Name:        []string{"--master"},
			Description: `Set locust to run in distributed mode with this process as master`,
		}, {
			Name:        []string{"--master-bind-host"},
			Description: `Interfaces (hostname, ip) that locust master should bind to`,
		}, {
			Name:        []string{"--master-bind-port"},
			Description: `Port that locust master should bind to`,
		}, {
			Name:        []string{"--expect-workers"},
			Description: `How many workers master should expect to connect before starting the test (only when --headless/autostart is used)`,
		}, {
			Name:        []string{"--expect-workers-max-wait"},
			Description: `How long should the master wait for workers to connect before giving up. Defaults to wait forever`,
		}, {
			Name:        []string{"--worker"},
			Description: `Set locust to run in distributed mode with this process as worker`,
		}, {
			Name:        []string{"--master-host"},
			Description: `Host or IP address of locust master for distributed load testing. Only used when running with --worker. Defaults to 127.0.0.1`,
		}, {
			Name:        []string{"--master-port"},
			Description: `Show list of possible User classes and exit`,
		}, {
			Name:        []string{"--csv"},
			Description: `Store current request stats to files in CSV format`,
		}, {
			Name:        []string{"--csv-full-history"},
			Description: `Store each stats entry in CSV format to _stats_history.csv file. You must also specify the '--csv' argument to enable this`,
		}, {
			Name:        []string{"--print-stats"},
			Description: `Print stats in the console`,
		}, {
			Name:        []string{"--only-summary"},
			Description: `Only print the summary stats`,
		}, {
			Name:        []string{"--reset-stats"},
			Description: `Reset statistics once spawning has been completed. Should be set on both master and workers when running in distributed mode`,
		}, {
			Name:        []string{"--html"},
			Description: `Store HTML report to file path specified`,
		}, {
			Name:        []string{"--skip-log-setup"},
			Description: `Disable Locust's logging setup. Instead, the configuration is provided by the Locust test or Python defaults. --loglevel LOGLEVEL, -L LOGLEVEL`,
		}, {
			Name:        []string{"--loglevel"},
			Description: `Choose between DEBUG/INFO/WARNING/ERROR/CRITICAL. Default is INFO`,
			Args: []model.Arg{{
				Name:        "loglevel",
				Suggestions: []model.Suggestion{{Name: []string{`INFO`}}, {Name: []string{`WARNING`}}, {Name: []string{`DEBUG`}}, {Name: []string{`ERROR`}}, {Name: []string{`CRITICAL`}}},
			}},
		}, {
			Name:        []string{"--logfile"},
			Description: `Path to log file. If not set, log will go to stderr`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "logfile",
				Description: `Path to log file`,
			}},
		}, {
			Name:        []string{"--show-task-ratio"},
			Description: `Print table of the User classes' task execution ratio. Use this with non-zero --user option if some classes define non-zero fixed_count attribute`,
		}, {
			Name:        []string{"--show-task-ratio-json"},
			Description: `Print json data of the User classes' task execution ratio. Use this with non-zero --user option if some classes define non-zero fixed_count attribute`,
		}, {
			Name:        []string{"--exit-code-on-error"},
			Description: `Sets the process exit code to use when a test result contain any failure or error`,
		}, {
			Name:        []string{"--equal-weights"},
			Description: `Use equally distributed task weights, overriding the weights specified in the locustfile`,
		}, {
			Name:        []string{"--enable-rebalancing"},
			Description: `Allow to automatically rebalance users if new workers are added or removed during a test run`,
		}, {
			Name:        []string{"-T", "--tags"},
			Description: `List of tags to include in the test, so only tasks with any matching tags will be executed`,
		}, {
			Name:        []string{"--E", "--exclude-tags"},
			Description: `List of tags to exclude from the test, so only tasks with no matching tags will be executed`,
		}},
	}
}
