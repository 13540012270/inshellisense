// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["vite"] = model.Subcommand{
		Name:        []string{"vite"},
		Description: `Native ESM-powered web dev build tool`,
		Args: []model.Arg{{
			Templates:  []model.Template{model.TemplateFolders},
			Name:       "root",
			IsOptional: true,
		}},
		Options: []model.Option{{
			Name:         []string{"-h", "--help"},
			Description:  `Show help message`,
			IsPersistent: true,
		}, {
			Name:        []string{"--host"},
			Description: `Specify the hostname`,
			Args: []model.Arg{{
				Name:       "host",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"--port"},
			Description: `Specify the port`,
			Args: []model.Arg{{
				Name: "port",
			}},
		}, {
			Name:        []string{"--https"},
			Description: `Use TLS + HTTP/2`,
		}, {
			Name:        []string{"--open"},
			Description: `Open browser on startup`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "browser",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"--cors"},
			Description: `Enable CORS`,
		}, {
			Name:        []string{"--strictPort"},
			Description: `Exit if the port is already in use`,
		}, {
			Name:        []string{"--force"},
			Description: `For the optimizer to re-bundle`,
		}, {
			Name:        []string{"-c", "--config"},
			Description: `Use the specified config file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--base"},
			Description: `Public base path`,
			Args: []model.Arg{{
				Name: "path",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"-l", "--logLevel"},
			Description: `Set the log level`,
			Args: []model.Arg{{
				Name: "level",
				Suggestions: []model.Suggestion{{
					Name: []string{`info`},
				}, {
					Name: []string{`warn`},
				}, {
					Name: []string{`error`},
				}, {
					Name: []string{`silent`},
				}},
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--clearScreen"},
			Description:  `Enable screen clearing when logging`,
			IsPersistent: true,
		}, {
			Name:        []string{"-d", "--debug"},
			Description: `Show debug logs`,
			Args: []model.Arg{{
				Name:       "feat",
				IsOptional: true,
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"-f", "--filter"},
			Description: `Filter debug logs`,
			Args: []model.Arg{{
				Name: "filter",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"-m", "--mode"},
			Description: `Set env mode`,
			Args: []model.Arg{{
				Name:      "mode",
				Generator: nil, // TODO: port over generator
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Display version number`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"build"},
			Description: `Build for production`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "root",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--target"},
				Description: `Transpile target (must be a valid esbuild target)`,
				Args: []model.Arg{{
					Name: "target",
				}},
			}, {
				Name:        []string{"--outDir"},
				Description: `Output directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "dir",
				}},
			}, {
				Name:        []string{"--assetsDir"},
				Description: `Directory under outDir to place assets in`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "dir",
				}},
			}, {
				Name:        []string{"--assetsInlineLimit"},
				Description: `Static asset base64 inline threshold in bytes`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"--ssr"},
				Description: `Build specified entry for server-side rendering`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "entry",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--sourcemap"},
				Description: `Output sourcemaps for build`,
			}, {
				Name:        []string{"--minify"},
				Description: `Enable minification`,
				Args: []model.Arg{{
					Name: "minifier",
					Suggestions: []model.Suggestion{{
						Name: []string{`terser`},
					}, {
						Name: []string{`esbuild`},
					}},
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--manifest"},
				Description: `Emit build manifest json`,
				Args: []model.Arg{{
					Name:       "name",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--ssrManifest"},
				Description: `Emit ssr manifest json`,
				Args: []model.Arg{{
					Name:       "name",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--emptyOutDir"},
				Description: `Force empty outDir when it's outside of root`,
			}, {
				Name:        []string{"-w", "--watch"},
				Description: `Rebuilds when modules have changed on disk`,
			}},
		}, {
			Name:        []string{"optimize"},
			Description: `Pre-bundle dependencies`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "root",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--force"},
				Description: `For the optimizer to re-bundle`,
			}},
		}, {
			Name:        []string{"preview"},
			Description: `Locally preview the production build`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "root",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--host"},
				Description: `Specify the hostname`,
				Args: []model.Arg{{
					Name:       "host",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--port"},
				Description: `Specify the port`,
				Args: []model.Arg{{
					Name: "port",
				}},
			}, {
				Name:        []string{"--https"},
				Description: `Use TLS + HTTP/2`,
			}, {
				Name:        []string{"--open"},
				Description: `Open browser on startup`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "browser",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--strictPort"},
				Description: `Exit if the port is already in use`,
			}},
		}},
	}
}
