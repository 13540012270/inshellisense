// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["mgnl"] = model.Subcommand{
		Name:        []string{"mgnl"},
		Description: `Magnolia CLI is a command line interface (CLI) tool to set up and facilitate light development with Magnolia`,
		Options: []model.Option{{
			Name:         []string{"--help", "-h"},
			Description:  `Show help for mgnl`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"add-availability"},
			Description: `This command makes a component available to a page`,
			Args: []model.Arg{{
				Name:        "<[module-id:]path-to-component>",
				Description: `The component you want to make available`,
			}, {
				Name:        "<path-to-page[@area]>",
				Description: `The page you want to make the component available to`,
			}},
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the light module that contains the page template`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-g"},
				Description: `Add this parameter to autogenerate the component instead of providing plain availability`,
			}},
		}, {
			Name:        []string{"create-app"},
			Description: `This command creates a content type and an app`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `The name of the new app. The name cannot contain spaces`,
			}},
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the light module where you want to create the app`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-P", "--prototype"},
				Description: `The name of the prototype variant to create the app`,
				Args: []model.Arg{{
					Name: "prototype",
				}},
			}},
		}, {
			Name:        []string{"create-block"},
			Description: `This command creates a block`,
			Args: []model.Arg{{
				Name:        "blockName",
				Description: `The name of the new block definition. The block name cannot contain spaces`,
			}},
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the light module to add the new block to`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-P", "--prototype"},
				Description: `The name of the prototype variant to create the block`,
				Args: []model.Arg{{
					Name: "prototype",
				}},
			}},
		}, {
			Name:        []string{"create-component"},
			Description: `This command creates a new component template`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `The name of the new component template. The name cannot contain spaces`,
			}},
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the light module you want to add the component template to`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-a", "--available"},
				Description: `The page you want to make the component available to`,
				Args: []model.Arg{{
					Name: "<path-to-page[@area]>",
				}},
			}, {
				Name:        []string{"-g", "--autogenerate"},
				Description: `Add this parameter to autogenerate the component instead of providing plain availability`,
				Args: []model.Arg{{
					Name: "<path-to-page[@area]>",
				}},
			}, {
				Name:        []string{"-P", "--prototype"},
				Description: `The name of the prototype variant to create the component`,
				Args: []model.Arg{{
					Name: "prototype",
				}},
			}},
		}, {
			Name:        []string{"create-content-type"},
			Description: `This command creates a content type`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `The name of the new content type. The name cannot contain spaces`,
			}},
			Options: []model.Option{{
				Name:        []string{"-a"},
				Description: `Creates also a new app that references the content type. With the -a option, the command is functionally equivalent to the create-app command`,
			}, {
				Name:        []string{"-p", "--path"},
				Description: `The path to the light module where you want to create the content type`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-P", "--prototype"},
				Description: `The name of the prototype variant to create the content type`,
				Args: []model.Arg{{
					Name: "prototype",
				}},
			}},
		}, {
			Name:        []string{"create-light-module"},
			Description: `This command creates a new light module in the form of a set of empty light module folders`,
			Args: []model.Arg{{
				Name:        "moduleName",
				Description: `The name of the new light module. Avoid spaces and special characters since this name is used as folder name`,
			}},
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path of the parent directory for the new light module`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-P", "--prototype"},
				Description: `The name of the prototype variant to create the light module`,
				Args: []model.Arg{{
					Name: "prototype",
				}},
			}},
		}, {
			Name:        []string{"create-page"},
			Description: `This command creates a new page template`,
			Args: []model.Arg{{
				Name:        "templateName",
				Description: `The name of the new page template. The template name cannot contain spaces`,
			}},
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the light module to add the new template to`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-P", "--prototype"},
				Description: `The name of the prototype variant to create the page`,
				Args: []model.Arg{{
					Name: "prototype",
				}},
			}},
		}, {
			Name:        []string{"create-virtual-uri"},
			Description: `The command creates a virtual URI mapping configuration file (a YAML definition file) in the light module`,
			Args: []model.Arg{{
				Name:        "virtualUriName",
				Description: `The name of the new URI configuration`,
			}},
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the light module`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-f", "--formUri"},
				Description: `The pattern to be matched in the requested URI. Enclose the <uri> value in quotes`,
				Args: []model.Arg{{
					Name: "uri",
				}},
			}, {
				Name:        []string{"-t", "--toUri"},
				Description: `A concrete URI that the request is mapped to. Enclose the <prefix:uri> value in quotes`,
				Args: []model.Arg{{
					Name: "<prefix:uri>",
				}},
			}, {
				Name:        []string{"-P", "--prototype"},
				Description: `The name of the prototype variant to create the mapping`,
				Args: []model.Arg{{
					Name: "prototype",
				}},
			}},
		}, {
			Name:        []string{"customize-local-config"},
			Description: `Run this command to create a local configuration`,
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path into which the mgnl-cli-prototypes folder and mgnl-cli.json file are installed`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}},
		}, {
			Name:        []string{"install"},
			Description: `Downloads and installs one or more light modules from npm to the light module directory`,
			Args: []model.Arg{{
				Name:        "light-module-name",
				Description: `At least one name of a light module to be downloaded from npm. If you are installing more than one module from the repository, separate the module names with a space`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the light-modules folder`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}},
		}, {
			Name:        []string{"jumpstart"},
			Description: `This command downloads, unpacks and pre-configures a Magnolia Tomcat server together with a specific webapp`,
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the light modules root folder which is observed for changes`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-m", "--magnolia-version"},
				Description: `Use to choose a specific version of the Magnolia webapp. If not provided, the latest stable version of the specified webapp is downloaded`,
				Args: []model.Arg{{
					Name: "version",
				}},
			}, {
				Name:        []string{"-i", "--install-sample-module"},
				Description: `If provided, a sample light module under the light modules root folder with the given name is created`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-s", "--snapshot"},
				Description: `Downloads the latest snapshot development version of the specified webapp`,
			}, {
				Name:        []string{"-w", "--webapp"},
				Description: `Use to directly specify which Magnolia webapp you want to install`,
				Args: []model.Arg{{
					Name: "webapp",
					Suggestions: []model.Suggestion{{
						Name: []string{`magnolia-empty-webapp`},
					}, {
						Name: []string{`magnolia-community-webapp`},
					}, {
						Name: []string{`magnolia-community-demo-webapp`},
					}, {
						Name: []string{`magnolia-dx-core-webapp`},
					}, {
						Name: []string{`magnolia-dx-core-demo-webapp`},
					}},
				}},
			}},
		}, {
			Name:        []string{"tab-completion"},
			Description: `Run the command to install or uninstall autocompletion for Magnolia CLI commands`,
			Args: []model.Arg{{
				Name: "command",
				Suggestions: []model.Suggestion{{
					Name: []string{`install`},
				}, {
					Name: []string{`uninstall`},
				}},
			}},
		}, {
			Name:        []string{"search"},
			Description: `Searches for Magnolia-related packages available from npm`,
			Args: []model.Arg{{
				Name:        "query",
				Description: `The search query sent to the npm's API. The query can contain multiple terms separated with commas and no spaces`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"start"},
			Description: `This command starts up Magnolia and displays the main log file`,
			Options: []model.Option{{
				Name:        []string{"-p", "--path"},
				Description: `The path to the apache-tomcat folder`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-d"},
				Description: `Does NOT ignore the open files limit check. The files limit check is ignored by default`,
			}},
		}},
	}
}
