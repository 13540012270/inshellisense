// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["mix"] = model.Subcommand{
		Name:        []string{"mix"},
		Description: `Build tool for Elixir`,
		Args: []model.Arg{{
			Name:        "task",
			Description: `Invokes the task (mix run) in a project`,
			Generator:   nil, // TODO: port over generator
			IsOptional:  true,
		}},
		Options: []model.Option{{
			Name:        []string{"-h", "--help"},
			Description: `Shows usage information`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Shows versioning information`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"new"},
			Description: `Creates a new Elixir project at the given path`,
			Args: []model.Arg{{
				Name: "path",
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Output usage information`,
			}, {
				Name:        []string{"--app"},
				Description: `Name the OTP application for the project`,
				Args: []model.Arg{{
					Name: "app",
				}},
			}, {
				Name:        []string{"--modules"},
				Description: `Name the modules in the generated code skeleton`,
				Args: []model.Arg{{
					Name: "module",
				}},
			}, {
				Name:        []string{"--sup"},
				Description: `Generate an OTP application skeleton including a supervision tree. Normally an app is generated without a supervisor and without the app callback`,
			}, {
				Name:        []string{"--umbrella"},
				Description: `Generate an umbrella project`,
			}},
		}, {
			Name:        []string{"run"},
			Description: `Starts the current application and runs code`,
			Args: []model.Arg{{
				Name:       "file",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--config"},
				Description: `Loads the given configuration files`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "file",
				}},
			}, {
				Name:        []string{"-e", "--eval"},
				Description: `Evaluates the given code`,
				Args: []model.Arg{{
					Name:        "code",
					Description: `String containing code to execute`,
				}},
			}, {
				Name:        []string{"-r", "--require"},
				Description: `Executes the given pattern/file`,
				Args: []model.Arg{{
					Name:        "file|pattern",
					Description: `The file|pattern to execute`,
					Generator:   nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"-p", "--parallel"},
				Description: `Executes the given pattern/file`,
				Args: []model.Arg{{
					Name:      "file|pattern",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--preload-modules"},
				Description: `Preloads all modules defined in applications`,
			}, {
				Name:        []string{"--no-compile"},
				Description: `Does not compile even if files require compilation`,
			}, {
				Name:        []string{"--no-deps-check"},
				Description: `Does not check dependencies`,
			}, {
				Name:        []string{"--no-archives-check"},
				Description: `Does not check archives`,
			}, {
				Name:        []string{"--no-halt"},
				Description: `Does not halt the system after running the command`,
			}, {
				Name:        []string{"--no-mix-exs"},
				Description: `Allows the command to run even if there is no mix.exs`,
			}, {
				Name:        []string{"--no-start"},
				Description: `Does not start applications after compilation`,
			}, {
				Name:        []string{"--no-elixir-version-check"},
				Description: `Does not check the Elixir version from mix.exs`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Prints documentation for a given task (Lists all the tasks if no task is specified)`,
			Args: []model.Arg{{
				Name:        "task",
				Description: `Prints documentation for a given task`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--search"},
				Description: `Prints all tasks and aliases that contain 'pattern' in the name`,
				Args: []model.Arg{{
					Name: "pattern",
				}},
			}, {
				Name:        []string{"--names"},
				Description: `Prints all task names and aliases`,
			}},
		}},
	}
}
