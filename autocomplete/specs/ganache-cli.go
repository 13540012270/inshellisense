// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["ganache-cli"] = model.Subcommand{
		Name:        []string{"ganache-cli"},
		Description: `Fast Ethereum RPC client`,
		Options: []model.Option{{
			Name:        []string{"-a", "--accounts"},
			Description: `Specify the number of accounts to generate at startup`,
			Args: []model.Arg{{
				Name: "number",
			}},
		}, {
			Name:        []string{"-e", "--defaultBalanceEther"},
			Description: `Amount of ether to assign each test account. Default is 100`,
			Args: []model.Arg{{
				Name: "number",
			}},
		}, {
			Name:        []string{"-b", "--blockTime"},
			Description: `Specify blockTime in seconds for automatic mining. If you don't specify this flag, ganache will instantly mine a new block for every transaction`,
			Args: []model.Arg{{
				Name: "seconds",
			}},
		}, {
			Name:        []string{"-d", "--deterministic"},
			Description: `Generate deterministic addresses based on a pre-defined mnemonic`,
		}, {
			Name:        []string{"-n", "--secure"},
			Description: `Lock available accounts by default (good for third party transaction signing)`,
		}, {
			Name:        []string{"-m", "--mnemonic"},
			Description: `Use a bip39 mnemonic phrase for generating a PRNG seed, which is in turn used for hierarchical deterministic (HD) account generation`,
		}, {
			Name:        []string{"-p", "--port"},
			Description: `Port number to listen on. Defaults to 8545`,
			Args: []model.Arg{{
				Name: "port number",
			}},
		}, {
			Name:        []string{"-h", "--host"},
			Description: `Hostname to listen on. Defaults to 127.0.0.1 (defaults to 0.0.0.0 for Docker instances of ganache-cli)`,
			Args: []model.Arg{{
				Name: "Hostname",
			}},
		}, {
			Name:        []string{"-s", "--seed"},
			Description: `Use arbitrary data to generate the HD wallet mnemonic to be used`,
		}, {
			Name:        []string{"-g", "--gasPrice"},
			Description: `The price of gas in wei (defaults to 20000000000)`,
			Args: []model.Arg{{
				Name: "price",
			}},
		}, {
			Name:        []string{"-l", "--gasLimit"},
			Description: `The block gas limit (defaults to 0x6691b7)`,
			Args: []model.Arg{{
				Name: "limit",
			}},
		}, {
			Name:        []string{"--callGasLimit"},
			Description: `Sets the transaction gas limit for eth_call and eth_estimateGas calls`,
			Args: []model.Arg{{
				Name: "limit",
			}},
		}, {
			Name:        []string{"-k", "--hardfork"},
			Description: `Allows users to specify which hardfork should be used`,
			Args: []model.Arg{{
				Name:        "hardfork",
				Suggestions: []model.Suggestion{{Name: []string{`byzantium`}}, {Name: []string{`constantinople`}}, {Name: []string{`petersburg`}}, {Name: []string{`istanbul`}}, {Name: []string{`muirGlacier`}}},
			}},
		}, {
			Name:        []string{"-f", "--fork"},
			Description: `Fork from another currently running Ethereum client at a given block. Input should be the HTTP location and port of the other client`,
			Args: []model.Arg{{
				Name: "HTTP location & port",
			}},
		}, {
			Name:        []string{"-i", "--networkId"},
			Description: `Specify the network id ganache-cli will use to identify itself (defaults to the current time or the network id of the forked blockchain if configured)`,
			Args: []model.Arg{{
				Name: "Network ID",
			}},
		}, {
			Name:        []string{"--chainId"},
			Description: `Specify the Chain ID ganache-cli will use for eth_chainId RPC and the CHAINID opcode`,
			Args: []model.Arg{{
				Name: "Chain ID",
			}},
		}, {
			Name:        []string{"--db"},
			Description: `Specify a path to a directory to save the chain database. If a database already exists, ganache-cli will initialize that chain instead of creating a new one`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "folder",
			}},
		}, {
			Name:        []string{"--debug"},
			Description: `Output VM opcodes for debugging`,
		}, {
			Name:        []string{"--mem"},
			Description: `Output ganache-cli memory usage statistics. This replaces normal output`,
		}, {
			Name:        []string{"-q", "--quiet"},
			Description: `Run ganache-cli without any logs`,
		}, {
			Name:        []string{"-?", "--help"},
			Description: `Display help information`,
		}, {
			Name:        []string{"--version"},
			Description: `Display the version of ganache-cli`,
		}, {
			Name:        []string{"--account_keys_path", "--acctKeys"},
			Description: `Specifies a file to save accounts and private keys to, for testing`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--noVMErrorsOnRPCResponse"},
			Description: `Do not transmit transaction failures as RPC errors`,
		}, {
			Name:        []string{"--allowUnlimitedContractSize"},
			Description: `Allows unlimited contract sizes while debugging`,
		}, {
			Name:        []string{"--keepAliveTimeout"},
			Description: `Sets the HTTP server's keepAliveTimeout in milliseconds`,
			Args: []model.Arg{{
				Name: "timeout",
			}},
		}, {
			Name:        []string{"-t", "--time"},
			Description: `Date (ISO 8601) that the first block should start`,
			Args: []model.Arg{{
				Name: "date",
			}},
		}, {
			Name:        []string{"--account"},
			Description: `Specify any number of times passing arbitrary private keys and their associated balances to generate initial addresses`,
			Args: []model.Arg{{
				Name:       "<privatekey>, balance",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-u", "--unlock"},
			Description: `Specify any number of times passing either an address or an account index to unlock specific accounts`,
			Args: []model.Arg{{
				Name:       "address or account index",
				IsVariadic: true,
			}},
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"forkCacheSize"},
			Description: `The maximum size, in bytes, of the in-memory cache for queries on a chain fork. Defaults to 1_073_741_824 bytes (1 gigabyte)`,
			Args: []model.Arg{{
				Name: "number",
			}},
		}},
	}
}
