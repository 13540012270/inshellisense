// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["airflow"] = model.Subcommand{
		Name:        []string{"airflow"},
		Description: `Subcommand`,
		Options: []model.Option{{
			Name:        []string{"-h", "--help"},
			Description: `Show this help message and exit`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"celery"},
			Description: `Celery components`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"flower"},
				Description: `Start a Celery Flower`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-A", "--basic-auth"},
					Description: `Securing Flower with Basic Authentication. Accepts user:password pairs separated by a comma. Example: flower_basic_auth = user1:password1,user2:password2`,
					Args: []model.Arg{{
						Name:        "basic_auth",
						Description: `Securing Flower with Basic Authentication. Accepts user:password pairs separated by a comma. Example: flower_basic_auth = user1:password1,user2:password2`,
						Generator:   nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"-a", "--broker-api"},
					Description: `Broker API`,
					Args: []model.Arg{{
						Name:        "broker_api",
						Description: `Broker API`,
					}},
				}, {
					Name:        []string{"-D", "--daemon"},
					Description: `Daemonize instead of running in the foreground`,
				}, {
					Name:        []string{"-c", "--flower-conf"},
					Description: `Configuration file for flower`,
					Args: []model.Arg{{
						Name:        "flower_conf",
						Description: `Configuration file for flower`,
					}},
				}, {
					Name:        []string{"-H", "--hostname"},
					Description: `Set the hostname on which to run the server`,
					Args: []model.Arg{{
						Name:        "hostname",
						Description: `Set the hostname on which to run the server`,
					}},
				}, {
					Name:        []string{"-l", "--log-file"},
					Description: `Location of the log file`,
					Args: []model.Arg{{
						Name:        "log_file",
						Description: `Location of the log file`,
					}},
				}, {
					Name:        []string{"--pid"},
					Description: `PID file location`,
					Args: []model.Arg{{
						Name:        "pid",
						Description: `PID file location`,
						IsOptional:  true,
					}},
				}, {
					Name:        []string{"-p", "--port"},
					Description: `The port on which to run the server`,
					Args: []model.Arg{{
						Name:        "port",
						Description: `The port on which to run the server`,
					}},
				}, {
					Name:        []string{"--stderr"},
					Description: `Redirect stderr to this file`,
					Args: []model.Arg{{
						Name:        "stderr",
						Description: `Redirect stderr to this file`,
					}},
				}, {
					Name:        []string{"--stdout"},
					Description: `Redirect stdout to this file`,
					Args: []model.Arg{{
						Name:        "stdout",
						Description: `Redirect stdout to this file`,
					}},
				}, {
					Name:        []string{"-u", "--url-prefix"},
					Description: `URL prefix for Flower`,
					Args: []model.Arg{{
						Name:        "url_prefix",
						Description: `URL prefix for Flower`,
					}},
				}},
			}, {
				Name:        []string{"stop"},
				Description: `Stop the Celery worker gracefully`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--pid"},
					Description: `PID file location`,
					Args: []model.Arg{{
						Name:        "pid",
						Description: `PID file location`,
						IsOptional:  true,
					}},
				}},
			}, {
				Name:        []string{"worker"},
				Description: `Start a Celery worker node`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-a", "--autoscale"},
					Description: `Minimum and Maximum number of worker to autoscale`,
					Args: []model.Arg{{
						Name:        "autoscale",
						Description: `Minimum and Maximum number of worker to autoscale`,
					}},
				}, {
					Name:        []string{"-H", "--celery-hostname"},
					Description: `Set the hostname of celery worker if you have multiple workers on a single machine`,
					Args: []model.Arg{{
						Name:        "celery_hostname",
						Description: `Set the hostname of celery worker if you have multiple workers on a single machine`,
					}},
				}, {
					Name:        []string{"-c", "--concurrency"},
					Description: `The number of worker processes`,
					Args: []model.Arg{{
						Name:        "concurrency",
						Description: `The number of worker processes`,
					}},
				}, {
					Name:        []string{"-D", "--daemon"},
					Description: `Daemonize instead of running in the foreground`,
				}, {
					Name:        []string{"-l", "--log-file"},
					Description: `Location of the log file`,
					Args: []model.Arg{{
						Name:        "log_file",
						Description: `Location of the log file`,
					}},
				}, {
					Name:        []string{"--pid"},
					Description: `PID file location`,
					Args: []model.Arg{{
						Name:        "pid",
						Description: `PID file location`,
						IsOptional:  true,
					}},
				}, {
					Name:        []string{"-q", "--queues"},
					Description: `Comma delimited list of queues to serve`,
					Args: []model.Arg{{
						Name:        "queues",
						Description: `Comma delimited list of queues to serve`,
					}},
				}, {
					Name:        []string{"-s", "--skip-serve-logs"},
					Description: `Don't start the serve logs process along with the workers`,
				}, {
					Name:        []string{"--stderr"},
					Description: `Redirect stderr to this file`,
					Args: []model.Arg{{
						Name:        "stderr",
						Description: `Redirect stderr to this file`,
					}},
				}, {
					Name:        []string{"--stdout"},
					Description: `Redirect stdout to this file`,
					Args: []model.Arg{{
						Name:        "stdout",
						Description: `Redirect stdout to this file`,
					}},
				}, {
					Name:        []string{"-u", "--umask"},
					Description: `Set the umask of celery worker in daemon mode`,
					Args: []model.Arg{{
						Name:        "umask",
						Description: `Set the umask of celery worker in daemon mode`,
					}},
				}, {
					Name:        []string{"--without-gossip"},
					Description: `Don't subscribe to other workers events`,
				}, {
					Name:        []string{"--without-mingle"},
					Description: `Don't synchronize with other workers at start-up`,
				}},
			}},
		}, {
			Name:        []string{"cheat-sheet"},
			Description: `Display cheat sheet`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Make logging output more verbose`,
			}},
		}, {
			Name:        []string{"config"},
			Description: `View configuration`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"get-value"},
				Description: `Print the value of the configuration`,
				Args: []model.Arg{{
					Name:        "section",
					Description: `The section name`,
				}, {
					Name:        "option",
					Description: `The option name`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List options for the configuration`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--color"},
					Description: `Do emit colored output (default: auto)`,
					Args: []model.Arg{{
						Name:        "color",
						Description: `Do emit colored output (default: auto)`,
						Suggestions: []model.Suggestion{{Name: []string{`off`}}, {Name: []string{`auto`}}, {Name: []string{`on`}}},
					}},
				}},
			}},
		}, {
			Name:        []string{"connections"},
			Description: `Manage connections`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"add"},
				Description: `Add a connection`,
				Args: []model.Arg{{
					Name:        "conn_id",
					Description: `Connection id, required to get/add/delete a connection`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--conn-description"},
					Description: `Connection description, optional when adding a connection`,
					Args: []model.Arg{{
						Name:        "conn_description",
						Description: `Connection description, optional when adding a connection`,
					}},
				}, {
					Name:        []string{"--conn-extra"},
					Description: `Connection "Extra" field, optional when adding a connection`,
					Args: []model.Arg{{
						Name:        "conn_extra",
						Description: `Connection "Extra" field, optional when adding a connection`,
					}},
				}, {
					Name:        []string{"--conn-host"},
					Description: `Connection host, optional when adding a connection`,
					Args: []model.Arg{{
						Name:        "conn_host",
						Description: `Connection host, optional when adding a connection`,
					}},
				}, {
					Name:        []string{"--conn-json"},
					Description: `Connection JSON, required to add a connection using JSON representation`,
					Args: []model.Arg{{
						Name:        "conn_json",
						Description: `Connection JSON, required to add a connection using JSON representation`,
					}},
				}, {
					Name:        []string{"--conn-login"},
					Description: `Connection login, optional when adding a connection`,
					Args: []model.Arg{{
						Name:        "conn_login",
						Description: `Connection login, optional when adding a connection`,
					}},
				}, {
					Name:        []string{"--conn-password"},
					Description: `Connection password, optional when adding a connection`,
					Args: []model.Arg{{
						Name:        "conn_password",
						Description: `Connection password, optional when adding a connection`,
					}},
				}, {
					Name:        []string{"--conn-port"},
					Description: `Connection port, optional when adding a connection`,
					Args: []model.Arg{{
						Name:        "conn_port",
						Description: `Connection port, optional when adding a connection`,
					}},
				}, {
					Name:        []string{"--conn-schema"},
					Description: `Connection schema, optional when adding a connection`,
					Args: []model.Arg{{
						Name:        "conn_schema",
						Description: `Connection schema, optional when adding a connection`,
					}},
				}, {
					Name:        []string{"--conn-type"},
					Description: `Connection type, required to add a connection without conn_uri`,
					Args: []model.Arg{{
						Name:        "conn_type",
						Description: `Connection type, required to add a connection without conn_uri`,
					}},
				}, {
					Name:        []string{"--conn-uri"},
					Description: `Connection URI, required to add a connection without conn_type`,
					Args: []model.Arg{{
						Name:        "conn_uri",
						Description: `Connection URI, required to add a connection without conn_type`,
					}},
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a connection`,
				Args: []model.Arg{{
					Name:        "conn_id",
					Description: `Connection id, required to get/add/delete a connection`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--color"},
					Description: `Do emit colored output (default: auto)`,
					Args: []model.Arg{{
						Name:        "color",
						Description: `Do emit colored output (default: auto)`,
						Suggestions: []model.Suggestion{{Name: []string{`off`}}, {Name: []string{`auto`}}, {Name: []string{`on`}}},
					}},
				}},
			}, {
				Name:        []string{"export"},
				Description: `Export all connections`,
				Args: []model.Arg{{
					Name:        "file",
					Description: `Output file path for exporting the connections`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--file-format"},
					Description: `File format for the export`,
					Args: []model.Arg{{
						Name:        "file_format",
						Description: `File format for the export`,
						Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`env`}}},
					}},
				}, {
					Name:        []string{"--format"},
					Description: `Deprecated -- use "--file-format" instead. File format to use for the export`,
					Args: []model.Arg{{
						Name:        "format",
						Description: `Deprecated -- use "--file-format" instead. File format to use for the export`,
						Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`env`}}},
					}},
				}, {
					Name:        []string{"--serialization-format"},
					Description: `When exporting as ".env" format, defines how connections should be serialized. Default is "uri"`,
					Args: []model.Arg{{
						Name:        "serialization_format",
						Description: `When exporting as ".env" format, defines how connections should be serialized. Default is "uri"`,
						Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`uri`}}},
					}},
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get a connection`,
				Args: []model.Arg{{
					Name:        "conn_id",
					Description: `Connection id, required to get/add/delete a connection`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--color"},
					Description: `Do emit colored output (default: auto)`,
					Args: []model.Arg{{
						Name:        "color",
						Description: `Do emit colored output (default: auto)`,
						Suggestions: []model.Suggestion{{Name: []string{`off`}}, {Name: []string{`auto`}}, {Name: []string{`on`}}},
					}},
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"import"},
				Description: `Import connections from a file`,
				Args: []model.Arg{{
					Name:        "file",
					Description: `Import connections from a file`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List connections`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--conn-id"},
					Description: `If passed, only items with the specified connection ID will be displayed`,
					Args: []model.Arg{{
						Name:        "conn_id",
						Description: `If passed, only items with the specified connection ID will be displayed`,
					}},
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}},
		}, {
			Name:        []string{"dag-processor"},
			Description: `Start a standalone Dag Processor instance`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"-D", "--daemon"},
				Description: `Daemonize instead of running in the foreground`,
			}, {
				Name:        []string{"-p", "--do-pickle"},
				Description: `Attempt to pickle the DAG object to send over to the workers, instead of letting workers run their version of the code`,
			}, {
				Name:        []string{"-l", "--log-file"},
				Description: `Location of the log file`,
				Args: []model.Arg{{
					Name:        "log_file",
					Description: `Location of the log file`,
				}},
			}, {
				Name:        []string{"-n", "--num-runs"},
				Description: `Set the number of runs to execute before exiting`,
				Args: []model.Arg{{
					Name:        "num_runs",
					Description: `Set the number of runs to execute before exiting`,
				}},
			}, {
				Name:        []string{"--pid"},
				Description: `PID file location`,
				Args: []model.Arg{{
					Name:        "pid",
					Description: `PID file location`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"--stderr"},
				Description: `Redirect stderr to this file`,
				Args: []model.Arg{{
					Name:        "stderr",
					Description: `Redirect stderr to this file`,
				}},
			}, {
				Name:        []string{"--stdout"},
				Description: `Redirect stdout to this file`,
				Args: []model.Arg{{
					Name:        "stdout",
					Description: `Redirect stdout to this file`,
				}},
			}, {
				Name:        []string{"-S", "--subdir"},
				Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
				Args: []model.Arg{{
					Name:        "subdir",
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
				}},
			}},
		}, {
			Name:        []string{"dags"},
			Description: `Manage DAGs`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"backfill"},
				Description: `Run subsections of a DAG for a specified date range`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-c", "--conf"},
					Description: `JSON string that gets pickled into the DagRun's conf attribute`,
					Args: []model.Arg{{
						Name:        "conf",
						Description: `JSON string that gets pickled into the DagRun's conf attribute`,
					}},
				}, {
					Name:        []string{"--continue-on-failures"},
					Description: `If set, the backfill will keep going even if some of the tasks failed`,
				}, {
					Name:        []string{"--delay-on-limit"},
					Description: `Amount of time in seconds to wait when the limit on maximum active dag runs (max_active_runs) has been reached before trying to execute a dag run again`,
					Args: []model.Arg{{
						Name:        "delay_on_limit",
						Description: `Amount of time in seconds to wait when the limit on maximum active dag runs (max_active_runs) has been reached before trying to execute a dag run again`,
					}},
				}, {
					Name:        []string{"-x", "--donot-pickle"},
					Description: `Do not attempt to pickle the DAG object to send over to the workers, just tell the workers to run their version of the code`,
				}, {
					Name:        []string{"-n", "--dry-run"},
					Description: `Perform a dry run for each task. Only renders Template Fields for each task, nothing else`,
				}, {
					Name:        []string{"-e", "--end-date"},
					Description: `Override end_date YYYY-MM-DD`,
					Args: []model.Arg{{
						Name:        "end_date",
						Description: `Override end_date YYYY-MM-DD`,
					}},
				}, {
					Name:        []string{"-i", "--ignore-dependencies"},
					Description: `Skip upstream tasks, run only the tasks matching the regexp. Only works in conjunction with task_regex`,
				}, {
					Name:        []string{"-I", "--ignore-first-depends-on-past"},
					Description: `Ignores depends_on_past dependencies for the first set of tasks only (subsequent executions in the backfill DO respect depends_on_past)`,
				}, {
					Name:        []string{"-l", "--local"},
					Description: `Run the task using the LocalExecutor`,
				}, {
					Name:        []string{"-m", "--mark-success"},
					Description: `Mark jobs as succeeded without running them`,
				}, {
					Name:        []string{"--pool"},
					Description: `Resource pool to use`,
					Args: []model.Arg{{
						Name:        "pool",
						Description: `Resource pool to use`,
					}},
				}, {
					Name:        []string{"--rerun-failed-tasks"},
					Description: `If set, the backfill will auto-rerun all the failed tasks for the backfill date range instead of throwing exceptions`,
				}, {
					Name:        []string{"--reset-dagruns"},
					Description: `If set, the backfill will delete existing backfill-related DAG runs and start anew with fresh, running DAG runs`,
				}, {
					Name:        []string{"-B", "--run-backwards"},
					Description: `If set, the backfill will run tasks from the most recent day first.  if there are tasks that depend_on_past this option will throw an exception`,
				}, {
					Name:        []string{"-s", "--start-date"},
					Description: `Override start_date YYYY-MM-DD`,
					Args: []model.Arg{{
						Name:        "start_date",
						Description: `Override start_date YYYY-MM-DD`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-t", "--task-regex"},
					Description: `The regex to filter specific task_ids to backfill (optional)`,
					Args: []model.Arg{{
						Name:        "task_regex",
						Description: `The regex to filter specific task_ids to backfill (optional)`,
					}},
				}, {
					Name:        []string{"--treat-dag-as-regex"},
					Description: `If set, dag_id will be treated as regex instead of an exact string`,
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Do not prompt to confirm. Use with care!`,
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete all DB records related to the specified DAG`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Do not prompt to confirm. Use with care!`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List all the DAGs`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"list-import-errors"},
				Description: `List all the DAGs that have import errors`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"list-jobs"},
				Description: `List the jobs`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-d", "--dag-id"},
					Description: `The id of the dag`,
					Args: []model.Arg{{
						Name:        "dag_id",
						Description: `The id of the dag`,
					}},
				}, {
					Name:        []string{"--limit"},
					Description: `Return a limited number of records`,
					Args: []model.Arg{{
						Name:        "limit",
						Description: `Return a limited number of records`,
					}},
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"--state"},
					Description: `Only list the dag runs corresponding to the state`,
					Args: []model.Arg{{
						Name:        "state",
						Description: `Only list the dag runs corresponding to the state`,
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"list-runs"},
				Description: `List DAG runs given a DAG id`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-d", "--dag-id"},
					Description: `The id of the dag`,
					Args: []model.Arg{{
						Name:        "dag_id",
						Description: `The id of the dag`,
					}},
				}, {
					Name:        []string{"-e", "--end-date"},
					Description: `Override end_date YYYY-MM-DD`,
					Args: []model.Arg{{
						Name:        "end_date",
						Description: `Override end_date YYYY-MM-DD`,
					}},
				}, {
					Name:        []string{"--no-backfill"},
					Description: `Filter all the backfill dagruns given the dag id`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-s", "--start-date"},
					Description: `Override start_date YYYY-MM-DD`,
					Args: []model.Arg{{
						Name:        "start_date",
						Description: `Override start_date YYYY-MM-DD`,
					}},
				}, {
					Name:        []string{"--state"},
					Description: `Only list the dag runs corresponding to the state`,
					Args: []model.Arg{{
						Name:        "state",
						Description: `Only list the dag runs corresponding to the state`,
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"next-execution"},
				Description: `Get the next execution datetimes of a DAG`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-n", "--num-executions"},
					Description: `The number of next execution datetimes to show`,
					Args: []model.Arg{{
						Name:        "num_executions",
						Description: `The number of next execution datetimes to show`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"pause"},
				Description: `Pause a DAG`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"report"},
				Description: `Show DagBag loading report`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"reserialize"},
				Description: `Reserialize all DAGs by parsing the DagBag files`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--clear-only"},
					Description: `If passed, serialized DAGs will be cleared but not reserialized`,
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"show"},
				Description: `Displays DAG's tasks with their dependencies`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--imgcat"},
					Description: `Displays graph using the imgcat tool`,
				}, {
					Name:        []string{"-s", "--save"},
					Description: `Saves the result to the indicated file`,
					Args: []model.Arg{{
						Name:        "save",
						Description: `Saves the result to the indicated file`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"show-dependencies"},
				Description: `Displays DAGs with their dependencies`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--imgcat"},
					Description: `Displays graph using the imgcat tool`,
				}, {
					Name:        []string{"-s", "--save"},
					Description: `Saves the result to the indicated file`,
					Args: []model.Arg{{
						Name:        "save",
						Description: `Saves the result to the indicated file`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"state"},
				Description: `Get the status of a dag run`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "execution_date",
					Description: `The execution date of the DAG`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"test"},
				Description: `Execute one single DagRun`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "execution_date",
					Description: `The execution date of the DAG (optional)`,
					IsOptional:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-c", "--conf"},
					Description: `JSON string that gets pickled into the DagRun's conf attribute`,
					Args: []model.Arg{{
						Name:        "conf",
						Description: `JSON string that gets pickled into the DagRun's conf attribute`,
					}},
				}, {
					Name: []string{"--imgcat-dagrun"},
					Description: `After completing the dag run, prints a diagram on the screen for the current DAG Run using the imgcat tool.
`,
				}, {
					Name: []string{"--save-dagrun"},
					Description: `After completing the backfill, saves the diagram for current DAG Run to the indicated file.

`,
					Args: []model.Arg{{
						Name: "save_dagrun",
						Description: `After completing the backfill, saves the diagram for current DAG Run to the indicated file.

`,
					}},
				}, {
					Name: []string{"--show-dagrun"},
					Description: `After completing the backfill, shows the diagram for current DAG Run.

The diagram is in DOT language
`,
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"trigger"},
				Description: `Trigger a DAG run`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-c", "--conf"},
					Description: `JSON string that gets pickled into the DagRun's conf attribute`,
					Args: []model.Arg{{
						Name:        "conf",
						Description: `JSON string that gets pickled into the DagRun's conf attribute`,
					}},
				}, {
					Name:        []string{"-e", "--exec-date"},
					Description: `The execution date of the DAG`,
					Args: []model.Arg{{
						Name:        "exec_date",
						Description: `The execution date of the DAG`,
					}},
				}, {
					Name:        []string{"-r", "--run-id"},
					Description: `Helps to identify this run`,
					Args: []model.Arg{{
						Name:        "run_id",
						Description: `Helps to identify this run`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"unpause"},
				Description: `Resume a paused DAG`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}},
		}, {
			Name:        []string{"db"},
			Description: `Database operations`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"check"},
				Description: `Check if the database can be reached`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"check-migrations"},
				Description: `Check if migration have finished`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-t", "--migration-wait-timeout"},
					Description: `Timeout to wait for db to migrate`,
					Args: []model.Arg{{
						Name:        "migration_wait_timeout",
						Description: `Timeout to wait for db to migrate`,
					}},
				}},
			}, {
				Name:        []string{"clean"},
				Description: `Purge old records in metastore tables`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name: []string{"--clean-before-timestamp"},
					Description: `The date or timestamp before which data should be purged.
If no timezone info is supplied then dates are assumed to be in airflow default timezone.
Example: '2022-01-01 00:00:00+01:00'`,
					Args: []model.Arg{{
						Name: "clean_before_timestamp",
						Description: `The date or timestamp before which data should be purged.
If no timezone info is supplied then dates are assumed to be in airflow default timezone.
Example: '2022-01-01 00:00:00+01:00'`,
					}},
				}, {
					Name:        []string{"--dry-run"},
					Description: `Perform a dry run`,
				}, {
					Name:        []string{"--skip-archive"},
					Description: `Don't preserve purged records in an archive table`,
				}, {
					Name: []string{"-t", "--tables"},
					Description: `Table names to perform maintenance on (use comma-separated list).
Options: ['callback_request', 'celery_taskmeta', 'celery_tasksetmeta', 'dag', 'dag_run', 'dataset_event', 'import_error', 'job', 'log', 'rendered_task_instance_fields', 'sla_miss', 'task_fail', 'task_instance', 'task_reschedule', 'xcom']`,
					Args: []model.Arg{{
						Name: "tables",
						Description: `Table names to perform maintenance on (use comma-separated list).
Options: ['callback_request', 'celery_taskmeta', 'celery_tasksetmeta', 'dag', 'dag_run', 'dataset_event', 'import_error', 'job', 'log', 'rendered_task_instance_fields', 'sla_miss', 'task_fail', 'task_instance', 'task_reschedule', 'xcom']`,
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Do not prompt to confirm. Use with care!`,
				}},
			}, {
				Name:        []string{"downgrade"},
				Description: `Downgrade the schema of the metadata database`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--from-revision"},
					Description: `(Optional) If generating sql, may supply a *from* Alembic revision`,
					Args: []model.Arg{{
						Name:        "from_revision",
						Description: `(Optional) If generating sql, may supply a *from* Alembic revision`,
					}},
				}, {
					Name:        []string{"--from-version"},
					Description: `(Optional) If generating sql, may supply a *from* version`,
					Args: []model.Arg{{
						Name:        "from_version",
						Description: `(Optional) If generating sql, may supply a *from* version`,
					}},
				}, {
					Name:        []string{"-s", "--show-sql-only"},
					Description: `Don't actually run migrations; just print out sql scripts for offline migration. Required if using either "--from-version" or "--from-version"`,
				}, {
					Name:        []string{"-r", "--to-revision"},
					Description: `The Alembic revision to downgrade to. Note: must provide either "--to-revision" or "--to-version"`,
					Args: []model.Arg{{
						Name:        "to_revision",
						Description: `The Alembic revision to downgrade to. Note: must provide either "--to-revision" or "--to-version"`,
					}},
				}, {
					Name:        []string{"-n", "--to-version"},
					Description: `(Optional) If provided, only run migrations up to this version`,
					Args: []model.Arg{{
						Name:        "to_version",
						Description: `(Optional) If provided, only run migrations up to this version`,
					}},
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Do not prompt to confirm. Use with care!`,
				}},
			}, {
				Name:        []string{"init"},
				Description: `Initialize the metadata database`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"reset"},
				Description: `Burn down and rebuild the metadata database`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-s", "--skip-init"},
					Description: `Only remove tables; do not perform db init`,
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Do not prompt to confirm. Use with care!`,
				}},
			}, {
				Name:        []string{"shell"},
				Description: `Runs a shell to access the database`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"upgrade"},
				Description: `Upgrade the metadata database to latest version`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--from-revision"},
					Description: `(Optional) If generating sql, may supply a *from* Alembic revision`,
					Args: []model.Arg{{
						Name:        "from_revision",
						Description: `(Optional) If generating sql, may supply a *from* Alembic revision`,
					}},
				}, {
					Name:        []string{"--from-version"},
					Description: `(Optional) If generating sql, may supply a *from* version`,
					Args: []model.Arg{{
						Name:        "from_version",
						Description: `(Optional) If generating sql, may supply a *from* version`,
					}},
				}, {
					Name:        []string{"-s", "--show-sql-only"},
					Description: `Don't actually run migrations; just print out sql scripts for offline migration. Required if using either "--from-version" or "--from-version"`,
				}, {
					Name:        []string{"-r", "--to-revision"},
					Description: `(Optional) If provided, only run migrations up to and including this Alembic revision`,
					Args: []model.Arg{{
						Name:        "to_revision",
						Description: `(Optional) If provided, only run migrations up to and including this Alembic revision`,
					}},
				}, {
					Name:        []string{"-n", "--to-version"},
					Description: `(Optional) The airflow version to upgrade to. Note: must provide either "--to-revision" or "--to-version"`,
					Args: []model.Arg{{
						Name:        "to_version",
						Description: `(Optional) The airflow version to upgrade to. Note: must provide either "--to-revision" or "--to-version"`,
					}},
				}},
			}},
		}, {
			Name:        []string{"info"},
			Description: `Show information about current Airflow and environment`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"--anonymize"},
				Description: `Minimize any personal identifiable information. Use it when sharing output with others`,
			}, {
				Name:        []string{"--file-io"},
				Description: `Send output to file.io service and returns link`,
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
				Args: []model.Arg{{
					Name:        "(table, json, yaml, plain)",
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Make logging output more verbose`,
			}},
		}, {
			Name:        []string{"jobs"},
			Description: `Manage jobs`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"check"},
				Description: `Checks if job(s) are still alive`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--allow-multiple"},
					Description: `If passed, this command will be successful even if multiple matching alive jobs are found`,
				}, {
					Name:        []string{"--hostname"},
					Description: `The hostname of job(s) that will be checked`,
					Args: []model.Arg{{
						Name:        "hostname",
						Description: `The hostname of job(s) that will be checked`,
					}},
				}, {
					Name:        []string{"--job-type"},
					Description: `The type of job(s) that will be checked`,
					Args: []model.Arg{{
						Name:        "job_type",
						Description: `The type of job(s) that will be checked`,
						Suggestions: []model.Suggestion{{Name: []string{`BackfillJob`}}, {Name: []string{`LocalTaskJob`}}, {Name: []string{`SchedulerJob`}}, {Name: []string{`TriggererJob`}}},
					}},
				}, {
					Name:        []string{"--limit"},
					Description: `The number of recent jobs that will be checked. To disable limit, set 0`,
					Args: []model.Arg{{
						Name:        "limit",
						Description: `The number of recent jobs that will be checked. To disable limit, set 0`,
					}},
				}},
			}},
		}, {
			Name:        []string{"kerberos"},
			Description: `Start a kerberos ticket renewer`,
			Args: []model.Arg{{
				Name:        "principal",
				Description: `Kerberos principal`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"-D", "--daemon"},
				Description: `Daemonize instead of running in the foreground`,
			}, {
				Name:        []string{"-k", "--keytab"},
				Description: `Keytab`,
				Args: []model.Arg{{
					Name:        "keytab",
					Description: `Keytab`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"-l", "--log-file"},
				Description: `Location of the log file`,
				Args: []model.Arg{{
					Name:        "log_file",
					Description: `Location of the log file`,
				}},
			}, {
				Name:        []string{"--pid"},
				Description: `PID file location`,
				Args: []model.Arg{{
					Name:        "pid",
					Description: `PID file location`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"--stderr"},
				Description: `Redirect stderr to this file`,
				Args: []model.Arg{{
					Name:        "stderr",
					Description: `Redirect stderr to this file`,
				}},
			}, {
				Name:        []string{"--stdout"},
				Description: `Redirect stdout to this file`,
				Args: []model.Arg{{
					Name:        "stdout",
					Description: `Redirect stdout to this file`,
				}},
			}},
		}, {
			Name:        []string{"kubernetes"},
			Description: `Tools to help run the KubernetesExecutor`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"cleanup-pods"},
				Description: `Clean up Kubernetes pods (created by KubernetesExecutor/KubernetesPodOperator) in evicted/failed/succeeded/pending states`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--min-pending-minutes"},
					Description: `Pending pods created before the time interval are to be cleaned up, measured in minutes. Default value is 30(m). The minimum value is 5(m)`,
					Args: []model.Arg{{
						Name:        "min_pending_minutes",
						Description: `Pending pods created before the time interval are to be cleaned up, measured in minutes. Default value is 30(m). The minimum value is 5(m)`,
					}},
				}, {
					Name:        []string{"--namespace"},
					Description: `Kubernetes Namespace. Default value is "[kubernetes] namespace" in configuration`,
					Args: []model.Arg{{
						Name:        "namespace",
						Description: `Kubernetes Namespace. Default value is "[kubernetes] namespace" in configuration`,
					}},
				}},
			}, {
				Name:        []string{"generate-dag-yaml"},
				Description: `Generate YAML files for all tasks in DAG. Useful for debugging tasks without launching into a cluster`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "execution_date",
					Description: `The execution date of the DAG`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output-path"},
					Description: `The output for generated yaml files`,
					Args: []model.Arg{{
						Name:        "output_path",
						Description: `The output for generated yaml files`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}},
		}, {
			Name:        []string{"plugins"},
			Description: `Dump information about loaded plugins`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
				Args: []model.Arg{{
					Name:        "(table, json, yaml, plain)",
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Make logging output more verbose`,
			}},
		}, {
			Name:        []string{"pools"},
			Description: `Manage pools`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"delete"},
				Description: `Delete pool`,
				Args: []model.Arg{{
					Name:        "NAME",
					Description: `Pool name`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"export"},
				Description: `Export all pools`,
				Args: []model.Arg{{
					Name:        "FILEPATH",
					Description: `Export all pools to JSON file`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get pool size`,
				Args: []model.Arg{{
					Name:        "NAME",
					Description: `Pool name`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"import"},
				Description: `Import pools`,
				Args: []model.Arg{{
					Name: "FILEPATH",
					Description: `Import pools from JSON file. Example format::

    {
        "pool_1": {"slots": 5, "description": ""},
        "pool_2": {"slots": 10, "description": "test"}
    }`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List pools`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"set"},
				Description: `Configure pool`,
				Args: []model.Arg{{
					Name:        "NAME",
					Description: `Pool name`,
				}, {
					Name:        "slots",
					Description: `Pool slots`,
				}, {
					Name:        "description",
					Description: `Pool description`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}},
		}, {
			Name:        []string{"providers"},
			Description: `Display providers`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"auth"},
				Description: `Get information about API auth backends provided`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"behaviours"},
				Description: `Get information about registered connection types with custom behaviours`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get detailed information about a provider`,
				Args: []model.Arg{{
					Name:        "provider_name",
					Description: `Provider name, required to get provider information`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--color"},
					Description: `Do emit colored output (default: auto)`,
					Args: []model.Arg{{
						Name:        "color",
						Description: `Do emit colored output (default: auto)`,
						Suggestions: []model.Suggestion{{Name: []string{`off`}}, {Name: []string{`auto`}}, {Name: []string{`on`}}},
					}},
				}, {
					Name:        []string{"-f", "--full"},
					Description: `Full information about the provider, including documentation information`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"hooks"},
				Description: `List registered provider hooks`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"links"},
				Description: `List extra links registered by the providers`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List installed providers`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"logging"},
				Description: `Get information about task logging handlers provided`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"secrets"},
				Description: `Get information about secrets backends provided`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"widgets"},
				Description: `Get information about registered connection form widgets`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}},
		}, {
			Name:        []string{"roles"},
			Description: `Manage roles`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Create role`,
				Args: []model.Arg{{
					Name:        "role",
					Description: `The name of a role`,
					IsOptional:  true,
					IsVariadic:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete role`,
				Args: []model.Arg{{
					Name:        "role",
					Description: `The name of a role`,
					IsOptional:  true,
					IsVariadic:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"export"},
				Description: `Export roles (without permissions) from db to JSON file`,
				Args: []model.Arg{{
					Name:        "file",
					Description: `Export all roles to JSON file`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-p", "--pretty"},
					Description: `Format output JSON file by sorting role names and indenting by 4 spaces`,
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"import"},
				Description: `Import roles (without permissions) from JSON file to db`,
				Args: []model.Arg{{
					Name:        "file",
					Description: `Import roles from JSON file`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List roles`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}},
		}, {
			Name:        []string{"rotate-fernet-key"},
			Description: `Rotate encrypted connection credentials and variables`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
		}, {
			Name:        []string{"scheduler"},
			Description: `Start a scheduler instance`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"-D", "--daemon"},
				Description: `Daemonize instead of running in the foreground`,
			}, {
				Name:        []string{"-p", "--do-pickle"},
				Description: `Attempt to pickle the DAG object to send over to the workers, instead of letting workers run their version of the code`,
			}, {
				Name:        []string{"-l", "--log-file"},
				Description: `Location of the log file`,
				Args: []model.Arg{{
					Name:        "log_file",
					Description: `Location of the log file`,
				}},
			}, {
				Name:        []string{"-n", "--num-runs"},
				Description: `Set the number of runs to execute before exiting`,
				Args: []model.Arg{{
					Name:        "num_runs",
					Description: `Set the number of runs to execute before exiting`,
				}},
			}, {
				Name:        []string{"--pid"},
				Description: `PID file location`,
				Args: []model.Arg{{
					Name:        "pid",
					Description: `PID file location`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"-s", "--skip-serve-logs"},
				Description: `Don't start the serve logs process along with the workers`,
			}, {
				Name:        []string{"--stderr"},
				Description: `Redirect stderr to this file`,
				Args: []model.Arg{{
					Name:        "stderr",
					Description: `Redirect stderr to this file`,
				}},
			}, {
				Name:        []string{"--stdout"},
				Description: `Redirect stdout to this file`,
				Args: []model.Arg{{
					Name:        "stdout",
					Description: `Redirect stdout to this file`,
				}},
			}, {
				Name:        []string{"-S", "--subdir"},
				Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
				Args: []model.Arg{{
					Name:        "subdir",
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
				}},
			}},
		}, {
			Name:        []string{"standalone"},
			Description: `Run an all-in-one copy of Airflow`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
		}, {
			Name:        []string{"sync-perm"},
			Description: `Update permissions for existing roles and optionally DAGs`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"--include-dags"},
				Description: `If passed, DAG specific permissions will also be synced`,
			}},
		}, {
			Name:        []string{"tasks"},
			Description: `Manage tasks`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"clear"},
				Description: `Clear a set of task instance, as if they never ran`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-R", "--dag-regex"},
					Description: `Search dag_id as regex instead of exact string`,
				}, {
					Name:        []string{"-d", "--downstream"},
					Description: `Include downstream tasks`,
				}, {
					Name:        []string{"-e", "--end-date"},
					Description: `Override end_date YYYY-MM-DD`,
					Args: []model.Arg{{
						Name:        "end_date",
						Description: `Override end_date YYYY-MM-DD`,
					}},
				}, {
					Name:        []string{"-X", "--exclude-parentdag"},
					Description: `Exclude ParentDAGS if the task cleared is a part of a SubDAG`,
				}, {
					Name:        []string{"-x", "--exclude-subdags"},
					Description: `Exclude subdags`,
				}, {
					Name:        []string{"-f", "--only-failed"},
					Description: `Only failed jobs`,
				}, {
					Name:        []string{"-r", "--only-running"},
					Description: `Only running jobs`,
				}, {
					Name:        []string{"-s", "--start-date"},
					Description: `Override start_date YYYY-MM-DD`,
					Args: []model.Arg{{
						Name:        "start_date",
						Description: `Override start_date YYYY-MM-DD`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-t", "--task-regex"},
					Description: `The regex to filter specific task_ids to backfill (optional)`,
					Args: []model.Arg{{
						Name:        "task_regex",
						Description: `The regex to filter specific task_ids to backfill (optional)`,
					}},
				}, {
					Name:        []string{"-u", "--upstream"},
					Description: `Include upstream tasks`,
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Do not prompt to confirm. Use with care!`,
				}},
			}, {
				Name:        []string{"failed-deps"},
				Description: `Returns the unmet dependencies for a task instance`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "task_id",
					Description: `The id of the task`,
				}, {
					Name:        "execution_date_or_run_id",
					Description: `The execution_date of the DAG or run_id of the DAGRun`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--map-index"},
					Description: `Mapped task index`,
					Args: []model.Arg{{
						Name:        "map_index",
						Description: `Mapped task index`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List the tasks within a DAG`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-t", "--tree"},
					Description: `Tree view`,
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"render"},
				Description: `Render a task instance's template(s)`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "task_id",
					Description: `The id of the task`,
				}, {
					Name:        "execution_date_or_run_id",
					Description: `The execution_date of the DAG or run_id of the DAGRun`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--map-index"},
					Description: `Mapped task index`,
					Args: []model.Arg{{
						Name:        "map_index",
						Description: `Mapped task index`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"run"},
				Description: `Run a single task instance`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "task_id",
					Description: `The id of the task`,
				}, {
					Name:        "execution_date_or_run_id",
					Description: `The execution_date of the DAG or run_id of the DAGRun`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--cfg-path"},
					Description: `Path to config file to use instead of airflow.cfg`,
					Args: []model.Arg{{
						Name:        "cfg_path",
						Description: `Path to config file to use instead of airflow.cfg`,
					}},
				}, {
					Name:        []string{"-f", "--force"},
					Description: `Ignore previous task instance state, rerun regardless if task already succeeded/failed`,
				}, {
					Name:        []string{"-A", "--ignore-all-dependencies"},
					Description: `Ignores all non-critical dependencies, including ignore_ti_state and ignore_task_deps`,
				}, {
					Name:        []string{"-i", "--ignore-dependencies"},
					Description: `Ignore task-specific dependencies, e.g. upstream, depends_on_past, and retry delay dependencies`,
				}, {
					Name:        []string{"-I", "--ignore-depends-on-past"},
					Description: `Ignore depends_on_past dependencies (but respect upstream dependencies)`,
				}, {
					Name:        []string{"-N", "--interactive"},
					Description: `Do not capture standard output and error streams (useful for interactive debugging)`,
				}, {
					Name: []string{"-j", "--job-id"},
					Args: []model.Arg{{
						Name: "job_id",
					}},
				}, {
					Name:        []string{"-l", "--local"},
					Description: `Run the task using the LocalExecutor`,
				}, {
					Name:        []string{"--map-index"},
					Description: `Mapped task index`,
					Args: []model.Arg{{
						Name:        "map_index",
						Description: `Mapped task index`,
					}},
				}, {
					Name:        []string{"-m", "--mark-success"},
					Description: `Mark jobs as succeeded without running them`,
				}, {
					Name: []string{"--no-shut-down-logging"},
				}, {
					Name:        []string{"-p", "--pickle"},
					Description: `Serialized pickle object of the entire dag (used internally)`,
					Args: []model.Arg{{
						Name:        "pickle",
						Description: `Serialized pickle object of the entire dag (used internally)`,
					}},
				}, {
					Name:        []string{"--pool"},
					Description: `Resource pool to use`,
					Args: []model.Arg{{
						Name:        "pool",
						Description: `Resource pool to use`,
					}},
				}, {
					Name: []string{"-r", "--raw"},
				}, {
					Name:        []string{"--ship-dag"},
					Description: `Pickles (serializes) the DAG and ships it to the worker`,
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}},
			}, {
				Name:        []string{"state"},
				Description: `Get the status of a task instance`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "task_id",
					Description: `The id of the task`,
				}, {
					Name:        "execution_date_or_run_id",
					Description: `The execution_date of the DAG or run_id of the DAGRun`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"--map-index"},
					Description: `Mapped task index`,
					Args: []model.Arg{{
						Name:        "map_index",
						Description: `Mapped task index`,
					}},
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"states-for-dag-run"},
				Description: `Get the status of all task instances in a dag run`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "execution_date_or_run_id",
					Description: `The execution_date of the DAG or run_id of the DAGRun`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"test"},
				Description: `Test a task instance`,
				Args: []model.Arg{{
					Name:        "dag_id",
					Description: `The id of the dag`,
				}, {
					Name:        "task_id",
					Description: `The id of the task`,
				}, {
					Name:        "execution_date_or_run_id",
					Description: `The execution_date of the DAG or run_id of the DAGRun (optional)`,
					IsOptional:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-n", "--dry-run"},
					Description: `Perform a dry run for each task. Only renders Template Fields for each task, nothing else`,
				}, {
					Name:        []string{"--env-vars"},
					Description: `Set env var in both parsing time and runtime for each of entry supplied in a JSON dict`,
					Args: []model.Arg{{
						Name:        "env_vars",
						Description: `Set env var in both parsing time and runtime for each of entry supplied in a JSON dict`,
					}},
				}, {
					Name:        []string{"--map-index"},
					Description: `Mapped task index`,
					Args: []model.Arg{{
						Name:        "map_index",
						Description: `Mapped task index`,
					}},
				}, {
					Name:        []string{"-m", "--post-mortem"},
					Description: `Open debugger on uncaught exception`,
				}, {
					Name:        []string{"-S", "--subdir"},
					Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					Args: []model.Arg{{
						Name:        "subdir",
						Description: `File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg'`,
					}},
				}, {
					Name:        []string{"-t", "--task-params"},
					Description: `Sends a JSON params dict to the task`,
					Args: []model.Arg{{
						Name:        "task_params",
						Description: `Sends a JSON params dict to the task`,
					}},
				}},
			}},
		}, {
			Name:        []string{"triggerer"},
			Description: `Start a triggerer instance`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"--capacity"},
				Description: `The maximum number of triggers that a Triggerer will run at one time`,
				Args: []model.Arg{{
					Name:        "capacity",
					Description: `The maximum number of triggers that a Triggerer will run at one time`,
				}},
			}, {
				Name:        []string{"-D", "--daemon"},
				Description: `Daemonize instead of running in the foreground`,
			}, {
				Name:        []string{"-l", "--log-file"},
				Description: `Location of the log file`,
				Args: []model.Arg{{
					Name:        "log_file",
					Description: `Location of the log file`,
				}},
			}, {
				Name:        []string{"--pid"},
				Description: `PID file location`,
				Args: []model.Arg{{
					Name:        "pid",
					Description: `PID file location`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"--stderr"},
				Description: `Redirect stderr to this file`,
				Args: []model.Arg{{
					Name:        "stderr",
					Description: `Redirect stderr to this file`,
				}},
			}, {
				Name:        []string{"--stdout"},
				Description: `Redirect stdout to this file`,
				Args: []model.Arg{{
					Name:        "stdout",
					Description: `Redirect stdout to this file`,
				}},
			}},
		}, {
			Name:        []string{"users"},
			Description: `Manage users`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"add-role"},
				Description: `Add role to a user`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-e", "--email"},
					Description: `Email of the user`,
					Args: []model.Arg{{
						Name:        "email",
						Description: `Email of the user`,
					}},
				}, {
					Name:        []string{"-r", "--role"},
					Description: `Role of the user. Existing roles include Admin, User, Op, Viewer, and Public`,
					Args: []model.Arg{{
						Name:        "role",
						Description: `Role of the user. Existing roles include Admin, User, Op, Viewer, and Public`,
					}},
				}, {
					Name:        []string{"-u", "--username"},
					Description: `Username of the user`,
					Args: []model.Arg{{
						Name:        "username",
						Description: `Username of the user`,
					}},
				}},
			}, {
				Name:        []string{"create"},
				Description: `Create a user`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-e", "--email"},
					Description: `Email of the user`,
					Args: []model.Arg{{
						Name:        "email",
						Description: `Email of the user`,
					}},
				}, {
					Name:        []string{"-f", "--firstname"},
					Description: `First name of the user`,
					Args: []model.Arg{{
						Name:        "firstname",
						Description: `First name of the user`,
					}},
				}, {
					Name:        []string{"-l", "--lastname"},
					Description: `Last name of the user`,
					Args: []model.Arg{{
						Name:        "lastname",
						Description: `Last name of the user`,
					}},
				}, {
					Name:        []string{"-p", "--password"},
					Description: `Password of the user, required to create a user without --use-random-password`,
					Args: []model.Arg{{
						Name:        "password",
						Description: `Password of the user, required to create a user without --use-random-password`,
					}},
				}, {
					Name:        []string{"-r", "--role"},
					Description: `Role of the user. Existing roles include Admin, User, Op, Viewer, and Public`,
					Args: []model.Arg{{
						Name:        "role",
						Description: `Role of the user. Existing roles include Admin, User, Op, Viewer, and Public`,
					}},
				}, {
					Name:        []string{"--use-random-password"},
					Description: `Do not prompt for password. Use random string instead. Required to create a user without --password`,
				}, {
					Name:        []string{"-u", "--username"},
					Description: `Username of the user`,
					Args: []model.Arg{{
						Name:        "username",
						Description: `Username of the user`,
					}},
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a user`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-e", "--email"},
					Description: `Email of the user`,
					Args: []model.Arg{{
						Name:        "email",
						Description: `Email of the user`,
					}},
				}, {
					Name:        []string{"-u", "--username"},
					Description: `Username of the user`,
					Args: []model.Arg{{
						Name:        "username",
						Description: `Username of the user`,
					}},
				}},
			}, {
				Name:        []string{"export"},
				Description: `Export all users`,
				Args: []model.Arg{{
					Name:        "FILEPATH",
					Description: `Export all users to JSON file`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"import"},
				Description: `Import users`,
				Args: []model.Arg{{
					Name: "FILEPATH",
					Description: `Import users from JSON file. Example format::

    [
        {
            "email": "foo@bar.org",
            "firstname": "Jon",
            "lastname": "Doe",
            "roles": ["Public"],
            "username": "jondoe"
        }
    ]`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List users`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"remove-role"},
				Description: `Remove role from a user`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-e", "--email"},
					Description: `Email of the user`,
					Args: []model.Arg{{
						Name:        "email",
						Description: `Email of the user`,
					}},
				}, {
					Name:        []string{"-r", "--role"},
					Description: `Role of the user. Existing roles include Admin, User, Op, Viewer, and Public`,
					Args: []model.Arg{{
						Name:        "role",
						Description: `Role of the user. Existing roles include Admin, User, Op, Viewer, and Public`,
					}},
				}, {
					Name:        []string{"-u", "--username"},
					Description: `Username of the user`,
					Args: []model.Arg{{
						Name:        "username",
						Description: `Username of the user`,
					}},
				}},
			}},
		}, {
			Name:        []string{"variables"},
			Description: `Manage variables`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"delete"},
				Description: `Delete variable`,
				Args: []model.Arg{{
					Name:        "key",
					Description: `Variable key`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"export"},
				Description: `Export all variables`,
				Args: []model.Arg{{
					Name:        "file",
					Description: `Export all variables to JSON file`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get variable`,
				Args: []model.Arg{{
					Name:        "key",
					Description: `Variable key`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-d", "--default"},
					Description: `Default value returned if variable does not exist`,
					Args: []model.Arg{{
						Name:        "VAL",
						Description: `Default value returned if variable does not exist`,
					}},
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Deserialize JSON variable`,
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"import"},
				Description: `Import variables`,
				Args: []model.Arg{{
					Name:        "file",
					Description: `Import variables from JSON file`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List variables`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-o", "--output"},
					Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
					Args: []model.Arg{{
						Name:        "(table, json, yaml, plain)",
						Description: `Output format. Allowed values: json, yaml, plain, table (default: table)`,
						Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`yaml`}}, {Name: []string{`plain`}}},
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Make logging output more verbose`,
				}},
			}, {
				Name:        []string{"set"},
				Description: `Set variable`,
				Args: []model.Arg{{
					Name:        "key",
					Description: `Variable key`,
				}, {
					Name:        "VALUE",
					Description: `Variable value`,
				}},
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Show this help message and exit`,
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Serialize JSON variable`,
				}},
			}},
		}, {
			Name:        []string{"version"},
			Description: `Show the version`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}},
		}, {
			Name:        []string{"webserver"},
			Description: `Start a Airflow webserver instance`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Show this help message and exit`,
			}, {
				Name:        []string{"-A", "--access-logfile"},
				Description: `The logfile to store the webserver access log. Use '-' to print to stderr`,
				Args: []model.Arg{{
					Name:        "access_logfile",
					Description: `The logfile to store the webserver access log. Use '-' to print to stderr`,
				}},
			}, {
				Name:        []string{"-L", "--access-logformat"},
				Description: `The access log format for gunicorn logs`,
				Args: []model.Arg{{
					Name:        "access_logformat",
					Description: `The access log format for gunicorn logs`,
				}},
			}, {
				Name:        []string{"-D", "--daemon"},
				Description: `Daemonize instead of running in the foreground`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Use the server that ships with Flask in debug mode`,
			}, {
				Name:        []string{"-E", "--error-logfile"},
				Description: `The logfile to store the webserver error log. Use '-' to print to stderr`,
				Args: []model.Arg{{
					Name:        "error_logfile",
					Description: `The logfile to store the webserver error log. Use '-' to print to stderr`,
				}},
			}, {
				Name:        []string{"-H", "--hostname"},
				Description: `Set the hostname on which to run the web server`,
				Args: []model.Arg{{
					Name:        "hostname",
					Description: `Set the hostname on which to run the web server`,
				}},
			}, {
				Name:        []string{"-l", "--log-file"},
				Description: `Location of the log file`,
				Args: []model.Arg{{
					Name:        "log_file",
					Description: `Location of the log file`,
				}},
			}, {
				Name:        []string{"--pid"},
				Description: `PID file location`,
				Args: []model.Arg{{
					Name:        "pid",
					Description: `PID file location`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"-p", "--port"},
				Description: `The port on which to run the server`,
				Args: []model.Arg{{
					Name:        "port",
					Description: `The port on which to run the server`,
				}},
			}, {
				Name:        []string{"--ssl-cert"},
				Description: `Path to the SSL certificate for the webserver`,
				Args: []model.Arg{{
					Name:        "ssl_cert",
					Description: `Path to the SSL certificate for the webserver`,
				}},
			}, {
				Name:        []string{"--ssl-key"},
				Description: `Path to the key to use with the SSL certificate`,
				Args: []model.Arg{{
					Name:        "ssl_key",
					Description: `Path to the key to use with the SSL certificate`,
				}},
			}, {
				Name:        []string{"--stderr"},
				Description: `Redirect stderr to this file`,
				Args: []model.Arg{{
					Name:        "stderr",
					Description: `Redirect stderr to this file`,
				}},
			}, {
				Name:        []string{"--stdout"},
				Description: `Redirect stdout to this file`,
				Args: []model.Arg{{
					Name:        "stdout",
					Description: `Redirect stdout to this file`,
				}},
			}, {
				Name:        []string{"-t", "--worker-timeout"},
				Description: `The timeout for waiting on webserver workers`,
				Args: []model.Arg{{
					Name:        "worker_timeout",
					Description: `The timeout for waiting on webserver workers`,
				}},
			}, {
				Name:        []string{"-k", "--workerclass"},
				Description: `The worker class to use for Gunicorn`,
				Args: []model.Arg{{
					Name:        "workerclass",
					Description: `The worker class to use for Gunicorn`,
					Suggestions: []model.Suggestion{{Name: []string{`sync`}}, {Name: []string{`eventlet`}}, {Name: []string{`gevent`}}, {Name: []string{`tornado`}}},
				}},
			}, {
				Name:        []string{"-w", "--workers"},
				Description: `Number of workers to run the webserver on`,
				Args: []model.Arg{{
					Name:        "workers",
					Description: `Number of workers to run the webserver on`,
				}},
			}},
		}},
	}
}
