// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["swc"] = model.Subcommand{
		Name:        []string{"swc"},
		Description: `SWC is a super-fast compiler written in rust; producing widely-supported javascript from modern standards and typescript`,
		Options: []model.Option{{
			Name:        []string{"--filename", "-f"},
			Description: `Filename to use when reading from stdin. This will be used in source maps and errors`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "FILE",
				Description: `Path to the file`,
			}},
		}, {
			Name:        []string{"--config-file"},
			Description: `Path to a .swcrc file to use`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "CONFIG_FILE",
				Description: `Path to a .swcrc file to use`,
			}},
		}, {
			Name:        []string{"--env-name"},
			Description: `The name of the 'env' to use when loading configs and plugins. Defaults to the value of SWC_ENV, or else NODE_ENV, or else development`,
			Args: []model.Arg{{
				Name:        "ENV_NAME",
				Description: `The name of the 'env' to use when loading configs and plugins. Defaults to the value of SWC_ENV, or else NODE_ENV, or else development`,
				Suggestions: []model.Suggestion{{Name: []string{`production`}}, {Name: []string{`development`}}, {Name: []string{`test`}}},
			}},
		}, {
			Name:        []string{"--no-swcrc"},
			Description: `Whether or not to look up .swcrc files`,
		}, {
			Name:        []string{"--ignore"},
			Description: `List of glob paths to not compile`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:        "PATH",
				Description: `A glob path to not compile`,
			}},
		}, {
			Name:        []string{"--only"},
			Description: `List of glob paths to only compile`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:        "PATH",
				Description: `A glob path to only compile`,
			}},
		}, {
			Name:        []string{"--watch", "-w"},
			Description: `Watch for changes and recompile`,
		}, {
			Name:        []string{"--quiet", "-q"},
			Description: `Suppress compilation output`,
		}, {
			Name:        []string{"--source-maps", "-s"},
			Description: `Generate source maps`,
			Args: []model.Arg{{
				Name:        "SOURCE_MAP",
				Description: `Source map type`,
				Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}, {Name: []string{`inline`}}, {Name: []string{`both`}}},
			}},
		}, {
			Name:        []string{"--source-map-target"},
			Description: `Define the file for the source map`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "FILE",
				Description: `The file for the source map`,
			}},
		}, {
			Name:        []string{"--source-file-name"},
			Description: `Set sources[0] on returned source map`,
		}, {
			Name:        []string{"--source-root"},
			Description: `The root from which all sources are relative`,
		}, {
			Name:        []string{"--out-file", "-o"},
			Description: `Compile all input files into a single file`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "OUTPUT_FILE",
				Description: `The output file`,
			}},
		}, {
			Name:        []string{"--out-dir", "-d"},
			Description: `Compile an input directory of modules into an output directory`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "OUTPUT_DIR",
				Description: `The output directory`,
			}},
		}, {
			Name:        []string{"--copy-files", "-D"},
			Description: `When compiling a directory, copy over non-compilable files`,
		}, {
			Name:        []string{"--include-dotfiles"},
			Description: `Include dotfiles when compiling and copying non-compilable files`,
		}, {
			Name:        []string{"--config", "-C"},
			Description: `Override a config from .swcrc file`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "CONFIG_FILE",
				Description: `Path to .swcrc file`,
			}},
		}, {
			Name:        []string{"--sync"},
			Description: `Invoke swc synchronously. Useful for debugging`,
		}, {
			Name:        []string{"--log-watch-compilation"},
			Description: `Log a message when a watched file is successfully compiled`,
		}, {
			Name:        []string{"--extensions"},
			Description: `Log a message when a watched file is successfully compiled`,
		}},
	}
}
