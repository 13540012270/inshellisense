// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["mongosh"] = model.Subcommand{
		Name:        []string{"mongosh"},
		Description: `The MongoDB Shell, mongosh  is a fully functional JavaScript and Node.js 14.x REPL environment for interacting with MongoDB deployments`,
		Args: []model.Arg{{
			Name: "Connection String",
			Suggestions: []model.Suggestion{{
				Name:        []string{`mongodb://localhost:27017`},
				Description: `Default Connection String; Equivalent to running mongosh without any commands`,
			}, {
				Name:        []string{`mongodb+srv://cluster0.example.mongodb.net/sample_geospatial`},
				Description: `Atlas Connection String Example`,
			}},
			IsOptional: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-v", "--version"},
			Description: `View your current mongosh version`,
		}, {
			Name:        []string{"--shell"},
			Description: `Enables the shell interface. If you invoke the mongosh command and specify a JavaScript file as an argument, or use --eval to specify JavaScript on the command line, the --shell option provides the user with a shell prompt after the file finishes executing`,
		}, {
			Name:        []string{"--eval"},
			Description: `Evaluates a JavaScript expression that is specified as an argument. mongosh does not load its own environment when evaluating code. As a result many options of the shell environment are not available. The result of evaluating a JavaScript argument is printed to your command line`,
			Args: []model.Arg{{
				Name: "javascript",
			}},
		}, {
			Name:        []string{"--help", "-h"},
			Description: `Returns information on the options and use of the MongoDB Shell`,
		}, {
			Name:        []string{"--authenticationDatabase"},
			Description: `Specifies the authentication database where the specified --username has been created. See Authentication Database`,
			Args: []model.Arg{{
				Name: "dbname",
			}},
		}, {
			Name:        []string{"--gssapiHostName"},
			Description: `Specify the hostname of a service using GSSAPI/Kerberos. Only required if the hostname of a machine does not match the hostname resolved by DNS`,
			Args: []model.Arg{{
				Name:        "hostname",
				Description: `This option is available only in MongoDB Enterprise`,
			}},
		}, {
			Name:        []string{"--gssapiServiceName"},
			Description: `Specify the name of the service using GSSAPI/Kerberos. Only required if the service does not use the default name of mongodb`,
			Args: []model.Arg{{
				Name:        "saslServiceName",
				Description: `GssapiServiceName defaults to mongodb for all clients and MongoDB instances. If you change saslServiceName setting on a MongoDB instance, you must set gssapiServiceName to match that setting`,
			}},
		}, {
			Name:        []string{"--password", "-p"},
			Description: `Specifies a password with which to authenticate to a MongoDB database that uses authentication. Use in conjunction with the --username and --authenticationDatabase options`,
			Args: []model.Arg{{
				Name: "password",
			}},
		}, {
			Name:        []string{"--username", "-u"},
			Description: `Specifies a username with which to authenticate to a MongoDB database that uses authentication. Use in conjunction with the --password and --authenticationDatabase options`,
			Args: []model.Arg{{
				Name: "username",
			}},
		}, {
			Name:        []string{"--retryWrites"},
			Description: `Enables retryable writes as the default for sessions in the MongoDB Shell`,
		}, {
			Name:        []string{"--authenticationMechanism"},
			Description: `Specifies the authentication mechanism the MongoDB Shell uses to authenticate to the mongod or mongos`,
			Args: []model.Arg{{
				Name: "authentication mechanism",
				Suggestions: []model.Suggestion{{
					Name:        []string{`SCRAM-SHA-1`},
					Description: `RFC 5802 standard Salted Challenge Response Authentication Mechanism using the SHA-1 hash function`,
				}, {
					Name:        []string{`SCRAM-SHA-256`},
					Description: `RFC 7677 standard Salted Challenge Response Authentication Mechanism using the SHA-256 hash function`,
				}, {
					Name:        []string{`MONGODB-X509`},
					Description: `MongoDB TLS SSL certificate authentication`,
				}, {
					Name:        []string{`GSSAPI (Kerberos)`},
					Description: `External authentication using Kerberos. This mechanism is available only in MongoDB Enterprise`,
				}, {
					Name:        []string{`PLAIN (LDAP SASL)`},
					Description: `External authentication using LDAP. You can also use PLAIN for authenticating in-database users. PLAIN transmits passwords in plain text. This mechanism is available only in MongoDB Enterprise`,
				}},
			}},
		}, {
			Name:        []string{"--nodb"},
			Description: `Prevents the shell from connecting to any database instances`,
		}, {
			Name:        []string{"--norc"},
			Description: `Prevents the shell from sourcing and evaluating ~/.mongoshrc.js on startup`,
		}, {
			Name:        []string{"--quiet"},
			Description: `Skips all messages during startup (such as welcome messages and startup warnings) and goes directly to the prompt`,
		}, {
			Name:        []string{"--verbose"},
			Description: `Increases the verbosity of the shell output during the connection process and when running commands`,
		}, {
			Name:        []string{"--port"},
			Description: `Specifies the port where the mongod or mongos instance is listening. If --port is not specified, the MongoDB Shell attempts to connect to port 27017`,
			Args: []model.Arg{{
				Name: "port",
				Suggestions: []model.Suggestion{{
					Name:        []string{`27017`},
					Description: `Default-port`,
				}},
			}},
		}, {
			Name:        []string{"--tls"},
			Description: `Enables connection to a mongod or mongos that has TLS SSL support enabled`,
		}, {
			Name:        []string{"--tlsAllowInvalidHostnames"},
			Description: `Disables the validation of the hostnames in the certificate presented by the mongod/mongos instance. Allows the MongoDB Shell to connect to MongoDB instances even if the hostname in the server certificates do not match the server's host`,
		}, {
			Name:        []string{"--tlsAllowInvalidCertificates"},
			Description: `Bypasses the validation checks for the certificates presented by the mongod/mongos instance and allows connections to servers that present invalid certificates`,
		}, {
			Name:        []string{"--tlsDisabledProtocols"},
			Description: `Disables the specified TLS protocols`,
			Args: []model.Arg{{
				Name: "protocols",
				Suggestions: []model.Suggestion{{
					Name: []string{`TLS1_0`},
				}, {
					Name: []string{`TLS1_1`},
				}, {
					Name: []string{`TLS1_2`},
				}, {
					Name:        []string{`TLS1_3`},
					Description: `(Starting in version 4.0.4, 3.6.9, 3.4.24)`,
				}},
			}},
		}, {
			Name:        []string{"--tlsCAFile"},
			Description: `Specifies the .pem file that contains the root certificate chain from the Certificate Authority. This file is used to validate the certificate presented by the mongod/mongos instance`,
			Args: []model.Arg{{
				Name:      "filePath",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--tlsCRLFile"},
			Description: `Specifies the .pem file that contains the root certificate chain from the Certificate Authority. This file is used to validate the certificate presented by the mongod/mongos instance`,
			Args: []model.Arg{{
				Name:      "filePath",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--tlsCertificateKeyFile"},
			Description: `Enables connection to a mongod or mongos that has TLS SSL support enabled`,
			Args: []model.Arg{{
				Name:      "filePath",
				Generator: nil, // TODO: port over generator
			}},
		}},
	}
}
