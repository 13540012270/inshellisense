// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["nuxi"] = model.Subcommand{
		Name:        []string{"nuxi"},
		Description: `Nuxt 3 CLI`,
		Options: []model.Option{{
			Name:         []string{"--help"},
			Description:  `Show help`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"info"},
			Description: `The info command logs information about the current or specified Nuxt project`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"init", "create"},
			Description: `The init command initializes a fresh Nuxt project`,
			Args: []model.Arg{{
				Name:        "dir",
				Description: `Name of the install directory`,
			}},
			Options: []model.Option{{
				Name:        []string{"--verbose", "-v"},
				Description: `Log information about the installation process`,
			}, {
				Name:        []string{"--template", "-t"},
				Description: `Specify a Git repository to use as a template`,
			}, {
				Name:        []string{"--force"},
				Description: `Force clone to any existing directory`,
			}, {
				Name:        []string{"--prefer-offline"},
				Description: `Try local cache first to download templates`,
			}, {
				Name:        []string{"--shell"},
				Description: `Open shell in cloned directory (experimental)`,
			}},
		}, {
			Name:        []string{"add", "new"},
			Description: `Generate a entity into your Nuxt application`,
			Args: []model.Arg{{
				Name:        "TEMPLATE",
				Description: `Specify a template of the file to be generated`,
				Suggestions: []model.Suggestion{{
					Name:        []string{`component`},
					Description: `Generate a nuxt component`,
				}, {
					Name:        []string{`composable`},
					Description: `Generate a nuxt composable`,
				}, {
					Name:        []string{`layout`},
					Description: `Generate a nuxt layout`,
				}, {
					Name:        []string{`plugin`},
					Description: `Generate a nuxt plugin`,
				}, {
					Name:        []string{`page`},
					Description: `Generate a nuxt page`,
				}, {
					Name:        []string{`middleware`},
					Description: `Generate a nuxt middleware`,
				}, {
					Name:        []string{`api`},
					Description: `Generate a nuxt api`,
				}},
			}, {
				Name:        "NAME",
				Description: `Specify a name of the file that will be created`,
			}},
			Options: []model.Option{{
				Name:        []string{"--cwd"},
				Description: `The current working directory of the target application`,
			}, {
				Name:        []string{"--force"},
				Description: `Force override file if it already exists`,
			}},
		}, {
			Name:        []string{"analyze"},
			Description: `The analyze command builds Nuxt and analyzes the production bundle (experimental)`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"build"},
			Description: `The build command creates a .output directory with all your application, server and dependencies ready for production`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--dotenv"},
				Description: `Point to another .env file to load, relative to the root directory`,
			}, {
				Name:        []string{"--prerender"},
				Description: `Pre-render every route of your application. (note: This is an experimental flag. The behavior might be changed)`,
			}},
		}, {
			Name:        []string{"dev"},
			Description: `The dev command starts a development server with hot module replacement at http://localhost:3000`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--dotenv"},
				Description: `Point to another .env file to load, relative to the root directory`,
			}, {
				Name:        []string{"--clipboard"},
				Description: `Copy URL to clipboard`,
			}, {
				Name:        []string{"--open", "-o"},
				Description: `Open URL in browser`,
			}, {
				Name:        []string{"--no-clear"},
				Description: `Does not clear the console after startup`,
			}, {
				Name:        []string{"--port", "-p"},
				Description: `Port to listen`,
			}, {
				Name:        []string{"--host", "-h"},
				Description: `Hostname of the server`,
			}, {
				Name:        []string{"--https"},
				Description: `Listen with https protocol with a self-signed certificate by default`,
			}, {
				Name:        []string{"--ssl-cert"},
				Description: `Specify a certificate for https`,
			}, {
				Name:        []string{"--ssl-key"},
				Description: `Specify the key for the https certificate`,
			}},
		}, {
			Name:        []string{"prepare"},
			Description: `The prepare command creates a .nuxt directory in your application and generates ts types`,
		}, {
			Name:        []string{"preview"},
			Description: `The preview command starts a server to preview your Nuxt application after running the build command`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--dotenv"},
				Description: `Point to another .env file to load, relative to the root directory`,
			}},
		}, {
			Name:        []string{"generate"},
			Description: `Build Nuxt and prerender static routes`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"clean", "cleanup"},
			Description: `The cleanup command removes common generated Nuxt files and caches including .nuxt/, .output/, node_modules/.vite and node_modules/.cache`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"test"},
			Description: `Run the test files for your Nuxt application`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--dev"},
				Description: `Run tests in development mode`,
			}, {
				Name:        []string{"--watch"},
				Description: `Actively watch for changes and rerun tests`,
			}},
		}, {
			Name:        []string{"upgrade"},
			Description: `The upgrade command upgrades Nuxt 3 to the latest version`,
			Options: []model.Option{{
				Name:        []string{"--force", "-f"},
				Description: `Removes node_modules and lock files before upgrade`,
			}},
		}, {
			Name:        []string{"typecheck"},
			Description: `The typecheck command runs vue-tsc to check types throughout your app`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "rootDir",
				Description: `The directory of the target application`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"usage"},
			Description: `The usage command shows the usage of the Nuxt CLI`,
		}},
	}
}
