// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["limactl"] = model.Subcommand{
		Name:        []string{"limactl"},
		Description: `Control the Lima(Linux virtual machines)`,
		Options: []model.Option{{
			Name:        []string{"-h", "--help"},
			Description: `Help for limactl`,
		}, {
			Name:        []string{"--debug"},
			Description: `Debug mode`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Version for limactl`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"completion"},
			Description: `Generate the autocompletion script for the specified shell`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for completion`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"bash"},
				Description: `Generate the autocompletion script for bash`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Help for bash`,
				}, {
					Name:        []string{"--debug"},
					Description: `Debug mode`,
				}, {
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"fish"},
				Description: `Generate the autocompletion script for fish`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Help for fish`,
				}, {
					Name:        []string{"--debug"},
					Description: `Debug mode`,
				}, {
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"powershell"},
				Description: `Generate the autocompletion script for powershell`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Help for powershell`,
				}, {
					Name:        []string{"--debug"},
					Description: `Debug mode`,
				}, {
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"zsh"},
				Description: `Generate the autocompletion script for zsh`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Help for zsh`,
				}, {
					Name:        []string{"--debug"},
					Description: `Debug mode`,
				}, {
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}},
		}, {
			Name:        []string{"copy", "cp"},
			Description: `Copy files between host and guest`,
			Args: []model.Arg{{
				Name:       "SOURCE",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}, {
				Name:      "TARGET",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for copy`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}, {
				Name:        []string{"-r", "--recursive"},
				Description: `Copy directories recursively`,
			}},
		}, {
			Name:        []string{"delete", "remove", "rm"},
			Description: `Delete an instance of Lima`,
			Args: []model.Arg{{
				Name:       "INSTANCE",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for delete`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Forcibly kill the processes`,
			}},
		}, {
			Name:        []string{"info"},
			Description: `Show diagnostic information`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for info`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}},
		}, {
			Name:        []string{"list", "ls"},
			Description: `List instances of Lima`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for list`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}, {
				Name:        []string{"--json"},
				Description: `JSONify output`,
			}, {
				Name:        []string{"-q", "--quiet"},
				Description: `Only show names`,
			}},
		}, {
			Name:        []string{"prune"},
			Description: `Prune garbage objects`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for prune`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}},
		}, {
			Name:        []string{"shell"},
			Description: `Lima command is provided as an alias for limactl shell $LIMA_INSTANCE. $LIMA_INSTANCE defaults to "default"`,
			Args: []model.Arg{{
				Name:      "INSTANCE",
				Generator: nil, // TODO: port over generator
			}, {
				Name:       "COMMAND",
				IsOptional: true,
				IsCommand:  true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for shell`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}, {
				Name:        []string{"--workdir"},
				Description: `Working directory`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"show-ssh"},
			Description: `Show the ssh command line`,
			Args: []model.Arg{{
				Name:      "INSTANCE",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for show-ssh`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}, {
				Name:        []string{"-f", "--format"},
				Description: `Format: cmd, args, options, config (default "cmd")`,
				Args: []model.Arg{{
					Name: "string",
					Suggestions: []model.Suggestion{{
						Name:        []string{`cmd`},
						Description: `Full ssh command line`,
					}, {
						Name:        []string{`args`},
						Description: `Similar to the cmd format but omits "ssh" and the destination address`,
					}, {
						Name:        []string{`options`},
						Description: `Ssh option key value pairs`,
					}, {
						Name:        []string{`config`},
						Description: `~/.ssh/config format`,
					}},
				}},
			}},
		}, {
			Name:        []string{"start"},
			Description: `Start an instance of Lima. If the instance does not exist, open an editor for creating new one, with name "default"`,
			Args: []model.Arg{{
				Name:      "NAME|FILE.yaml|URL",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for start`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}, {
				Name:        []string{"--tty"},
				Description: `Enable TUI interactions such as opening an editor, defaults to true when stdout is a terminal (default true)`,
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stop an instance`,
			Args: []model.Arg{{
				Name:      "INSTANCE",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for stop`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Force stop the instance`,
			}},
		}, {
			Name:        []string{"sudoers"},
			Description: `Generate /etc/sudoers.d/lima file for enabling vmnet.framework support. See /usr/local/share/doc/lima/docs/network.md for the usage`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "SUDORSFILE",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for sudoers`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}, {
				Name:        []string{"--check"},
				Description: `Check that the sudoers file is up-to-date with "~/.lima/_config/networks.yaml"`,
			}},
		}, {
			Name:        []string{"validate"},
			Description: `Validate YAML files`,
			Args: []model.Arg{{
				Name:       "FILE.yaml",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Help for validate`,
			}, {
				Name:        []string{"--debug"},
				Description: `Debug mode`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Help provides help for any command in the application`,
			Args: []model.Arg{{
				Name: "command",
				Suggestions: []model.Suggestion{{
					Name:        []string{`completion`},
					Description: `Generate the autocompletion script for the specified shell`,
				}, {
					Name:        []string{`copy`, `cp`},
					Description: `Copy files between host and guest`,
				}, {
					Name:        []string{`delete`, `remove`, `rm`},
					Description: `Delete an instance of Lima`,
				}, {
					Name:        []string{`info`},
					Description: `Show diagnostic information`,
				}, {
					Name:        []string{`list`, `ls`},
					Description: `List instances of Lima`,
				}, {
					Name:        []string{`prune`},
					Description: `Prune garbage objects`,
				}, {
					Name:        []string{`shell`},
					Description: `Lima command is provided as an alias for limactl shell $LIMA_INSTANCE. $LIMA_INSTANCE defaults to "default"`,
				}, {
					Name:        []string{`show-ssh`},
					Description: `Show the ssh command line`,
				}, {
					Name:        []string{`start`},
					Description: `Start an instance of Lima. If the instance does not exist, open an editor for creating new one, with name "default"`,
				}, {
					Name:        []string{`stop`},
					Description: `Stop an instance`,
				}, {
					Name:        []string{`sudoers`},
					Description: `Generate /etc/sudoers.d/lima file for enabling vmnet.framework support. See /usr/local/share/doc/lima/docs/network.md for the usage`,
				}, {
					Name:        []string{`validate`},
					Description: `Validate YAML files`,
				}, {
					Name:        []string{`help`},
					Description: `Help provides help for any command in the application`,
				}},
				IsOptional: true,
			}},
		}},
	}
}
