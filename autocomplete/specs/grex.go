// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["grex"] = model.Subcommand{
		Name:        []string{"grex"},
		Description: `Command-line tool for generating regular expressions from user-provided test cases`,
		Options: []model.Option{{
			Name:        []string{"-d", "--digits"},
			Description: `Converts any Unicode decimal digit to \d`,
		}, {
			Name:        []string{"-D", "--non-digits"},
			Description: `Converts any character which is not a Unicode decimal digit to \D`,
		}, {
			Name:        []string{"-s", "--spaces"},
			Description: `Converts any Unicode whitespace character to \s`,
		}, {
			Name:        []string{"-S", "--non-spaces"},
			Description: `Converts any character which is not a Unicode whitespace character to \S`,
		}, {
			Name:        []string{"-w", "--words"},
			Description: `Converts any Unicode word character to \w`,
		}, {
			Name:        []string{"-W", "--non-words"},
			Description: `Converts any character which is not a Unicode word character to \W`,
		}, {
			Name:        []string{"-r", "--repetitions"},
			Description: `Detects repeated non-overlapping substrings and converts them to {min,max} quantifier notation`,
		}, {
			Name:        []string{"-e", "--escape"},
			Description: `Replaces all non-ASCII characters with unicode escape sequences`,
		}, {
			Name:        []string{"--with-surrogates"},
			Description: `Converts astral code points to surrogate pairs if --escape is set`,
		}, {
			Name:        []string{"-i", "--ignore-case"},
			Description: `Performs case-insensitive matching, letters match both upper and lower case`,
		}, {
			Name:        []string{"-g", "--capture-groups"},
			Description: `Replaces non-capturing groups by capturing ones`,
		}, {
			Name:        []string{"-c", "--colorize"},
			Description: `Provides syntax highlighting for the resulting regular expression`,
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Prints help information`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Prints version information`,
		}, {
			Name:        []string{"-f", "--file"},
			Description: `Reads test cases on separate lines from a file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
			}},
		}, {
			Name:        []string{"--min-repetitions"},
			Description: `Specifies the minimum quantity of substring repetitions to be converted if --repetitions is set [default: 1]`,
			Args: []model.Arg{{
				Name: "QUANTITY",
				Suggestions: []model.Suggestion{{
					Name: []string{`1`},
				}, {
					Name: []string{`2`},
				}, {
					Name: []string{`3`},
				}, {
					Name: []string{`4`},
				}, {
					Name: []string{`5`},
				}, {
					Name: []string{`6`},
				}, {
					Name: []string{`7`},
				}, {
					Name: []string{`8`},
				}, {
					Name: []string{`9`},
				}, {
					Name: []string{`10`},
				}},
			}},
		}, {
			Name:        []string{"--min-substring-length"},
			Description: `Specifies the minimum length a repeated substring must have in order to be converted if --repetitions is set [default: 1]`,
			Args: []model.Arg{{
				Name: "LENGTH",
				Suggestions: []model.Suggestion{{
					Name: []string{`1`},
				}, {
					Name: []string{`2`},
				}, {
					Name: []string{`3`},
				}, {
					Name: []string{`4`},
				}, {
					Name: []string{`5`},
				}, {
					Name: []string{`6`},
				}, {
					Name: []string{`7`},
				}, {
					Name: []string{`8`},
				}, {
					Name: []string{`9`},
				}, {
					Name: []string{`10`},
				}},
			}},
		}},
	}
}
