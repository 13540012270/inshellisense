// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["black"] = model.Subcommand{
		Name:        []string{"black"},
		Description: `Python code formatter`,
		Args: []model.Arg{{
			Templates:  []model.Template{model.TemplateFilepaths},
			Name:       "file or directory",
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"--code", "-c"},
			Description: `Format the code passed in as a string`,
			Args: []model.Arg{{
				Name: "string",
			}},
		}, {
			Name:        []string{"--line-length", "-l"},
			Description: `How many characters per line to allow`,
			Args: []model.Arg{{
				Name: "line length",
			}},
		}, {
			Name:        []string{"--target-version", "-t"},
			Description: `Python versions that should be supported`,
			Args: []model.Arg{{
				Name:        "python version",
				Suggestions: []model.Suggestion{{Name: []string{`py33`}}, {Name: []string{`py34`}}, {Name: []string{`py35`}}, {Name: []string{`py36`}}, {Name: []string{`py37`}}, {Name: []string{`py38`}}, {Name: []string{`py39`}}, {Name: []string{`py310`}}},
			}},
		}, {
			Name:        []string{"--pyi"},
			Description: `Format all input files regardless of file extension`,
		}, {
			Name:        []string{"--ipynb"},
			Description: `Format all input files like Jupyter Notebooks regardless of file extension`,
		}, {
			Name:        []string{"--python-cell-magics"},
			Description: `Add the given magic to the list of known python-magics`,
			Args: []model.Arg{{
				Name:        "python-magic",
				Suggestions: []model.Suggestion{{Name: []string{`python`}}, {Name: []string{`python3`}}, {Name: []string{`timeit`}}, {Name: []string{`prun`}}, {Name: []string{`time`}}, {Name: []string{`pypy`}}, {Name: []string{`capture`}}},
			}},
		}, {
			Name:        []string{"--skip-string-normalization", "-S"},
			Description: `Don't normalize string quotes or prefixes`,
		}, {
			Name:        []string{"--skip-magic-trailing-comma", "-C"},
			Description: `Don't use trailing commas as a reason to split lines`,
		}, {
			Name:        []string{"--preview"},
			Description: `Enable potentially disruptive style changes`,
		}, {
			Name:        []string{"--check"},
			Description: `Don't write the files back, just return the status`,
		}, {
			Name:        []string{"--diff"},
			Description: `Don't write the files back, just output a diff for each file on stdout`,
		}, {
			Name:        []string{"--color"},
			Description: `Show colored diff`,
			ExclusiveOn: []string{"--no-color"},
		}, {
			Name:        []string{"--no-color"},
			Description: `Show uncolored diff`,
			ExclusiveOn: []string{"--color"},
		}, {
			Name:        []string{"--fast"},
			Description: `Skip temporary sanity checks`,
			ExclusiveOn: []string{"--safe"},
		}, {
			Name:        []string{"--safe"},
			Description: `Run temporary sanity checks`,
			ExclusiveOn: []string{"--fast"},
		}, {
			Name:        []string{"--required-version"},
			Description: `Require a specific version of Black`,
			Args: []model.Arg{{
				Name:      "version",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--include"},
			Description: `Regex that matches files and directories that should be included on recursive searches`,
			Args: []model.Arg{{
				Name: "Regex",
			}},
		}, {
			Name:        []string{"--exclude"},
			Description: `Regex that matches files and directories that should be excluded on recursive searches`,
			Args: []model.Arg{{
				Name: "Regex",
			}},
		}, {
			Name:        []string{"--extend-exclude"},
			Description: `Additional exlusions`,
			Args: []model.Arg{{
				Name: "Regex",
			}},
		}, {
			Name:        []string{"--force-exclude"},
			Description: `Exlude matching files and folders even when passed explicitly`,
			Args: []model.Arg{{
				Name: "Regex",
			}},
		}, {
			Name:        []string{"--stdin-filename"},
			Description: `The name of the file when passing it through stdin`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--workers", "-W"},
			Description: `Number of parallel workers`,
			Args: []model.Arg{{
				Name: "integer",
			}},
		}, {
			Name:        []string{"--quiet", "-q"},
			Description: `Don't emit non-error messages to stderr`,
		}, {
			Name:        []string{"--verbose", "-v"},
			Description: `Also emit messages about files that were not changed or were ignored due to exclusion patterns`,
		}, {
			Name:        []string{"--version"},
			Description: `Show the version`,
		}, {
			Name:        []string{"--config"},
			Description: `Read configuration from filepath`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--help", "-h"},
			Description: `Show usage information`,
		}},
	}
}
