// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["ghq"] = model.Subcommand{
		Name:        []string{"ghq"},
		Description: `'ghq' provides a way to organize remote repository clones, like go get does. When you clone a remote repository by ghq get, ghq makes a directory under a specific root directory (by default ~/ghq) using the remote repository URLâ€™s host and path`,
		Options: []model.Option{{
			Name:         []string{"-h", "--help", "h", "help"},
			Description:  `Show help`,
			IsPersistent: true,
			ExclusiveOn:  []string{"--version"},
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Print the version`,
			ExclusiveOn: []string{"--help"},
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"get"},
			Description: `Clone/sync with a remote repository`,
			Args: []model.Arg{{
				Name: "<repository URL>|<project>|<user>/<project>|<host>/<user>/<project>",
			}},
			Options: []model.Option{{
				Name:        []string{"-u", "--update"},
				Description: `Update local repository if cloned already (default: false)`,
			}, {
				Name:        []string{"-p"},
				Description: `Clone with SSH (default: false)`,
			}, {
				Name:        []string{"--shallow"},
				Description: `Do a shallow clone (default: false)`,
			}, {
				Name:        []string{"-l", "--look"},
				Description: `Look after get (default: false)`,
			}, {
				Name:        []string{"--vcs"},
				Description: `Specify vcs backend for cloning`,
				Args: []model.Arg{{
					Name: "vcs",
				}},
			}, {
				Name:        []string{"-s", "--silent"},
				Description: `Clone or update silently (default: false)`,
			}, {
				Name:        []string{"--no-recursive"},
				Description: `Prevent recursive fetching (default: false)`,
			}, {
				Name:        []string{"-b", "--branch"},
				Description: `Specify branch name. This flag implies --single-branch on Git`,
				Args: []model.Arg{{
					Name: "branch",
				}},
			}, {
				Name:        []string{"-P", "--parallel"},
				Description: `Import parallelly (default: false)`,
			}, {
				Name:        []string{"--bare"},
				Description: `Do a bare clone (default: false)`,
			}},
		}, {
			Name:        []string{"list"},
			Description: `List local repositories`,
			Args: []model.Arg{{
				Name:       "query",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-e", "--exact"},
				Description: `Perform an exact match (default: false)`,
			}, {
				Name:        []string{"--vcs"},
				Description: `Specify vcs backend for matching`,
				Args: []model.Arg{{
					Name: "vcs",
				}},
			}, {
				Name:        []string{"-p", "--full-path"},
				Description: `Print full paths (default: false)`,
				ExclusiveOn: []string{"--unique"},
			}, {
				Name:        []string{"--unique"},
				Description: `Print unique subpaths (default: false)`,
				ExclusiveOn: []string{"--full-path"},
			}},
		}, {
			Name:        []string{"root"},
			Description: `Show repositories' root`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Show all roots (default: false)`,
			}},
		}, {
			Name:        []string{"create"},
			Description: `Create a new repository`,
			Args: []model.Arg{{
				Name: "<project>|<user>/<project>|<host>/<user>/<project>",
			}},
			Options: []model.Option{{
				Name:        []string{"--vcs"},
				Description: `Specify vcs backend explicitly`,
				Args: []model.Arg{{
					Name: "vcs",
				}},
			}},
		}},
	}
}
