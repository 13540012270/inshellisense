// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["pipx"] = model.Subcommand{
		Name:        []string{"pipx"},
		Description: `Install and Run Python Applications in Isolated Environments`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for pipx`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"install"},
			Description: `Install a package`,
			Args: []model.Arg{{
				Name:        "package_spec",
				Description: `Package name or pip installation spec`,
			}},
			Options: []model.Option{{
				Name:        []string{"--include-deps"},
				Description: `Include apps of dependent packages`,
			}, {
				Name:        []string{"--force"},
				Description: `Modify existing virtual environment and files in PIPX_BIN_DIR`,
			}, {
				Name:        []string{"--suffix"},
				Description: `Optional suffix for virtual environment and executable names`,
				Args: []model.Arg{{
					Name: "SUFFIX",
				}},
			}, {
				Name:        []string{"--python"},
				Description: `The Python executable used to create the Virtual Environment and run the associated app/apps. Must be v3.6+`,
				Args: []model.Arg{{
					Name: "PYTHON",
				}},
			}, {
				Name:        []string{"--system-site-packages"},
				Description: `Give the virtual environment access to the system site-packages dir`,
			}, {
				Name:        []string{"--index-url", "-i"},
				Description: `Base URL of Python Package Index`,
				Args: []model.Arg{{
					Name: "INDEX_URL",
				}},
			}, {
				Name:        []string{"--editable", "-e"},
				Description: `Install a project in editable mode`,
			}, {
				Name:        []string{"--pip-args"},
				Description: `Arbitrary pip arguments to pass directly to pip install/upgrade commands`,
				Args: []model.Arg{{
					Name: "PIP_ARGS",
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"inject"},
			Description: `Installs packages to an existing pipx-managed virtual environment`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `Name of the existing pipx-managed Virtual Environment to inject into`,
				Generator:   nil, // TODO: port over generator
			}, {
				Name:        "dependencies",
				Description: `The packages to inject into the Virtual Environment--either package name or pip package spec`,
			}},
			Options: []model.Option{{
				Name:        []string{"--include-apps"},
				Description: `Add apps from the injected packages onto your PATH`,
			}, {
				Name:        []string{"--include-deps"},
				Description: `Include apps of dependent packages`,
			}, {
				Name:        []string{"--system-site-packages"},
				Description: `Give the virtual environment access to the system site-packages dir`,
			}, {
				Name:        []string{"--index-url", "-i"},
				Description: `Base URL of Python Package Index`,
				Args: []model.Arg{{
					Name: "INDEX_URL",
				}},
			}, {
				Name:        []string{"--editable", "-e"},
				Description: `Install a project in editable mode`,
			}, {
				Name:        []string{"--pip-args"},
				Description: `Arbitrary pip arguments to pass directly to pip install/upgrade commands`,
				Args: []model.Arg{{
					Name: "PIP_ARGS",
				}},
			}, {
				Name:        []string{"--force", "-f"},
				Description: `Modify existing virtual environment and files in PIPX_BIN_DIR`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"upgrade"},
			Description: `Upgrade a package in a pipx-managed Virtual Environment by running 'pip install --upgrade PACKAGE'`,
			Args: []model.Arg{{
				Name:      "package",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--include-injected"},
				Description: `Also upgrade packages injected into the main app's environment`,
			}, {
				Name:        []string{"--force", "-f"},
				Description: `Modify existing virtual environment and files in PIPX_BIN_DIR`,
			}, {
				Name:        []string{"--system-site-packages"},
				Description: `Give the virtual environment access to the system site-packages dir`,
			}, {
				Name:        []string{"--index-url", "-i"},
				Description: `Base URL of Python Package Index`,
				Args: []model.Arg{{
					Name: "INDEX_URL",
				}},
			}, {
				Name:        []string{"--editable", "-e"},
				Description: `Install a project in editable mode`,
			}, {
				Name:        []string{"--pip-args"},
				Description: `Arbitrary pip arguments to pass directly to pip install/upgrade commands`,
				Args: []model.Arg{{
					Name: "PIP_ARGS",
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"upgrade-all"},
			Description: `Upgrades all packages within their virtual environments by running 'pip install --upgrade PACKAGE'`,
			Options: []model.Option{{
				Name:        []string{"--include-injected"},
				Description: `Also upgrade packages injected into the main app's environment`,
			}, {
				Name:        []string{"--skip"},
				Description: `Skip these packages`,
				Args: []model.Arg{{
					Name:       "packages to skip",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--force", "-f"},
				Description: `Modify existing virtual environment and files in PIPX_BIN_DIR`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"uninstall"},
			Description: `Uninstalls a pipx-managed Virtual Environment by deleting it and any files that point to its apps`,
			Args: []model.Arg{{
				Name:      "package",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"uninstall-all"},
			Description: `Uninstall all pipx-managed packages`,
			Options: []model.Option{{
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"reinstall"},
			Description: `Reinstalls a package`,
			Args: []model.Arg{{
				Name:      "package",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--python"},
				Description: `The Python executable used to recreate the Virtual Environment and run the associated app/apps. Must be v3.6+`,
				Args: []model.Arg{{
					Name: "PYTHON",
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"reinstall-all"},
			Description: `Reinstalls all packages`,
			Options: []model.Option{{
				Name:        []string{"--python"},
				Description: `The Python executable used to recreate the Virtual Environment and run the associated app/apps. Must be v3.6+`,
				Args: []model.Arg{{
					Name: "PYTHON",
				}},
			}, {
				Name:        []string{"--skip"},
				Description: `Skip these packages`,
				Args: []model.Arg{{
					Name:       "packages to skip",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"list"},
			Description: `List packages and apps installed with pipx`,
			Options: []model.Option{{
				Name:        []string{"--include-injected"},
				Description: `Show packages injected into the main app's environment`,
			}, {
				Name:        []string{"--json"},
				Description: `Output rich data in json format`,
			}, {
				Name:        []string{"--short"},
				Description: `List packages only`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"run"},
			Description: `Download the latest version of a package to a temporary virtual environment, then run an app from it`,
			Args: []model.Arg{{
				Name:        "app",
				Description: `App/package name and any arguments to be passed to it`,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--no-cache"},
				Description: `Do not re-use cached virtual environment if it exists`,
			}, {
				Name:        []string{"--pypackages"},
				Description: `Require app to be run from local __pypackages__ directory`,
			}, {
				Name:        []string{"--spec"},
				Description: `The package name or specific installation source passed to pip`,
				Args: []model.Arg{{
					Name: "SPEC",
				}},
			}, {
				Name:        []string{"--python"},
				Description: `The Python version to run package's CLI app with`,
				Args: []model.Arg{{
					Name: "PYTHON",
				}},
			}, {
				Name:        []string{"--system-site-packages"},
				Description: `Give the virtual environment access to the system site-packages dir`,
			}, {
				Name:        []string{"--index-url", "-i"},
				Description: `Base URL of Python Package Index`,
				Args: []model.Arg{{
					Name: "INDEX_URL",
				}},
			}, {
				Name:        []string{"--editable", "-e"},
				Description: `Install a project in editable mode`,
			}, {
				Name:        []string{"--pip-args"},
				Description: `Arbitrary pip arguments to pass directly to pip install/upgrade commands`,
				Args: []model.Arg{{
					Name: "PIP_ARGS",
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"runpip"},
			Description: `Run pip in an existing pipx-managed Virtual Environment`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `Name of the existing pipx-managed Virtual Environment to run pip in`,
			}, {
				Name:        "pipargs",
				Description: `Arguments to forward to pip command`,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--verbose"},
				Description: `Show verbose output`,
			}},
		}, {
			Name:        []string{"ensurepath"},
			Description: `Ensure directory where pipx stores apps is in your PATH environment variable`,
			Options: []model.Option{{
				Name:        []string{"--force", "-f"},
				Description: `Add text to your shell's config file even if it looks like your PATH already contains paths to pipx and pipx-install apps`,
			}},
		}, {
			Name:        []string{"environment"},
			Description: `Print a list of variables used in pipx.constants`,
			Options: []model.Option{{
				Name:        []string{"--value"},
				Description: `Print the value of the variable`,
				Args: []model.Arg{{
					Name: "VARIABLE",
					Suggestions: []model.Suggestion{{
						Name: []string{`PIPX_HOME`},
					}, {
						Name: []string{`PIPX_BIN_DIR`},
					}, {
						Name: []string{`PIPX_SHARED_LIBS`},
					}, {
						Name: []string{`PIPX_LOCAL_VENVS`},
					}, {
						Name: []string{`PIPX_LOG_DIR`},
					}, {
						Name: []string{`PIPX_TRASH_DIR`},
					}, {
						Name: []string{`PIPX_VENV_CACHEDIR`},
					}},
				}},
			}},
		}, {
			Name:        []string{"completions"},
			Description: `Print instructions on enabling shell completions for pipx`,
		}},
	}
}
