// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["nvim"] = model.Subcommand{
		Name:        []string{"nvim"},
		Description: `Hyperextensible Vim-based text editor`,
		Args: []model.Arg{{
			Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
		}},
		Options: []model.Option{{
			Name:        []string{"+"},
			Description: `Start at end of file`,
		}, {
			Name:        []string{"--cmd"},
			Description: `Execute <cmd> before any config`,
			Args: []model.Arg{{
				Name: "cmd",
			}},
		}, {
			Name:        []string{"-c"},
			Description: `Execute <cmd> after config and first file`,
			Args: []model.Arg{{
				Name: "cmd",
			}},
		}, {
			Name:        []string{"-b"},
			Description: `Binary mode`,
		}, {
			Name:        []string{"-d"},
			Description: `Diff mode`,
		}, {
			Name:        []string{"-e", "-E"},
			Description: `Ex mode`,
		}, {
			Name:        []string{"-es", "-Es"},
			Description: `Silent (batch) mode`,
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Print this help message`,
		}, {
			Name:        []string{"-i"},
			Description: `Use this shada file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "shada",
			}},
		}, {
			Name:        []string{"-m"},
			Description: `Modifications (writing files) not allowed`,
		}, {
			Name:        []string{"-M"},
			Description: `Modifications in text not allowed`,
		}, {
			Name:        []string{"-n"},
			Description: `No swap file, use memory only`,
		}, {
			Name:        []string{"-o"},
			Description: `Open N windows (default: one per file)`,
			Args: []model.Arg{{
				Name: "N",
			}},
		}, {
			Name:        []string{"-O"},
			Description: `Open N vertical windows (default: one per file)`,
			Args: []model.Arg{{
				Name: "N",
			}},
		}, {
			Name:        []string{"-p"},
			Description: `Open N tab pages (default: one per file)`,
			Args: []model.Arg{{
				Name: "N",
			}},
		}, {
			Name:        []string{"-L"},
			Description: `List swap files`,
		}, {
			Name:        []string{"-r"},
			Description: `Recover edit state for this file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"-R"},
			Description: `Read-only mode`,
		}, {
			Name:        []string{"-S"},
			Description: `Source <session> after loading the first file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "session",
			}},
		}, {
			Name:        []string{"-s"},
			Description: `Read Normal mode commands from <scriptin>`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "scriptin",
			}},
		}, {
			Name:        []string{"-u"},
			Description: `Use this config file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "config",
			}},
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Print version information`,
		}, {
			Name:        []string{"--api-info"},
			Description: `Write msgpack-encoded API metadata to stdout`,
		}, {
			Name:        []string{"--embed"},
			Description: `Use stdin/stdout as a msgpack-rpc channel`,
		}, {
			Name:        []string{"--headless"},
			Description: `Don't start a user interface`,
		}, {
			Name:        []string{"--listen"},
			Description: `Serve RPC API from this address`,
			Args: []model.Arg{{
				Name: "address",
			}},
		}, {
			Name:        []string{"--noplugin"},
			Description: `Don't load plugins`,
		}, {
			Name:        []string{"--remote", "--remote-subcommand"},
			Description: `Execute commands remotely on a server`,
		}, {
			Name:        []string{"--server"},
			Description: `Specify RPC server to send commands to`,
			Args: []model.Arg{{
				Name: "address",
			}},
		}, {
			Name:        []string{"--startuptime"},
			Description: `Write startup timing messages to <file>`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}},
	}
}
