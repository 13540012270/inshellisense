// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["gcc"] = model.Subcommand{
		Name:        []string{"gcc"},
		Description: `The default compiler for most linux distributions`,
		Options: []model.Option{{
			Name:        []string{"--analyzer-output"},
			Description: `Static analyzer report output format`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				Suggestions: []model.Suggestion{{Name: []string{`html`}}, {Name: []string{`plist`}}, {Name: []string{`plist-multi-file`}}, {Name: []string{`plist-html`}}, {Name: []string{`sarif`}}, {Name: []string{`text`}}},
			}},
		}, {
			Name:        []string{"--analyze"},
			Description: `Run the static analyzer`,
		}, {
			Name:        []string{"-arcmt-migrate-emit-errors"},
			Description: `Emit ARC errors even if the migrator can fix them`,
		}, {
			Name:        []string{"-arcmt-migrate-report-output"},
			Description: `Output path for the plist report`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-B"},
			Description: `Add <dir> to search path for binaries and object files used implicitly`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir",
				Description: `Dir`,
			}},
		}, {
			Name:        []string{"-CC"},
			Description: `Include comments from within macros in preprocessed output`,
		}, {
			Name:        []string{"-cl-denorms-are-zero"},
			Description: `OpenCL only. Allow denormals to be flushed to zero`,
		}, {
			Name:        []string{"-cl-fast-relaxed-math"},
			Description: `OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__`,
		}, {
			Name:        []string{"-cl-finite-math-only"},
			Description: `OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf`,
		}, {
			Name:        []string{"-cl-fp32-correctly-rounded-divide-sqrt"},
			Description: `OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded`,
		}, {
			Name:        []string{"-cl-kernel-arg-info"},
			Description: `OpenCL only. Generate kernel argument metadata`,
		}, {
			Name:        []string{"-cl-mad-enable"},
			Description: `OpenCL only. Allow use of less precise MAD computations in the generated binary`,
		}, {
			Name:        []string{"-cl-no-signed-zeros"},
			Description: `OpenCL only. Allow use of less precise no signed zeros computations in the generated binary`,
		}, {
			Name:        []string{"-cl-opt-disable"},
			Description: `OpenCL only. This option disables all optimizations. By default optimizations are enabled`,
		}, {
			Name:        []string{"-cl-single-precision-constant"},
			Description: `OpenCL only. Treat double precision floating-point constant as single precision constant`,
		}, {
			Name:        []string{"-cl-std"},
			Description: `OpenCL language standard to compile for`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-cl-strict-aliasing"},
			Description: `OpenCL only. This option is added for compatibility with OpenCL 1.0`,
		}, {
			Name:        []string{"-cl-uniform-work-group-size"},
			Description: `OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel`,
		}, {
			Name:        []string{"-cl-unsafe-math-optimizations"},
			Description: `OpenCL only. Allow unsafe floating-point optimizations`,
		}, {
			Name:        []string{"--config"},
			Description: `Specifies configuration file`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"--cuda-compile-host-device"},
			Description: `Compile CUDA code for both host and device (default)`,
		}, {
			Name:        []string{"--cuda-device-only"},
			Description: `Compile CUDA code for device only`,
		}, {
			Name:        []string{"--cuda-host-only"},
			Description: `Compile CUDA code for host only`,
		}, {
			Name:        []string{"--cuda-include-ptx"},
			Description: `Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"--cuda-noopt-device-debug"},
			Description: `Enable device-side debug info generation. Disables ptxas optimizations`,
		}, {
			Name:        []string{"--cuda-path-ignore-env"},
			Description: `Ignore environment variables to detect CUDA installation`,
		}, {
			Name:        []string{"--cuda-path"},
			Description: `CUDA installation path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-cxx-isystem"},
			Description: `Add directory to the C++ SYSTEM include search path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-C"},
			Description: `Include comments in preprocessed output`,
		}, {
			Name:        []string{"-c"},
			Description: `Only run preprocess, compile, and assemble steps`,
		}, {
			Name:        []string{"-dD"},
			Description: `Print macro definitions in -E mode in addition to normal output`,
		}, {
			Name:        []string{"-dependency-dot"},
			Description: `Filename to write DOT-formatted header dependencies to`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-dependency-file"},
			Description: `Filename (or -) to write dependency output to`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "value",
				Description: `Value`,
				Suggestions: []model.Suggestion{{Name: []string{`-`}}},
			}},
		}, {
			Name:        []string{"-dI"},
			Description: `Print include directives in -E mode in addition to normal output`,
		}, {
			Name:        []string{"-dM"},
			Description: `Print macro definitions in -E mode instead of normal output`,
		}, {
			Name:        []string{"-D"},
			Description: `Define <macro> to <value> (or 1 if <value> omitted)`,
			Args: []model.Arg{{
				Name:        "macro>=<value",
				Description: `Macro>=<value`,
			}},
		}, {
			Name:        []string{"-emit-ast"},
			Description: `Emit Clang AST files for source inputs`,
		}, {
			Name:        []string{"-emit-interface-stubs"},
			Description: `Generate Interface Stub Files`,
		}, {
			Name:        []string{"-emit-llvm"},
			Description: `Use the LLVM representation for assembler and object files`,
		}, {
			Name:        []string{"-emit-merged-ifs"},
			Description: `Generate Interface Stub Files, emit merged text not binary`,
		}, {
			Name:        []string{"--emit-static-lib"},
			Description: `Enable linker job to emit a static library`,
		}, {
			Name:        []string{"-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang"},
			Description: `Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark`,
		}, {
			Name:        []string{"-E"},
			Description: `Only run the preprocessor`,
		}, {
			Name:        []string{"-fAAPCSBitfieldLoad"},
			Description: `Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only)`,
		}, {
			Name:        []string{"-faddrsig"},
			Description: `Emit an address-significance table`,
		}, {
			Name:        []string{"-faligned-allocation"},
			Description: `Enable C++17 aligned allocation functions`,
		}, {
			Name:        []string{"-fallow-editor-placeholders"},
			Description: `Treat editor placeholders as valid source code`,
		}, {
			Name:        []string{"-fansi-escape-codes"},
			Description: `Use ANSI escape codes for diagnostics`,
		}, {
			Name:        []string{"-fapinotes-cache-path"},
			Description: `Does nothing; API notes are no longer cached separately from modules`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-fapinotes-modules"},
			Description: `Enable module-based external API notes support`,
		}, {
			Name:        []string{"-fapinotes-swift-version"},
			Description: `Specify the Swift version to use when filtering API notes`,
			Args: []model.Arg{{
				Name:        "version",
				Description: `Version`,
			}},
		}, {
			Name:        []string{"-fapinotes"},
			Description: `Enable external API notes support`,
		}, {
			Name:        []string{"-fapple-kext"},
			Description: `Use Apple's kernel extensions ABI`,
		}, {
			Name:        []string{"-fapple-link-rtlib"},
			Description: `Force linking the clang builtins runtime library`,
		}, {
			Name:        []string{"-fapple-pragma-pack"},
			Description: `Enable Apple gcc-compatible #pragma pack handling`,
		}, {
			Name:        []string{"-fapplication-extension"},
			Description: `Restrict`,
		}, {
			Name:        []string{"-fasm-blocks"},
			Description: ``,
		}, {
			Name:        []string{"-fautolink"},
			Description: ``,
		}, {
			Name:        []string{"-fbasic-block-sections"},
			Description: `Place each function's basic blocks in unique sections (ELF Only) : all | labels | none | list=<file>`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				Suggestions: []model.Suggestion{{Name: []string{`all`}}, {Name: []string{`labels`}}, {Name: []string{`none`}}},
			}},
		}, {
			Name:        []string{"-fblocks"},
			Description: `Enable the 'blocks' language feature`,
		}, {
			Name:        []string{"-fborland-extensions"},
			Description: `Accept non-standard constructs supported by the Borland compiler`,
		}, {
			Name:        []string{"-fbranch-target-identification"},
			Description: `Emit branch target identification instructions for indirect branch destinations`,
		}, {
			Name:        []string{"-fbuild-session-file"},
			Description: `Use the last modification time of <file> as the build session timestamp`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-fbuild-session-timestamp"},
			Description: `Time when the current build session started`,
			Args: []model.Arg{{
				Name:        "time since Epoch in seconds",
				Description: `Time since Epoch in seconds`,
			}},
		}, {
			Name:        []string{"-fbuiltin-module-map"},
			Description: `Load the clang builtins module map file`,
		}, {
			Name:        []string{"-fc++-static-destructors"},
			Description: ``,
		}, {
			Name:        []string{"-fcall-saved-x10"},
			Description: `Make the x10 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcall-saved-x11"},
			Description: `Make the x11 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcall-saved-x12"},
			Description: `Make the x12 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcall-saved-x13"},
			Description: `Make the x13 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcall-saved-x14"},
			Description: `Make the x14 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcall-saved-x15"},
			Description: `Make the x15 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcall-saved-x18"},
			Description: `Make the x18 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcall-saved-x8"},
			Description: `Make the x8 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcall-saved-x9"},
			Description: `Make the x9 register call-saved (AArch64 only)`,
		}, {
			Name:        []string{"-fcaret-diagnostics"},
			Description: ``,
		}, {
			Name:        []string{"-fcf-protection"},
			Description: `Enable cf-protection in 'full' mode`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-fchar8_t"},
			Description: `Enable C++ builtin type char8_t`,
		}, {
			Name:        []string{"-fclang-abi-compat"},
			Description: `Attempt to match the ABI of Clang <version>`,
			Args: []model.Arg{{
				Name:        "version",
				Description: `Version`,
			}},
		}, {
			Name:        []string{"-fcolor-diagnostics"},
			Description: `Enable colors in diagnostics`,
		}, {
			Name:        []string{"-fcomment-block-commands"},
			Description: `Treat each comma separated argument in <arg> as a documentation comment block command`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-fcommon"},
			Description: `Place uninitialized global variables in a common block`,
		}, {
			Name:        []string{"-fcomplete-member-pointers"},
			Description: `Require member pointer base types to be complete if they would be significant under the Microsoft ABI`,
		}, {
			Name:        []string{"-fconvergent-functions"},
			Description: `Assume functions may be convergent`,
		}, {
			Name:        []string{"-fcoroutines-ts"},
			Description: `Enable support for the C++ Coroutines TS`,
		}, {
			Name:        []string{"-fcoverage-mapping"},
			Description: `Generate coverage mapping to enable code coverage analysis`,
		}, {
			Name:        []string{"-fcs-profile-generate"},
			Description: `Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-fcuda-approx-transcendentals"},
			Description: `Use approximate transcendental functions`,
		}, {
			Name:        []string{"-fcuda-flush-denormals-to-zero"},
			Description: `Flush denormal floating point values to zero in CUDA device mode`,
		}, {
			Name:        []string{"-fcuda-short-ptr"},
			Description: `Use 32-bit pointers for accessing const/local/shared address spaces`,
		}, {
			Name:        []string{"-fcxx-exceptions"},
			Description: `Enable C++ exceptions`,
		}, {
			Name:        []string{"-fdata-sections"},
			Description: `Place each data in its own section`,
		}, {
			Name:        []string{"-fdebug-compilation-dir"},
			Description: `The compilation directory to embed in the debug info`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fdebug-default-version"},
			Description: `Default DWARF version to use, if a -g option caused DWARF debug info to be produced`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fdebug-info-for-profiling"},
			Description: `Emit extra debug info to make sample profile more accurate`,
		}, {
			Name:        []string{"-fdebug-macro"},
			Description: `Emit macro debug information`,
		}, {
			Name:        []string{"-fdebug-prefix-map"},
			Description: `Remap file source paths in debug info`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fdebug-ranges-base-address"},
			Description: `Use DWARF base address selection entries in .debug_ranges`,
		}, {
			Name:        []string{"-fdebug-types-section"},
			Description: `Place debug types in their own section (ELF Only)`,
		}, {
			Name:        []string{"-fdeclspec"},
			Description: `Allow __declspec as a keyword`,
		}, {
			Name:        []string{"-fdelayed-template-parsing"},
			Description: `Parse templated function definitions at the end of the translation unit`,
		}, {
			Name:        []string{"-fdelete-null-pointer-checks"},
			Description: `Treat usage of null pointers as undefined behavior (default)`,
		}, {
			Name:        []string{"-fdiagnostics-absolute-paths"},
			Description: `Print absolute paths in diagnostics`,
		}, {
			Name:        []string{"-fdiagnostics-hotness-threshold"},
			Description: `Prevent optimization remarks from being output if they do not have at least this profile count`,
			Args: []model.Arg{{
				Name:        "number",
				Description: `Number`,
			}},
		}, {
			Name:        []string{"-fdiagnostics-parseable-fixits"},
			Description: `Print fix-its in machine parseable form`,
		}, {
			Name:        []string{"-fdiagnostics-print-source-range-info"},
			Description: `Print source range spans in numeric form`,
		}, {
			Name:        []string{"-fdiagnostics-show-hotness"},
			Description: `Enable profile hotness information in diagnostic line`,
		}, {
			Name:        []string{"-fdiagnostics-show-note-include-stack"},
			Description: `Display include stacks for diagnostic notes`,
		}, {
			Name:        []string{"-fdiagnostics-show-option"},
			Description: `Print option name with mappable diagnostics`,
		}, {
			Name:        []string{"-fdiagnostics-show-template-tree"},
			Description: `Print a template comparison tree for differing templates`,
		}, {
			Name:        []string{"-fdigraphs"},
			Description: `Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)`,
		}, {
			Name:        []string{"-fdiscard-value-names"},
			Description: `Discard value names in LLVM IR`,
		}, {
			Name:        []string{"-fdollars-in-identifiers"},
			Description: `Allow '$' in identifiers`,
		}, {
			Name:        []string{"-fdouble-square-bracket-attributes"},
			Description: `Enable '[[]]' attributes in all C and C++ language modes`,
		}, {
			Name:        []string{"-fdwarf-directory-asm"},
			Description: ``,
		}, {
			Name:        []string{"-fdwarf-exceptions"},
			Description: `Use DWARF style exceptions`,
		}, {
			Name:        []string{"-fembed-bitcode-marker"},
			Description: `Embed placeholder LLVM IR data as a marker`,
		}, {
			Name:        []string{"-fembed-bitcode"},
			Description: `Embed LLVM bitcode (option: off, all, bitcode, marker)`,
			Args: []model.Arg{{
				Name:        "option",
				Description: `Option`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-femit-all-decls"},
			Description: `Emit all declarations, even if unused`,
		}, {
			Name:        []string{"-femulated-tls"},
			Description: `Use emutls functions to access thread_local variables`,
		}, {
			Name:        []string{"-fenable-globaldse"},
			Description: `Enable experimental global dead store elimination`,
		}, {
			Name:        []string{"-fenable-matrix"},
			Description: `Enable matrix data type and related builtin functions`,
		}, {
			Name:        []string{"-fexceptions"},
			Description: `Enable support for exception handling`,
		}, {
			Name:        []string{"-fexperimental-new-constant-interpreter"},
			Description: `Enable the experimental new constant interpreter`,
		}, {
			Name:        []string{"-fexperimental-new-pass-manager"},
			Description: `Enables an experimental new pass manager in LLVM`,
		}, {
			Name:        []string{"-fexperimental-relative-c++-abi-vtables"},
			Description: `Use the experimental C++ class ABI for classes with virtual tables`,
		}, {
			Name:        []string{"-fexperimental-strict-floating-point"},
			Description: `Enables experimental strict floating point in LLVM`,
		}, {
			Name:        []string{"-ffast-math"},
			Description: `Allow aggressive, lossy floating-point optimizations`,
		}, {
			Name:        []string{"-ffile-prefix-map"},
			Description: `Remap file source paths in debug info and predefined preprocessor macros`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-ffine-grained-bitfield-accesses"},
			Description: `Use separate accesses for consecutive bitfield runs with legal widths and alignments`,
		}, {
			Name:        []string{"-ffixed-point"},
			Description: `Enable fixed point types`,
		}, {
			Name:        []string{"-ffixed-r19"},
			Description: `Reserve register r19 (Hexagon only)`,
		}, {
			Name:        []string{"-ffixed-r9"},
			Description: `Reserve the r9 register (ARM only)`,
		}, {
			Name:        []string{"-ffixed-x10"},
			Description: `Reserve the x10 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x11"},
			Description: `Reserve the x11 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x12"},
			Description: `Reserve the x12 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x13"},
			Description: `Reserve the x13 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x14"},
			Description: `Reserve the x14 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x15"},
			Description: `Reserve the x15 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x16"},
			Description: `Reserve the x16 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x17"},
			Description: `Reserve the x17 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x18"},
			Description: `Reserve the x18 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x19"},
			Description: `Reserve the x19 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x1"},
			Description: `Reserve the x1 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x20"},
			Description: `Reserve the x20 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x21"},
			Description: `Reserve the x21 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x22"},
			Description: `Reserve the x22 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x23"},
			Description: `Reserve the x23 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x24"},
			Description: `Reserve the x24 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x25"},
			Description: `Reserve the x25 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x26"},
			Description: `Reserve the x26 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x27"},
			Description: `Reserve the x27 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x28"},
			Description: `Reserve the x28 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x29"},
			Description: `Reserve the x29 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x2"},
			Description: `Reserve the x2 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x30"},
			Description: `Reserve the x30 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x31"},
			Description: `Reserve the x31 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x3"},
			Description: `Reserve the x3 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x4"},
			Description: `Reserve the x4 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x5"},
			Description: `Reserve the x5 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x6"},
			Description: `Reserve the x6 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x7"},
			Description: `Reserve the x7 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x8"},
			Description: `Reserve the x8 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-ffixed-x9"},
			Description: `Reserve the x9 register (AArch64/RISC-V only)`,
		}, {
			Name:        []string{"-fforce-dwarf-frame"},
			Description: `Always emit a debug frame section`,
		}, {
			Name:        []string{"-fforce-emit-vtables"},
			Description: `Emits more virtual tables to improve devirtualization`,
		}, {
			Name:        []string{"-fforce-enable-int128"},
			Description: `Enable support for int128_t type`,
		}, {
			Name:        []string{"-ffp-contract"},
			Description: `Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma) | off (never fuse). Default is 'fast' for CUDA/HIP and 'on' otherwise`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				Suggestions: []model.Suggestion{{Name: []string{`fast`}}, {Name: []string{`on`}}, {Name: []string{`off`}}},
			}},
		}, {
			Name:        []string{"-ffp-exception-behavior"},
			Description: `Specifies the exception behavior of floating-point operations`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-ffp-model"},
			Description: `Controls the semantics of floating-point calculations`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-ffreestanding"},
			Description: `Assert that the compilation takes place in a freestanding environment`,
		}, {
			Name:        []string{"-ffunction-sections"},
			Description: `Place each function in its own section`,
		}, {
			Name:        []string{"-fglobal-isel"},
			Description: `Enables the global instruction selector`,
		}, {
			Name:        []string{"-fgnu-inline-asm"},
			Description: ``,
		}, {
			Name:        []string{"-fgnu-keywords"},
			Description: `Allow GNU-extension keywords regardless of language standard`,
		}, {
			Name:        []string{"-fgnu-runtime"},
			Description: `Generate output compatible with the standard GNU Objective-C runtime`,
		}, {
			Name:        []string{"-fgnu89-inline"},
			Description: `Use the gnu89 inline semantics`,
		}, {
			Name:        []string{"-fgnuc-version"},
			Description: `Sets various macros to claim compatibility with the given GCC version`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fgpu-allow-device-init"},
			Description: `Allow`,
		}, {
			Name:        []string{"-fgpu-rdc"},
			Description: `Generate relocatable device code, also known as separate compilation mode`,
		}, {
			Name:        []string{"-fhip-new-launch-api"},
			Description: `Use new kernel launching API for HIP`,
		}, {
			Name:        []string{"-fignore-exceptions"},
			Description: `Enable support for ignoring exception handling constructs`,
		}, {
			Name:        []string{"-fimplicit-module-maps"},
			Description: `Implicitly search the file system for module map files`,
		}, {
			Name:        []string{"-finline-functions"},
			Description: `Inline suitable functions`,
		}, {
			Name:        []string{"-finline-hint-functions"},
			Description: `Inline`,
		}, {
			Name:        []string{"-finstrument-function-entry-bare"},
			Description: `Instrument function entry only, after inlining, without arguments to the instrumentation call`,
		}, {
			Name:        []string{"-finstrument-functions-after-inlining"},
			Description: `Like -finstrument-functions, but insert the calls after inlining`,
		}, {
			Name:        []string{"-finstrument-functions"},
			Description: `Generate calls to instrument function entry and exit`,
		}, {
			Name:        []string{"-fintegrated-as"},
			Description: `Enable the integrated assembler`,
		}, {
			Name:        []string{"-fintegrated-cc1"},
			Description: `Run cc1 in-process`,
		}, {
			Name:        []string{"-fjump-tables"},
			Description: `Use jump tables for lowering switches`,
		}, {
			Name:        []string{"-fkeep-static-consts"},
			Description: `Keep static const variables if unused`,
		}, {
			Name:        []string{"-flax-vector-conversions"},
			Description: `Enable implicit vector bit-casts`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-flto-jobs"},
			Description: `Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-flto"},
			Description: `Set LTO mode to either 'full' or 'thin'`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				Suggestions: []model.Suggestion{{Name: []string{`full`}}, {Name: []string{`thin`}}},
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-fmacro-prefix-map"},
			Description: `Remap file source paths in predefined preprocessor macros`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fmath-errno"},
			Description: `Require math functions to indicate errors by setting errno`,
		}, {
			Name:        []string{"-fmax-tokens"},
			Description: `Max total number of preprocessed tokens for -Wmax-tokens`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fmax-type-align"},
			Description: `Specify the maximum alignment to enforce on pointers lacking an explicit alignment`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fmerge-all-constants"},
			Description: `Allow merging of constants`,
		}, {
			Name:        []string{"-fmessage-length"},
			Description: `Format message diagnostics so that they fit within N columns`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fmodule-file"},
			Description: `Specify the mapping of module name to precompiled module file, or load a module file if name is omitted`,
			Args: []model.Arg{{
				Name:        "<name",
				Description: `<name`,
			}},
		}, {
			Name:        []string{"-fmodule-map-file"},
			Description: `Load this module map file`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-fmodule-name"},
			Description: `Specify the name of the module to build`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Name`,
			}},
		}, {
			Name:        []string{"-fmodules-cache-path"},
			Description: `Specify the module cache path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-fmodules-decluse"},
			Description: `Require declaration of modules used within a module`,
		}, {
			Name:        []string{"-fmodules-disable-diagnostic-validation"},
			Description: `Disable validation of the diagnostic options when loading the module`,
		}, {
			Name:        []string{"-fmodules-ignore-macro"},
			Description: `Ignore the definition of the given macro when building and loading modules`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fmodules-prune-after"},
			Description: `Specify the interval (in seconds) after which a module file will be considered unused`,
			Args: []model.Arg{{
				Name:        "seconds",
				Description: `Seconds`,
			}},
		}, {
			Name:        []string{"-fmodules-prune-interval"},
			Description: `Specify the interval (in seconds) between attempts to prune the module cache`,
			Args: []model.Arg{{
				Name:        "seconds",
				Description: `Seconds`,
			}},
		}, {
			Name:        []string{"-fmodules-search-all"},
			Description: `Search even non-imported modules to resolve references`,
		}, {
			Name:        []string{"-fmodules-strict-decluse"},
			Description: `Like -fmodules-decluse but requires all headers to be in modules`,
		}, {
			Name:        []string{"-fmodules-ts"},
			Description: `Enable support for the C++ Modules TS`,
		}, {
			Name:        []string{"-fmodules-user-build-path"},
			Description: `Specify the module user build path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-fmodules-validate-input-files-content"},
			Description: `Validate PCM input files based on content if mtime differs`,
		}, {
			Name:        []string{"-fmodules-validate-once-per-build-session"},
			Description: `Don't verify input files for the modules if the module has been successfully validated or loaded during this build session`,
		}, {
			Name:        []string{"-fmodules-validate-system-headers"},
			Description: `Validate the system headers that a module depends on when loading the module`,
		}, {
			Name:        []string{"-fmodules"},
			Description: `Enable the 'modules' language feature`,
		}, {
			Name:        []string{"-fms-compatibility-version"},
			Description: `Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fms-compatibility"},
			Description: `Enable full Microsoft Visual C++ compatibility`,
		}, {
			Name:        []string{"-fms-extensions"},
			Description: `Accept some non-standard constructs supported by the Microsoft compiler`,
		}, {
			Name:        []string{"-fmsc-version"},
			Description: `Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fnew-alignment"},
			Description: `Specifies the largest alignment guaranteed by '::operator new(size_t)'`,
			Args: []model.Arg{{
				Name:        "align",
				Description: `Align`,
			}},
		}, {
			Name:        []string{"-fno-access-control"},
			Description: ``,
		}, {
			Name:        []string{"-fno-addrsig"},
			Description: `Don't emit an address-significance table`,
		}, {
			Name:        []string{"-fno-allow-editor-placeholders"},
			Description: ``,
		}, {
			Name:        []string{"-fno-apinotes-modules"},
			Description: `Disable module-based external API notes support`,
		}, {
			Name:        []string{"-fno-apinotes"},
			Description: `Disable external API notes support`,
		}, {
			Name:        []string{"-fno-asm-blocks"},
			Description: ``,
		}, {
			Name:        []string{"-fno-assume-sane-operator-new"},
			Description: `Don't assume that C++'s global operator new can't alias any pointer`,
		}, {
			Name:        []string{"-fno-autolink"},
			Description: `Disable generation of linker directives for automatic library linking`,
		}, {
			Name:        []string{"-fno-blocks"},
			Description: ``,
		}, {
			Name:        []string{"-fno-builtin"},
			Description: `Disable implicit builtin knowledge of functions`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fno-c++-static-destructors"},
			Description: `Disable C++ static destructor registration`,
		}, {
			Name:        []string{"-fno-caret-diagnostics"},
			Description: ``,
		}, {
			Name:        []string{"-fno-char8_t"},
			Description: `Disable C++ builtin type char8_t`,
		}, {
			Name:        []string{"-fno-color-diagnostics"},
			Description: `Disable colors in diagnostics`,
		}, {
			Name:        []string{"-fno-common"},
			Description: `Compile common globals like normal definitions`,
		}, {
			Name:        []string{"-fno-complete-member-pointers"},
			Description: `Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI`,
		}, {
			Name:        []string{"-fno-constant-cfstrings"},
			Description: `Disable`,
		}, {
			Name:        []string{"-fno-constant-nsarray-literals"},
			Description: `Disable creation of CodeFoundation-type constant initializer "NSArray"s from array literals`,
		}, {
			Name:        []string{"-fno-constant-nsdictionary-literals"},
			Description: `Disable creation of CodeFoundation-type constant initializer "NSDictionary"s from dictionary literals`,
		}, {
			Name:        []string{"-fno-constant-nsnumber-literals"},
			Description: `Disable creation of CodeFoundation-type constant initializer "NSNumber"s from number literals`,
		}, {
			Name:        []string{"-fno-coroutines-ts"},
			Description: ``,
		}, {
			Name:        []string{"-fno-coverage-mapping"},
			Description: `Disable code coverage analysis`,
		}, {
			Name:        []string{"-fno-crash-diagnostics"},
			Description: `Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash`,
		}, {
			Name:        []string{"-fno-cuda-approx-transcendentals"},
			Description: `Don't use approximate transcendental functions`,
		}, {
			Name:        []string{"-fno-cuda-short-ptr"},
			Description: ``,
		}, {
			Name:        []string{"-fno-cxx-exceptions"},
			Description: ``,
		}, {
			Name:        []string{"-fno-data-sections"},
			Description: ``,
		}, {
			Name:        []string{"-fno-debug-info-for-profiling"},
			Description: ``,
		}, {
			Name:        []string{"-fno-debug-macro"},
			Description: `Do not emit macro debug information`,
		}, {
			Name:        []string{"-fno-debug-ranges-base-address"},
			Description: ``,
		}, {
			Name:        []string{"-fno-declspec"},
			Description: `Disallow __declspec as a keyword`,
		}, {
			Name:        []string{"-fno-delayed-template-parsing"},
			Description: `Disable delayed template parsing`,
		}, {
			Name:        []string{"-fno-delete-null-pointer-checks"},
			Description: `Do not treat usage of null pointers as undefined behavior`,
		}, {
			Name:        []string{"-fno-diagnostics-fixit-info"},
			Description: `Do not include fixit information in diagnostics`,
		}, {
			Name:        []string{"-fno-digraphs"},
			Description: `Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'`,
		}, {
			Name:        []string{"-fno-discard-value-names"},
			Description: `Do not discard value names in LLVM IR`,
		}, {
			Name:        []string{"-fno-dollars-in-identifiers"},
			Description: `Disallow '$' in identifiers`,
		}, {
			Name:        []string{"-fno-double-square-bracket-attributes"},
			Description: `Disable '[[]]' attributes in all C and C++ language modes`,
		}, {
			Name:        []string{"-fno-dwarf-directory-asm"},
			Description: ``,
		}, {
			Name:        []string{"-fno-elide-constructors"},
			Description: `Disable`,
		}, {
			Name:        []string{"-fno-elide-type"},
			Description: `Do not elide types when printing diagnostics`,
		}, {
			Name:        []string{"-fno-exceptions"},
			Description: `Disable support for exception handling`,
		}, {
			Name:        []string{"-fno-experimental-new-pass-manager"},
			Description: `Disables an experimental new pass manager in LLVM`,
		}, {
			Name:        []string{"-fno-experimental-relative-c++-abi-vtables"},
			Description: `Do not use the experimental C++ class ABI for classes with virtual tables`,
		}, {
			Name:        []string{"-fno-fast-math"},
			Description: ``,
		}, {
			Name:        []string{"-fno-fine-grained-bitfield-accesses"},
			Description: `Use large-integer access for consecutive bitfield runs`,
		}, {
			Name:        []string{"-fno-fixed-point"},
			Description: `Disable fixed point types`,
		}, {
			Name:        []string{"-fno-force-dwarf-frame"},
			Description: ``,
		}, {
			Name:        []string{"-fno-force-emit-vtables"},
			Description: ``,
		}, {
			Name:        []string{"-fno-force-enable-int128"},
			Description: `Disable support for int128_t type`,
		}, {
			Name:        []string{"-fno-function-sections"},
			Description: ``,
		}, {
			Name:        []string{"-fno-global-isel"},
			Description: `Disables the global instruction selector`,
		}, {
			Name:        []string{"-fno-gnu-inline-asm"},
			Description: `Disable GNU style inline asm`,
		}, {
			Name:        []string{"-fno-gnu89-inline"},
			Description: ``,
		}, {
			Name:        []string{"-fno-gpu-allow-device-init"},
			Description: `Don't allow device side init function in HIP`,
		}, {
			Name:        []string{"-fno-gpu-rdc"},
			Description: ``,
		}, {
			Name:        []string{"-fno-hip-new-launch-api"},
			Description: `Don't`,
		}, {
			Name:        []string{"-fno-integrated-as"},
			Description: `Disable the integrated assembler`,
		}, {
			Name:        []string{"-fno-integrated-cc1"},
			Description: `Spawn a separate process for each cc1`,
		}, {
			Name:        []string{"-fno-jump-tables"},
			Description: `Do not use jump tables for lowering switches`,
		}, {
			Name:        []string{"-fno-keep-static-consts"},
			Description: `Don't`,
		}, {
			Name:        []string{"-fno-lto"},
			Description: `Disable LTO mode (default)`,
		}, {
			Name:        []string{"-fno-math-errno"},
			Description: ``,
		}, {
			Name:        []string{"-fno-merge-all-constants"},
			Description: `Disallow merging of constants`,
		}, {
			Name:        []string{"-fno-no-access-control"},
			Description: `Disable C++ access control`,
		}, {
			Name:        []string{"-fno-objc-infer-related-result-type"},
			Description: `Do not infer Objective-C related result type based on method family`,
		}, {
			Name:        []string{"-fno-operator-names"},
			Description: `Do not treat C++ operator name keywords as synonyms for operators`,
		}, {
			Name:        []string{"-fno-pch-codegen"},
			Description: `Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH`,
		}, {
			Name:        []string{"-fno-pch-debuginfo"},
			Description: `Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere`,
		}, {
			Name:        []string{"-fno-plt"},
			Description: `Use GOT indirection instead of PLT to make external function calls (x86 only)`,
		}, {
			Name:        []string{"-fno-preserve-as-comments"},
			Description: `Do not preserve comments in inline assembly`,
		}, {
			Name:        []string{"-fno-profile-generate"},
			Description: `Disable generation of profile instrumentation`,
		}, {
			Name:        []string{"-fno-profile-instr-generate"},
			Description: `Disable generation of profile instrumentation`,
		}, {
			Name:        []string{"-fno-profile-instr-use"},
			Description: `Disable using instrumentation data for profile-guided optimization`,
		}, {
			Name:        []string{"-fno-ptrauth-abi-version"},
			Description: `Disable Pointer Authentication ABI versioning`,
		}, {
			Name:        []string{"-fno-ptrauth-kernel-abi-version"},
			Description: `Disable Pointer Authentication kernel ABI versioning`,
		}, {
			Name:        []string{"-fno-register-global-dtors-with-atexit"},
			Description: `Don't use atexit or __cxa_atexit to register global destructors`,
		}, {
			Name:        []string{"-fno-reroll-loops"},
			Description: ``,
		}, {
			Name:        []string{"-fno-rewrite-imports"},
			Description: ``,
		}, {
			Name:        []string{"-fno-rewrite-includes"},
			Description: ``,
		}, {
			Name:        []string{"-fno-ropi"},
			Description: ``,
		}, {
			Name:        []string{"-fno-rtlib-add-rpath"},
			Description: `Do not add -rpath with architecture-specific resource directory to the linker flags`,
		}, {
			Name:        []string{"-fno-rtti-data"},
			Description: `Disable generation of RTTI data`,
		}, {
			Name:        []string{"-fno-rtti"},
			Description: `Disable generation of rtti information`,
		}, {
			Name:        []string{"-fno-rwpi"},
			Description: ``,
		}, {
			Name:        []string{"-fno-sanitize-address-poison-custom-array-cookie"},
			Description: `Disable poisoning array cookies when using custom operator new[] in AddressSanitizer`,
		}, {
			Name:        []string{"-fno-sanitize-address-use-after-scope"},
			Description: `Disable use-after-scope detection in AddressSanitizer`,
		}, {
			Name:        []string{"-fno-sanitize-address-use-odr-indicator"},
			Description: `Disable ODR indicator globals`,
		}, {
			Name:        []string{"-fno-sanitize-blacklist"},
			Description: `Don't`,
		}, {
			Name:        []string{"-fno-sanitize-cfi-canonical-jump-tables"},
			Description: `Do not make the jump table addresses canonical in the symbol table`,
		}, {
			Name:        []string{"-fno-sanitize-cfi-cross-dso"},
			Description: `Disable control flow integrity (CFI) checks for cross-DSO calls`,
		}, {
			Name:        []string{"-fno-sanitize-coverage"},
			Description: `Disable specified features of coverage instrumentation for Sanitizers`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fno-sanitize-memory-track-origins"},
			Description: `Disable origins tracking in MemorySanitizer`,
		}, {
			Name:        []string{"-fno-sanitize-memory-use-after-dtor"},
			Description: `Disable use-after-destroy detection in MemorySanitizer`,
		}, {
			Name:        []string{"-fno-sanitize-recover"},
			Description: `Disable recovery for specified sanitizers`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fno-sanitize-stats"},
			Description: `Disable sanitizer statistics gathering`,
		}, {
			Name:        []string{"-fno-sanitize-thread-atomics"},
			Description: `Disable atomic operations instrumentation in ThreadSanitizer`,
		}, {
			Name:        []string{"-fno-sanitize-thread-func-entry-exit"},
			Description: `Disable function entry/exit instrumentation in ThreadSanitizer`,
		}, {
			Name:        []string{"-fno-sanitize-thread-memory-access"},
			Description: `Disable memory access instrumentation in ThreadSanitizer`,
		}, {
			Name:        []string{"-fno-sanitize-trap"},
			Description: `Disable trapping for specified sanitizers`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-fno-short-wchar"},
			Description: `Force wchar_t to be an unsigned int`,
		}, {
			Name:        []string{"-fno-show-column"},
			Description: `Do not include column number on diagnostics`,
		}, {
			Name:        []string{"-fno-show-source-location"},
			Description: `Do not include source location information with diagnostics`,
		}, {
			Name:        []string{"-fno-signed-char"},
			Description: `Char is unsigned`,
		}, {
			Name:        []string{"-fno-signed-zeros"},
			Description: `Allow optimizations that ignore the sign of floating point zeros`,
		}, {
			Name:        []string{"-fno-spell-checking"},
			Description: `Disable spell-checking`,
		}, {
			Name:        []string{"-fno-split-lto-unit"},
			Description: ``,
		}, {
			Name:        []string{"-fno-stack-check"},
			Description: `Disable stack checking`,
		}, {
			Name:        []string{"-fno-stack-clash-protection"},
			Description: `Disable stack clash protection`,
		}, {
			Name:        []string{"-fno-stack-protector"},
			Description: `Disable the use of stack protectors`,
		}, {
			Name:        []string{"-fno-stack-size-section"},
			Description: ``,
		}, {
			Name:        []string{"-fno-standalone-debug"},
			Description: `Limit debug information produced to reduce size of debug binary`,
		}, {
			Name:        []string{"-fno-strict-float-cast-overflow"},
			Description: `Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions`,
		}, {
			Name:        []string{"-fno-strict-return"},
			Description: `Don't treat control flow paths that fall off the end of a non-void function as unreachable`,
		}, {
			Name:        []string{"-fno-sycl"},
			Description: `Disable SYCL kernels compilation for device`,
		}, {
			Name:        []string{"-fno-temp-file"},
			Description: `Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes`,
		}, {
			Name:        []string{"-fno-threadsafe-statics"},
			Description: `Do`,
		}, {
			Name:        []string{"-fno-trigraphs"},
			Description: `Do not process trigraph sequences`,
		}, {
			Name:        []string{"-fno-unique-basic-block-section-names"},
			Description: ``,
		}, {
			Name:        []string{"-fno-unique-internal-linkage-names"},
			Description: ``,
		}, {
			Name:        []string{"-fno-unique-section-names"},
			Description: `Don't use unique names for text and data sections`,
		}, {
			Name:        []string{"-fno-unroll-loops"},
			Description: `Turn off loop unroller`,
		}, {
			Name:        []string{"-fno-use-cxa-atexit"},
			Description: `Don't use __cxa_atexit for calling destructors`,
		}, {
			Name:        []string{"-fno-use-init-array"},
			Description: `Use .ctors/.dtors instead of .init_array/.fini_array`,
		}, {
			Name:        []string{"-fno-use-line-directives"},
			Description: ``,
		}, {
			Name:        []string{"-fno-virtual-function-elimination"},
			Description: ``,
		}, {
			Name:        []string{"-fno-visibility-inlines-hidden-static-local-var"},
			Description: `Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)`,
		}, {
			Name:        []string{"-fno-whole-program-vtables"},
			Description: ``,
		}, {
			Name:        []string{"-fno-xray-always-emit-customevents"},
			Description: ``,
		}, {
			Name:        []string{"-fno-xray-always-emit-typedevents"},
			Description: ``,
		}, {
			Name:        []string{"-fno-xray-function-index"},
			Description: `Omit function index section at the expense of single-function patching performance`,
		}, {
			Name:        []string{"-fno-xray-ignore-loops"},
			Description: ``,
		}, {
			Name:        []string{"-fno-xray-instrument"},
			Description: ``,
		}, {
			Name:        []string{"-fno-zero-initialized-in-bss"},
			Description: `Don't place zero initialized data in BSS`,
		}, {
			Name:        []string{"-fno-zvector"},
			Description: ``,
		}, {
			Name:        []string{"-fobjc-arc-exceptions"},
			Description: `Use EH-safe code when synthesizing retains and releases in -fobjc-arc`,
		}, {
			Name:        []string{"-fobjc-arc"},
			Description: `Synthesize retain and release calls for Objective-C pointers`,
		}, {
			Name:        []string{"-fobjc-exceptions"},
			Description: `Enable Objective-C exceptions`,
		}, {
			Name:        []string{"-fobjc-relative-method-lists"},
			Description: `Enable relative method lists`,
		}, {
			Name:        []string{"-fobjc-runtime"},
			Description: `Specify the target Objective-C runtime kind and version`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fobjc-weak"},
			Description: `Enable ARC-style weak references in Objective-C`,
		}, {
			Name:        []string{"-fopenmp-simd"},
			Description: `Emit OpenMP code only for SIMD-based constructs`,
		}, {
			Name:        []string{"-fopenmp-targets"},
			Description: `Specify comma-separated list of triples OpenMP offloading targets to be supported`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fopenmp"},
			Description: `Parse OpenMP pragmas and generate parallel code`,
		}, {
			Name:        []string{"-foptimization-record-file"},
			Description: `Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-foptimization-record-passes"},
			Description: `Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)`,
			Args: []model.Arg{{
				Name:        "regex",
				Description: `Regex`,
			}},
		}, {
			Name:        []string{"-forder-file-instrumentation"},
			Description: `Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)`,
		}, {
			Name:        []string{"-fpack-struct"},
			Description: `Specify the default maximum struct packing alignment`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fpascal-strings"},
			Description: `Recognize and construct Pascal-style string literals`,
		}, {
			Name:        []string{"-fpass-plugin"},
			Description: `Load pass plugin from a dynamic shared object file (only with new pass manager)`,
			Args: []model.Arg{{
				Name:        "dsopath",
				Description: `Dsopath`,
			}},
		}, {
			Name:        []string{"-fpatchable-function-entry"},
			Description: `Generate M NOPs before function entry and N-M NOPs after function entry`,
			Args: []model.Arg{{
				Name:        "N,M",
				Description: `N,M`,
			}},
		}, {
			Name:        []string{"-fpcc-struct-return"},
			Description: `Override the default ABI to return all structs on the stack`,
		}, {
			Name:        []string{"-fpch-codegen"},
			Description: `Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH`,
		}, {
			Name:        []string{"-fpch-debuginfo"},
			Description: `Generate debug info for types in an object file built from this PCH and do not generate them elsewhere`,
		}, {
			Name:        []string{"-fpch-instantiate-templates"},
			Description: `Instantiate templates already while building a PCH`,
		}, {
			Name:        []string{"-fpch-validate-input-files-content"},
			Description: `Validate PCH input files based on content if mtime differs`,
		}, {
			Name:        []string{"-fplt"},
			Description: ``,
		}, {
			Name:        []string{"-fplugin"},
			Description: `Load the named plugin (dynamic shared object)`,
			Args: []model.Arg{{
				Name:        "dsopath",
				Description: `Dsopath`,
			}},
		}, {
			Name:        []string{"-fprebuilt-module-path"},
			Description: `Specify the prebuilt module path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-fpreserve-as-comments"},
			Description: ``,
		}, {
			Name:        []string{"-fprofile-exclude-files"},
			Description: `Instrument only functions from files where names don't match all the regexes separated by a semi-colon`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fprofile-filter-files"},
			Description: `Instrument only functions from files where names match any regex separated by a semi-colon`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fprofile-generate"},
			Description: `Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-fprofile-instr-generate"},
			Description: `Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-fprofile-instr-use"},
			Description: `Use instrumentation data for profile-guided optimization`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fprofile-remapping-file"},
			Description: `Use the remappings described in <file> to match the profile data against names in the program`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-fprofile-sample-accurate"},
			Description: `Specifies that the sample profile is accurate`,
		}, {
			Name:        []string{"-fprofile-sample-use"},
			Description: `Enable sample-based profile guided optimizations`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fprofile-use"},
			Description: `Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>`,
			Args: []model.Arg{{
				Name:        "pathname",
				Description: `Pathname`,
			}},
		}, {
			Name:        []string{"-fptrauth-abi-version"},
			Description: `Pointer Authentication ABI version`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fptrauth-auth-traps"},
			Description: `Enable traps on authentication failures`,
		}, {
			Name:        []string{"-fptrauth-block-descriptor-pointers"},
			Description: `Enable signing block descriptors`,
		}, {
			Name:        []string{"-fptrauth-calls"},
			Description: `Enable signing and authentication of all indirect calls`,
		}, {
			Name:        []string{"-fptrauth-function-pointer-type-discrimination"},
			Description: `Enabling type discrimination on C function pointers`,
		}, {
			Name:        []string{"-fptrauth-indirect-gotos"},
			Description: `Enable signing and authentication of indirect goto targets`,
		}, {
			Name:        []string{"-fptrauth-intrinsics"},
			Description: `Enable pointer-authentication intrinsics`,
		}, {
			Name:        []string{"-fptrauth-kernel-abi-version"},
			Description: `Enable Pointer Authentication kernel ABI version`,
		}, {
			Name:        []string{"-fptrauth-objc-isa-masking"},
			Description: `Pre- and post-authentication masking mode of objective-c isa pointers`,
		}, {
			Name:        []string{"-fptrauth-objc-isa-mode"},
			Description: `Authentication mode for ObjC isa field. Full auth if unspecified`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fptrauth-objc-isa"},
			Description: `Enable signing and authentication of Objective-C object's 'isa' field`,
		}, {
			Name:        []string{"-fptrauth-returns"},
			Description: `Enable signing and authentication of return addresses`,
		}, {
			Name:        []string{"-fptrauth-soft"},
			Description: `Enable software lowering of pointer authentication`,
		}, {
			Name:        []string{"-fptrauth-vtable-pointer-address-discrimination"},
			Description: `Enable address discrimination of vtable pointers`,
		}, {
			Name:        []string{"-fptrauth-vtable-pointer-type-discrimination"},
			Description: `Enable type discrimination of vtable pointers`,
		}, {
			Name:        []string{"-freciprocal-math"},
			Description: `Allow division operations to be reassociated`,
		}, {
			Name:        []string{"-freg-struct-return"},
			Description: `Override the default ABI to return small structs in registers`,
		}, {
			Name:        []string{"-fregister-global-dtors-with-atexit"},
			Description: `Use atexit or __cxa_atexit to register global destructors`,
		}, {
			Name:        []string{"-frelaxed-template-template-args"},
			Description: `Enable C++17 relaxed template template argument matching`,
		}, {
			Name:        []string{"-freroll-loops"},
			Description: `Turn on loop reroller`,
		}, {
			Name:        []string{"-frewrite-imports"},
			Description: ``,
		}, {
			Name:        []string{"-frewrite-includes"},
			Description: ``,
		}, {
			Name:        []string{"-fropi"},
			Description: `Generate read-only position independent code (ARM only)`,
		}, {
			Name:        []string{"-frtlib-add-rpath"},
			Description: `Add -rpath with architecture-specific resource directory to the linker flags`,
		}, {
			Name:        []string{"-frtti-data"},
			Description: ``,
		}, {
			Name:        []string{"-frtti"},
			Description: ``,
		}, {
			Name:        []string{"-frwpi"},
			Description: `Generate read-write position independent code (ARM only)`,
		}, {
			Name:        []string{"-fsanitize-address-field-padding"},
			Description: `Level of field padding for AddressSanitizer`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-address-globals-dead-stripping"},
			Description: `Enable linker dead stripping of globals in AddressSanitizer`,
		}, {
			Name:        []string{"-fsanitize-address-poison-custom-array-cookie"},
			Description: `Enable poisoning array cookies when using custom operator new[] in AddressSanitizer`,
		}, {
			Name:        []string{"-fsanitize-address-use-after-scope"},
			Description: `Enable use-after-scope detection in AddressSanitizer`,
		}, {
			Name:        []string{"-fsanitize-address-use-odr-indicator"},
			Description: `Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size`,
		}, {
			Name:        []string{"-fsanitize-blacklist"},
			Description: `Path to blacklist file for sanitizers`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-cfi-canonical-jump-tables"},
			Description: `Make the jump table addresses canonical in the symbol table`,
		}, {
			Name:        []string{"-fsanitize-cfi-cross-dso"},
			Description: `Enable control flow integrity (CFI) checks for cross-DSO calls`,
		}, {
			Name:        []string{"-fsanitize-cfi-icall-generalize-pointers"},
			Description: `Generalize pointers in CFI indirect call type signature checks`,
		}, {
			Name:        []string{"-fsanitize-coverage-allowlist"},
			Description: `Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-coverage-blacklist"},
			Description: `Deprecated, use -fsanitize-coverage-blocklist= instead`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-coverage-blocklist"},
			Description: `Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-coverage-whitelist"},
			Description: `Deprecated, use -fsanitize-coverage-allowlist= instead`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-coverage"},
			Description: `Specify the type of coverage instrumentation for Sanitizers`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-hwaddress-abi"},
			Description: `Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-memory-track-origins"},
			Description: `Enable origins tracking in MemorySanitizer`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-fsanitize-memory-use-after-dtor"},
			Description: `Enable use-after-destroy detection in MemorySanitizer`,
		}, {
			Name:        []string{"-fsanitize-recover"},
			Description: `Enable recovery for specified sanitizers`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-stats"},
			Description: `Enable sanitizer statistics gathering`,
		}, {
			Name:        []string{"-fsanitize-system-blacklist"},
			Description: `Path to system blacklist file for sanitizers`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-thread-atomics"},
			Description: `Enable atomic operations instrumentation in ThreadSanitizer (default)`,
		}, {
			Name:        []string{"-fsanitize-thread-func-entry-exit"},
			Description: `Enable function entry/exit instrumentation in ThreadSanitizer (default)`,
		}, {
			Name:        []string{"-fsanitize-thread-memory-access"},
			Description: `Enable memory access instrumentation in ThreadSanitizer (default)`,
		}, {
			Name:        []string{"-fsanitize-trap"},
			Description: `Enable trapping for sanitizers`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fsanitize-undefined-strip-path-components"},
			Description: `Strip (or keep only, if negative) a given number of path components when emitting check metadata`,
			Args: []model.Arg{{
				Name:        "number",
				Description: `Number`,
			}},
		}, {
			Name:        []string{"-fsanitize"},
			Description: `Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks`,
			Args: []model.Arg{{
				Name:        "check",
				Description: `Check`,
			}},
		}, {
			Name:        []string{"-fsave-optimization-record"},
			Description: `Generate an optimization record file in a specific format`,
			Args: []model.Arg{{
				Name:        "format",
				Description: `Format`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-fseh-exceptions"},
			Description: `Use SEH style exceptions`,
		}, {
			Name:        []string{"-fshort-enums"},
			Description: `Allocate to an enum type only as many bytes as it needs for the declared range of possible values`,
		}, {
			Name:        []string{"-fshort-wchar"},
			Description: `Force wchar_t to be a short unsigned int`,
		}, {
			Name:        []string{"-fshow-column"},
			Description: ``,
		}, {
			Name:        []string{"-fshow-overloads"},
			Description: `Which overload candidates to show when overload resolution fails: best|all; defaults to all`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				Suggestions: []model.Suggestion{{Name: []string{`best`}}, {Name: []string{`all`}}},
			}},
		}, {
			Name:        []string{"-fsigned-char"},
			Description: `Char is signed`,
		}, {
			Name:        []string{"-fsized-deallocation"},
			Description: `Enable C++14 sized global deallocation functions`,
		}, {
			Name:        []string{"-fsjlj-exceptions"},
			Description: `Use SjLj style exceptions`,
		}, {
			Name:        []string{"-fslp-vectorize"},
			Description: `Enable the superword-level parallelism vectorization passes`,
		}, {
			Name:        []string{"-fsmall-block-descriptors"},
			Description: `Enable small block descriptors`,
		}, {
			Name:        []string{"-fsplit-dwarf-inlining"},
			Description: `Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF`,
		}, {
			Name:        []string{"-fsplit-lto-unit"},
			Description: `Enables splitting of the LTO unit`,
		}, {
			Name:        []string{"-fstack-check"},
			Description: `Enable stack checking`,
		}, {
			Name:        []string{"-fstack-clash-protection"},
			Description: `Enable stack clash protection`,
		}, {
			Name:        []string{"-fstack-protector-all"},
			Description: `Enable stack protectors for all functions`,
		}, {
			Name:        []string{"-fstack-protector-strong"},
			Description: `Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable`,
		}, {
			Name:        []string{"-fstack-protector"},
			Description: `Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca, which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable`,
		}, {
			Name:        []string{"-fstack-size-section"},
			Description: `Emit section containing metadata on function stack sizes`,
		}, {
			Name:        []string{"-fstandalone-debug"},
			Description: `Emit full debug info for all types used by the program`,
		}, {
			Name:        []string{"-fstrict-enums"},
			Description: `Enable optimizations based on the strict definition of an enum's value range`,
		}, {
			Name:        []string{"-fstrict-float-cast-overflow"},
			Description: `Assume that overflowing float-to-int casts are undefined (default)`,
		}, {
			Name:        []string{"-fstrict-return"},
			Description: ``,
		}, {
			Name:        []string{"-fstrict-vtable-pointers"},
			Description: `Enable optimizations based on the strict rules for overwriting polymorphic C++ objects`,
		}, {
			Name:        []string{"-fsycl"},
			Description: `Enable SYCL kernels compilation for device`,
		}, {
			Name:        []string{"-fsystem-module"},
			Description: `Build this module as a system module. Only used with -emit-module`,
		}, {
			Name:        []string{"-ftarget-variant-availability-checks"},
			Description: `Enable availability checks for the target variant platform`,
		}, {
			Name:        []string{"-fthin-link-bitcode"},
			Description: `Write minimized bitcode to <file> for the ThinLTO thin link only`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fthinlto-index"},
			Description: `Perform ThinLTO importing using provided function summary index`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-ftime-trace-granularity"},
			Description: `Minimum time granularity (in microseconds) traced by time profiler`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-ftime-trace"},
			Description: `Turn on time profiler. Generates JSON file based on output filename`,
		}, {
			Name:        []string{"-ftrap-function"},
			Description: `Issue call to specified function rather than a trap instruction`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-ftrapv-handler"},
			Description: `Specify the function to be called on overflow`,
			Args: []model.Arg{{
				Name:        "function name",
				Description: `Function name`,
			}},
		}, {
			Name:        []string{"-ftrapv"},
			Description: `Trap on integer overflow`,
		}, {
			Name:        []string{"-ftrigraphs"},
			Description: `Process trigraph sequences`,
		}, {
			Name:        []string{"-ftrivial-auto-var-init-stop-after"},
			Description: `Stop initializing trivial automatic stack variables after the specified number of instances`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-ftrivial-auto-var-init"},
			Description: `Initialize trivial automatic stack variables`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				Suggestions: []model.Suggestion{{Name: []string{`uninitialized`}}, {Name: []string{`pattern`}}},
			}},
		}, {
			Name:        []string{"-funique-basic-block-section-names"},
			Description: `Use unique names for basic block sections (ELF Only)`,
		}, {
			Name:        []string{"-funique-internal-linkage-names"},
			Description: `Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path`,
		}, {
			Name:        []string{"-funique-section-names"},
			Description: ``,
		}, {
			Name:        []string{"-funroll-loops"},
			Description: `Turn on loop unroller`,
		}, {
			Name:        []string{"-fuse-init-array"},
			Description: ``,
		}, {
			Name:        []string{"-fuse-line-directives"},
			Description: `Use #line in preprocessed output`,
		}, {
			Name:        []string{"-fvalidate-ast-input-files-content"},
			Description: `Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical`,
		}, {
			Name:        []string{"-fveclib"},
			Description: `Use the given vector functions library`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fvectorize"},
			Description: `Enable the loop vectorization passes`,
		}, {
			Name:        []string{"-fverbose-asm"},
			Description: `Generate verbose assembly output`,
		}, {
			Name:        []string{"-fvirtual-function-elimination"},
			Description: `Enables dead virtual function elimination optimization. Requires -flto=full`,
		}, {
			Name:        []string{"-fvisibility-global-new-delete-hidden"},
			Description: `Give global C++ operator new and delete declarations hidden visibility`,
		}, {
			Name:        []string{"-fvisibility-inlines-hidden-static-local-var"},
			Description: `When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default`,
		}, {
			Name:        []string{"-fvisibility-inlines-hidden"},
			Description: `Give inline C++ member functions hidden visibility by default`,
		}, {
			Name:        []string{"-fvisibility-ms-compat"},
			Description: `Give global types 'default' visibility and global functions and variables 'hidden' visibility by default`,
		}, {
			Name:        []string{"-fvisibility"},
			Description: `Set the default symbol visibility for all global declarations`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fwasm-exceptions"},
			Description: `Use WebAssembly style exceptions`,
		}, {
			Name:        []string{"-fwhole-program-vtables"},
			Description: `Enables`,
		}, {
			Name:        []string{"-fwrapv"},
			Description: `Treat signed integer overflow as two's complement`,
		}, {
			Name:        []string{"-fwritable-strings"},
			Description: `Store string literals as writable data`,
		}, {
			Name:        []string{"-fxray-always-emit-customevents"},
			Description: `Always emit __xray_customevent(...) calls even if the containing function is not always instrumented`,
		}, {
			Name:        []string{"-fxray-always-emit-typedevents"},
			Description: `Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented`,
		}, {
			Name:        []string{"-fxray-always-instrument"},
			Description: `DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fxray-attr-list"},
			Description: `Filename defining the list of functions/types for imbuing XRay attributes`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fxray-function-index"},
			Description: ``,
		}, {
			Name:        []string{"-fxray-ignore-loops"},
			Description: `Don't instrument functions with loops unless they also meet the minimum function size`,
		}, {
			Name:        []string{"-fxray-instruction-threshold"},
			Description: `Sets the minimum function size to instrument with XRay`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fxray-instrumentation-bundle"},
			Description: `Select which XRay instrumentation points to emit. 'function' includes both 'function-entry' and 'function-exit'`,
			Args: []model.Arg{{
				Name:        "fxray-instrumentation-bundle",
				Suggestions: []model.Suggestion{{Name: []string{`all`}}, {Name: []string{`none`}}, {Name: []string{`function-entry`}}, {Name: []string{`function-exit`}}, {Name: []string{`function`}}, {Name: []string{`custom`}}},
			}},
		}, {
			Name:        []string{"-fxray-instrument"},
			Description: `Generate XRay instrumentation sleds on function entry and exit`,
		}, {
			Name:        []string{"-fxray-link-deps"},
			Description: `Tells clang to add the link dependencies for XRay`,
		}, {
			Name:        []string{"-fxray-modes"},
			Description: `List of modes to link in by default into XRay instrumented binaries`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fxray-never-instrument"},
			Description: `DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-fzero-initialized-in-bss"},
			Description: ``,
		}, {
			Name:        []string{"-fzvector"},
			Description: `Enable System z vector language extension`,
		}, {
			Name:        []string{"-F"},
			Description: `Add directory to framework include search path`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"--gcc-toolchain"},
			Description: `Use the gcc toolchain at the given directory`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-gcodeview-ghash"},
			Description: `Emit type record hashes in a .debug$H section`,
		}, {
			Name:        []string{"-gcodeview"},
			Description: `Generate CodeView debug information`,
		}, {
			Name:        []string{"-gdwarf-2"},
			Description: `Generate source-level debug information with dwarf version 2`,
		}, {
			Name:        []string{"-gdwarf-3"},
			Description: `Generate source-level debug information with dwarf version 3`,
		}, {
			Name:        []string{"-gdwarf-4"},
			Description: `Generate source-level debug information with dwarf version 4`,
		}, {
			Name:        []string{"-gdwarf-5"},
			Description: `Generate source-level debug information with dwarf version 5`,
		}, {
			Name:        []string{"-gdwarf"},
			Description: `Generate source-level debug information with the default dwarf version`,
		}, {
			Name:        []string{"-gembed-source"},
			Description: `Embed source text in DWARF debug sections`,
		}, {
			Name:        []string{"-gline-directives-only"},
			Description: `Emit debug line info directives only`,
		}, {
			Name:        []string{"-gline-tables-only"},
			Description: `Emit debug line number tables only`,
		}, {
			Name:        []string{"-gmodules"},
			Description: `Generate debug info with external references to clang modules or precompiled headers`,
		}, {
			Name:        []string{"-gno-embed-source"},
			Description: `Restore the default behavior of not embedding source text in DWARF debug sections`,
		}, {
			Name:        []string{"-gno-inline-line-tables"},
			Description: `Don't`,
		}, {
			Name:        []string{"--gpu-max-threads-per-block"},
			Description: `Default max threads per block for kernel launch bounds for HIP`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-gsplit-dwarf"},
			Description: `Set DWARF fission mode to either 'split' or 'single'`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-gz"},
			Description: `DWARF debug sections compression type`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-G"},
			Description: `Put objects of at most <size> bytes into small data section (MIPS / Hexagon)`,
			Args: []model.Arg{{
				Name:        "size",
				Description: `Size`,
			}},
		}, {
			Name:        []string{"-g"},
			Description: `Generate source-level debug information`,
		}, {
			Name:        []string{"--help-hidden"},
			Description: `Display help for hidden options`,
		}, {
			Name:        []string{"-help"},
			Description: `Display available options`,
		}, {
			Name:        []string{"--hip-device-lib"},
			Description: `HIP device library`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"--hip-link"},
			Description: `Link clang-offload-bundler bundles for HIP`,
		}, {
			Name:        []string{"--hip-version"},
			Description: `HIP version in the format of major.minor.patch`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-H"},
			Description: `Show header includes and nesting depth`,
		}, {
			Name:        []string{"-I-"},
			Description: `Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path`,
		}, {
			Name:        []string{"-iapinotes-modules"},
			Description: `Add directory to the API notes search path referenced by module name`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-ibuiltininc"},
			Description: `Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it`,
		}, {
			Name:        []string{"-idirafter"},
			Description: `Add directory to AFTER include search path`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-iframeworkwithsysroot"},
			Description: `Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-iframework"},
			Description: `Add directory to SYSTEM framework search path`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-imacros"},
			Description: `Include macros from file before parsing`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-include-pch"},
			Description: `Include precompiled header file`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-include"},
			Description: `Include file before parsing`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-index-header-map"},
			Description: `Make the next included directory (-I or -F) an indexer header map`,
		}, {
			Name:        []string{"-index-ignore-system-symbols"},
			Description: `Ignore symbols from system headers`,
		}, {
			Name:        []string{"-index-record-codegen-name"},
			Description: `Record the codegen name for symbols`,
		}, {
			Name:        []string{"-index-store-path"},
			Description: `Enable indexing with the specified data store path`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-iprefix"},
			Description: `Set the -iwithprefix/-iwithprefixbefore prefix`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir",
				Description: `Dir`,
			}},
		}, {
			Name:        []string{"-iquote"},
			Description: `Add directory to QUOTE include search path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-isysroot"},
			Description: `Set the system root directory (usually /)`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir",
				Description: `Dir`,
			}},
		}, {
			Name:        []string{"-isystem-after"},
			Description: `Add directory to end of the SYSTEM include search path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-isystem"},
			Description: `Add directory to SYSTEM include search path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-ivfsoverlay"},
			Description: `Overlay the virtual filesystem described by file over the real file system`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-iwithprefixbefore"},
			Description: `Set directory to include search path with prefix`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir",
				Description: `Dir`,
			}},
		}, {
			Name:        []string{"-iwithprefix"},
			Description: `Set directory to SYSTEM include search path with prefix`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir",
				Description: `Dir`,
			}},
		}, {
			Name:        []string{"-iwithsysroot"},
			Description: `Add directory to SYSTEM include search path, absolute paths are relative to -isysroot`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-I"},
			Description: `Add directory to include search path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir",
				Description: `Dir`,
			}},
		}, {
			Name:        []string{"--libomptarget-nvptx-path"},
			Description: `Path to libomptarget-nvptx libraries`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-L"},
			Description: `Add directory to library search path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dir",
				Description: `Dir`,
			}},
		}, {
			Name:        []string{"-mabicalls"},
			Description: `Enable SVR4-style position-independent code (Mips only)`,
		}, {
			Name:        []string{"-maix-struct-return"},
			Description: `Return all structs in memory (PPC32 only)`,
		}, {
			Name:        []string{"-malign-branch-boundary"},
			Description: `Specify the boundary's size to align branches`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-malign-branch"},
			Description: `Specify types of branches to align`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-malign-double"},
			Description: `Align doubles to two words in structs (x86 only)`,
		}, {
			Name:        []string{"-mbackchain"},
			Description: `Link stack frames through backchain on System Z`,
		}, {
			Name:        []string{"-mbranch-protection"},
			Description: `Enforce targets of indirect branches and function returns`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mbranches-within-32B-boundaries"},
			Description: `Align selected branches (fused, jcc, jmp) within 32-byte boundary`,
		}, {
			Name:        []string{"-mcmodel"},
			Description: `Equivalent to -mcmodel=medium, compatible with RISC-V gcc`,
			Args: []model.Arg{{
				Name:        "edan",
				Description: `Edan`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-mcmse"},
			Description: `Allow use of CMSE (Armv8-M Security Extensions)`,
		}, {
			Name:        []string{"-mcode-object-v3"},
			Description: `Enable code object v3 (AMDGPU only)`,
		}, {
			Name:        []string{"-mcrc"},
			Description: `Allow use of CRC instructions (ARM/Mips only)`,
		}, {
			Name:        []string{"-mcumode"},
			Description: `CU wavefront execution mode is used (AMDGPU only)`,
		}, {
			Name:        []string{"-mdouble"},
			Description: `Force double to be 32 bits or 64 bits`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-MD"},
			Description: `Write a depfile containing user and system headers`,
		}, {
			Name:        []string{"-meabi"},
			Description: `Set EABI type, e.g. 4, 5 or gnu (default depends on triple)`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-membedded-data"},
			Description: `Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)`,
		}, {
			Name:        []string{"-menable-experimental-extensions"},
			Description: `Enable use of experimental RISC-V extensions`,
		}, {
			Name:        []string{"-mexec-model"},
			Description: `Execution model (WebAssembly only)`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mexecute-only"},
			Description: `Disallow generation of data access to code sections (ARM only)`,
		}, {
			Name:        []string{"-mextern-sdata"},
			Description: `Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)`,
		}, {
			Name:        []string{"-mfentry"},
			Description: `Insert calls to fentry at function entry (x86/SystemZ only)`,
		}, {
			Name:        []string{"-mfix-cortex-a53-835769"},
			Description: `Workaround`,
		}, {
			Name:        []string{"-mfp32"},
			Description: `Use 32-bit floating point registers (MIPS only)`,
		}, {
			Name:        []string{"-mfp64"},
			Description: `Use 64-bit floating point registers (MIPS only)`,
		}, {
			Name:        []string{"-MF"},
			Description: `Write depfile output from -MMD, -MD, -MM, or -M to <file>`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-mgeneral-regs-only"},
			Description: `Generate code which only uses the general purpose registers (AArch64 only)`,
		}, {
			Name:        []string{"-mglobal-merge"},
			Description: `Enable merging of globals`,
		}, {
			Name:        []string{"-mgpopt"},
			Description: `Use GP relative accesses for symbols known to be in a small data section (MIPS)`,
		}, {
			Name:        []string{"-MG"},
			Description: `Add missing headers to depfile`,
		}, {
			Name:        []string{"-mharden-sls"},
			Description: `Select straight-line speculation hardening scope`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mhvx-length"},
			Description: `Set Hexagon Vector Length`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mhvx"},
			Description: `Enable Hexagon Vector eXtensions`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-miamcu"},
			Description: `Use Intel MCU ABI`,
		}, {
			Name:        []string{"--migrate"},
			Description: `Run the migrator`,
		}, {
			Name:        []string{"-mincremental-linker-compatible"},
			Description: `(integrated-as) Emit an object file which can be used with an incremental linker`,
		}, {
			Name:        []string{"-mindirect-jump"},
			Description: `Change indirect jump instructions to inhibit speculation`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mios-version-min"},
			Description: `Set iOS deployment target`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-MJ"},
			Description: `Write a compilation database entry per input`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mllvm"},
			Description: `Additional arguments to forward to LLVM's option processing`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mlocal-sdata"},
			Description: `Extend the -G behaviour to object local data (MIPS)`,
		}, {
			Name:        []string{"-mlong-calls"},
			Description: `Generate branches with extended addressability, usually via indirect jumps`,
		}, {
			Name:        []string{"-mlong-double-128"},
			Description: `Force long double to be 128 bits`,
		}, {
			Name:        []string{"-mlong-double-64"},
			Description: `Force long double to be 64 bits`,
		}, {
			Name:        []string{"-mlong-double-80"},
			Description: `Force long double to be 80 bits, padded to 128 bits for storage`,
		}, {
			Name:        []string{"-mlvi-cfi"},
			Description: `Enable only control-flow mitigations for Load Value Injection (LVI)`,
		}, {
			Name:        []string{"-mlvi-hardening"},
			Description: `Enable all mitigations for Load Value Injection (LVI)`,
		}, {
			Name:        []string{"-mmacosx-version-min"},
			Description: `Set Mac OS X deployment target`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mmadd4"},
			Description: `Enable the generation of 4-operand madd.s, madd.d and related instructions`,
		}, {
			Name:        []string{"-MMD"},
			Description: `Write a depfile containing user headers`,
		}, {
			Name:        []string{"-mmemops"},
			Description: `Enable generation of memop instructions`,
		}, {
			Name:        []string{"-mms-bitfields"},
			Description: `Set the default structure layout to be compatible with the Microsoft compiler standard`,
		}, {
			Name:        []string{"-mmsa"},
			Description: `Enable MSA ASE (MIPS only)`,
		}, {
			Name:        []string{"-mmt"},
			Description: `Enable MT ASE (MIPS only)`,
		}, {
			Name:        []string{"-MM"},
			Description: `Like -MMD, but also implies -E and writes to stdout by default`,
		}, {
			Name:        []string{"-mno-abicalls"},
			Description: `Disable SVR4-style position-independent code (Mips only)`,
		}, {
			Name:        []string{"-mno-code-object-v3"},
			Description: `Disable code object v3 (AMDGPU only)`,
		}, {
			Name:        []string{"-mno-crc"},
			Description: `Disallow use of CRC instructions (Mips only)`,
		}, {
			Name:        []string{"-mno-cumode"},
			Description: `WGP wavefront execution mode is used (AMDGPU only)`,
		}, {
			Name:        []string{"-mno-embedded-data"},
			Description: `Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)`,
		}, {
			Name:        []string{"-mno-execute-only"},
			Description: `Allow generation of data access to code sections (ARM only)`,
		}, {
			Name:        []string{"-mno-extern-sdata"},
			Description: `Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)`,
		}, {
			Name:        []string{"-mno-fix-cortex-a53-835769"},
			Description: `Don't workaround Cortex-A53 erratum 835769 (AArch64 only)`,
		}, {
			Name:        []string{"-mno-global-merge"},
			Description: `Disable merging of globals`,
		}, {
			Name:        []string{"-mno-gpopt"},
			Description: `Do not use GP relative accesses for symbols known to be in a small data section (MIPS)`,
		}, {
			Name:        []string{"-mno-hvx"},
			Description: `Disable Hexagon Vector eXtensions`,
		}, {
			Name:        []string{"-mno-implicit-float"},
			Description: `Don't generate implicit floating point instructions`,
		}, {
			Name:        []string{"-mno-incremental-linker-compatible"},
			Description: `(integrated-as) Emit an object file which cannot be used with an incremental linker`,
		}, {
			Name:        []string{"-mno-local-sdata"},
			Description: `Do not extend the -G behaviour to object local data (MIPS)`,
		}, {
			Name:        []string{"-mno-long-calls"},
			Description: `Restore the default behaviour of not generating long calls`,
		}, {
			Name:        []string{"-mno-lvi-cfi"},
			Description: `Disable control-flow mitigations for Load Value Injection (LVI)`,
		}, {
			Name:        []string{"-mno-lvi-hardening"},
			Description: `Disable mitigations for Load Value Injection (LVI)`,
		}, {
			Name:        []string{"-mno-madd4"},
			Description: `Disable the generation of 4-operand madd.s, madd.d and related instructions`,
		}, {
			Name:        []string{"-mno-memops"},
			Description: `Disable generation of memop instructions`,
		}, {
			Name:        []string{"-mno-movt"},
			Description: `Disallow use of movt/movw pairs (ARM only)`,
		}, {
			Name:        []string{"-mno-ms-bitfields"},
			Description: `Do not set the default structure layout to be compatible with the Microsoft compiler standard`,
		}, {
			Name:        []string{"-mno-msa"},
			Description: `Disable MSA ASE (MIPS only)`,
		}, {
			Name:        []string{"-mno-mt"},
			Description: `Disable MT ASE (MIPS only)`,
		}, {
			Name:        []string{"-mno-neg-immediates"},
			Description: `Disallow converting instructions with negative immediates to their negation or inversion`,
		}, {
			Name:        []string{"-mno-nvj"},
			Description: `Disable generation of new-value jumps`,
		}, {
			Name:        []string{"-mno-nvs"},
			Description: `Disable generation of new-value stores`,
		}, {
			Name:        []string{"-mno-outline"},
			Description: `Disable function outlining (AArch64 only)`,
		}, {
			Name:        []string{"-mno-packets"},
			Description: `Disable generation of instruction packets`,
		}, {
			Name:        []string{"-mno-relax"},
			Description: `Disable linker relaxation`,
		}, {
			Name:        []string{"-mno-restrict-it"},
			Description: `Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode`,
		}, {
			Name:        []string{"-mno-save-restore"},
			Description: `Disable using library calls for save and restore`,
		}, {
			Name:        []string{"-mno-seses"},
			Description: `Disable speculative execution side effect suppression (SESES)`,
		}, {
			Name:        []string{"-mno-sram-ecc"},
			Description: `Disable SRAM ECC (AMDGPU only)`,
		}, {
			Name:        []string{"-mno-stack-arg-probe"},
			Description: `Disable stack probes which are enabled by default`,
		}, {
			Name:        []string{"-mno-tls-direct-seg-refs"},
			Description: `Disable direct TLS access through segment registers`,
		}, {
			Name:        []string{"-mno-unaligned-access"},
			Description: `Force all memory accesses to be aligned (AArch32/AArch64 only)`,
		}, {
			Name:        []string{"-mno-wavefrontsize64"},
			Description: `Wavefront size 32 is used`,
		}, {
			Name:        []string{"-mno-xnack"},
			Description: `Disable XNACK (AMDGPU only)`,
		}, {
			Name:        []string{"-mnocrc"},
			Description: `Disallow use of CRC instructions (ARM only)`,
		}, {
			Name:        []string{"-mnop-mcount"},
			Description: `Generate mcount/__fentry__ calls as nops. To activate they need to be patched in`,
		}, {
			Name:        []string{"-mnvj"},
			Description: `Enable generation of new-value jumps`,
		}, {
			Name:        []string{"-mnvs"},
			Description: `Enable generation of new-value stores`,
		}, {
			Name:        []string{"-module-dependency-dir"},
			Description: `Directory to dump module dependencies to`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-module-file-info"},
			Description: `Provide information about a particular module file`,
		}, {
			Name:        []string{"-momit-leaf-frame-pointer"},
			Description: `Omit frame pointer setup for leaf functions`,
		}, {
			Name:        []string{"-moutline"},
			Description: `Enable function outlining (AArch64 only)`,
		}, {
			Name:        []string{"-mpacked-stack"},
			Description: `Use packed stack layout (SystemZ only)`,
		}, {
			Name:        []string{"-mpackets"},
			Description: `Enable generation of instruction packets`,
		}, {
			Name:        []string{"-mpad-max-prefix-size"},
			Description: `Specify maximum number of prefixes to use for padding`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mpie-copy-relocations"},
			Description: `Use copy relocations support for PIE builds`,
		}, {
			Name:        []string{"-mprefer-vector-width"},
			Description: `Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-MP"},
			Description: `Create phony target for each dependency (other than main file)`,
		}, {
			Name:        []string{"-mqdsp6-compat"},
			Description: `Enable hexagon-qdsp6 backward compatibility`,
		}, {
			Name:        []string{"-MQ"},
			Description: `Specify name of main file output to quote in depfile`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mrecord-mcount"},
			Description: `Generate a __mcount_loc section entry for each __fentry__ call`,
		}, {
			Name:        []string{"-mrelax-all"},
			Description: `(integrated-as) Relax all machine instructions`,
		}, {
			Name:        []string{"-mrelax"},
			Description: `Enable linker relaxation`,
		}, {
			Name:        []string{"-mrestrict-it"},
			Description: `Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode`,
		}, {
			Name:        []string{"-mrtd"},
			Description: `Make StdCall calling convention the default`,
		}, {
			Name:        []string{"-msave-restore"},
			Description: `Enable using library calls for save and restore`,
		}, {
			Name:        []string{"-mseses"},
			Description: `Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations`,
		}, {
			Name:        []string{"-msign-return-address"},
			Description: `Select return address signing scope`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-msmall-data-limit"},
			Description: `Put global and static data smaller than the limit into a special section`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-msoft-float"},
			Description: `Use software floating point`,
		}, {
			Name:        []string{"-msram-ecc"},
			Description: `Enable SRAM ECC (AMDGPU only)`,
		}, {
			Name:        []string{"-mstack-alignment"},
			Description: `Set the stack alignment`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mstack-arg-probe"},
			Description: `Enable stack probes`,
		}, {
			Name:        []string{"-mstack-probe-size"},
			Description: `Set the stack probe size`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mstackrealign"},
			Description: `Force realign the stack at entry to every function`,
		}, {
			Name:        []string{"-msvr4-struct-return"},
			Description: `Return small structs in registers (PPC32 only)`,
		}, {
			Name:        []string{"-mthread-model"},
			Description: `The thread model to use, e.g. posix, single (posix by default)`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mtls-direct-seg-refs"},
			Description: `Enable direct TLS access through segment registers (default)`,
		}, {
			Name:        []string{"-mtls-size"},
			Description: `Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				Suggestions: []model.Suggestion{{Name: []string{`12`}}, {Name: []string{`24`}}, {Name: []string{`32`}}, {Name: []string{`48`}}},
			}},
		}, {
			Name:        []string{"-mtp"},
			Description: `Thread pointer access method (AArch32/AArch64 only)`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-mtune"},
			Description: `Accepted for compatibility with GCC. Currently has no effect`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-MT"},
			Description: `Specify name of main file output in depfile`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-munaligned-access"},
			Description: `Allow memory accesses to be unaligned (AArch32/AArch64 only)`,
		}, {
			Name:        []string{"-MV"},
			Description: `Use NMake/Jom format for the depfile`,
		}, {
			Name:        []string{"-mwavefrontsize64"},
			Description: `Wavefront size 64 is used`,
		}, {
			Name:        []string{"-mxnack"},
			Description: `Enable XNACK (AMDGPU only)`,
		}, {
			Name:        []string{"-M"},
			Description: `Like -MD, but also implies -E and writes to stdout by default`,
		}, {
			Name:        []string{"--no-cuda-include-ptx"},
			Description: `Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"--no-cuda-version-check"},
			Description: `Don't`,
		}, {
			Name:        []string{"--no-offload-arch"},
			Description: `Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"--no-system-header-prefix"},
			Description: `Treat all #include paths starting with <prefix> as not including a system header`,
			Args: []model.Arg{{
				Name:        "prefix",
				Description: `Prefix`,
			}},
		}, {
			Name:        []string{"-nobuiltininc"},
			Description: `Disable builtin #include directories`,
		}, {
			Name:        []string{"-nogpulib"},
			Description: `Do not link device library for CUDA/HIP device compilation`,
		}, {
			Name:        []string{"-nostdinc++"},
			Description: `Disable standard #include directories for the C++ standard library`,
		}, {
			Name:        []string{"-ObjC++"},
			Description: `Treat source input files as Objective-C++ inputs`,
		}, {
			Name:        []string{"-objcmt-atomic-property"},
			Description: `Make`,
		}, {
			Name:        []string{"-objcmt-migrate-all"},
			Description: `Enable migration to modern ObjC`,
		}, {
			Name:        []string{"-objcmt-migrate-annotation"},
			Description: `Enable migration to property and method annotations`,
		}, {
			Name:        []string{"-objcmt-migrate-designated-init"},
			Description: `Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods`,
		}, {
			Name:        []string{"-objcmt-migrate-instancetype"},
			Description: `Enable migration to infer instancetype for method result type`,
		}, {
			Name:        []string{"-objcmt-migrate-literals"},
			Description: `Enable migration to modern ObjC literals`,
		}, {
			Name:        []string{"-objcmt-migrate-ns-macros"},
			Description: `Enable migration to NS_ENUM/NS_OPTIONS macros`,
		}, {
			Name:        []string{"-objcmt-migrate-property-dot-syntax"},
			Description: `Enable migration of setter/getter messages to property-dot syntax`,
		}, {
			Name:        []string{"-objcmt-migrate-property"},
			Description: `Enable migration to modern ObjC property`,
		}, {
			Name:        []string{"-objcmt-migrate-protocol-conformance"},
			Description: `Enable migration to add protocol conformance on classes`,
		}, {
			Name:        []string{"-objcmt-migrate-readonly-property"},
			Description: `Enable migration to modern ObjC readonly property`,
		}, {
			Name:        []string{"-objcmt-migrate-readwrite-property"},
			Description: `Enable migration to modern ObjC readwrite property`,
		}, {
			Name:        []string{"-objcmt-migrate-subscripting"},
			Description: `Enable migration to modern ObjC subscripting`,
		}, {
			Name:        []string{"-objcmt-ns-nonatomic-iosonly"},
			Description: `Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute`,
		}, {
			Name:        []string{"-objcmt-returns-innerpointer-property"},
			Description: `Enable migration to annotate property with NS_RETURNS_INNER_POINTER`,
		}, {
			Name:        []string{"-objcmt-whitelist-dir-path"},
			Description: `Only modify files with a filename contained in the provided directory path`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-ObjC"},
			Description: `Treat source input files as Objective-C inputs`,
		}, {
			Name:        []string{"-o"},
			Description: `Write output to <file>`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-pg"},
			Description: `Enable mcount instrumentation`,
		}, {
			Name:        []string{"-pipe"},
			Description: `Use pipes between commands, when possible`,
		}, {
			Name:        []string{"--precompile"},
			Description: `Only precompile the input`,
		}, {
			Name:        []string{"-print-effective-triple"},
			Description: `Print`,
		}, {
			Name:        []string{"-print-file-name"},
			Description: `Print the full library path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "file",
				Description: `File`,
			}},
		}, {
			Name:        []string{"-print-ivar-layout"},
			Description: `Enable Objective-C Ivar layout bitmap print trace`,
		}, {
			Name:        []string{"-print-libgcc-file-name"},
			Description: `Print`,
		}, {
			Name:        []string{"-print-prog-name"},
			Description: `Print the full program path of <name>`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Name`,
			}},
		}, {
			Name:        []string{"-print-resource-dir"},
			Description: `Print the resource directory pathname`,
		}, {
			Name:        []string{"-print-search-dirs"},
			Description: `Print the paths used for finding libraries and programs`,
		}, {
			Name:        []string{"-print-supported-cpus"},
			Description: `Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)`,
		}, {
			Name:        []string{"-print-target-triple"},
			Description: `Print the normalized target triple`,
		}, {
			Name:        []string{"-print-targets"},
			Description: `Print the registered targets`,
		}, {
			Name:        []string{"-pthread"},
			Description: `Support POSIX threads in generated code`,
		}, {
			Name:        []string{"--ptxas-path"},
			Description: `Path to ptxas (used for compiling CUDA code)`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-P"},
			Description: `Disable linemarker output in -E mode`,
		}, {
			Name:        []string{"-Qn"},
			Description: `Do not emit metadata containing compiler name and version`,
		}, {
			Name:        []string{"-Qunused-arguments"},
			Description: `Don't emit warning for unused driver arguments`,
		}, {
			Name:        []string{"-Qy"},
			Description: `Emit metadata containing compiler name and version`,
		}, {
			Name:        []string{"-relocatable-pch"},
			Description: `Whether to build a relocatable precompiled header`,
		}, {
			Name:        []string{"-rewrite-legacy-objc"},
			Description: `Rewrite Legacy Objective-C source to C++`,
		}, {
			Name:        []string{"-rewrite-objc"},
			Description: `Rewrite Objective-C source to C++`,
		}, {
			Name:        []string{"--rocm-device-lib-path"},
			Description: `ROCm device library path. Alternative to rocm-path`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"--rocm-path"},
			Description: `ROCm installation path, used for finding and automatically linking required bitcode libraries`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-Rpass-analysis"},
			Description: `Report transformation analysis from optimization passes whose name matches the given POSIX regular expression`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-Rpass-missed"},
			Description: `Report missed transformations by optimization passes whose name matches the given POSIX regular expression`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-Rpass"},
			Description: `Report transformations performed by optimization passes whose name matches the given POSIX regular expression`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-rtlib"},
			Description: `Compiler runtime library to use`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-R"},
			Description: `Enable the specified remark`,
			Args: []model.Arg{{
				Name:        "remark",
				Description: `Remark`,
			}},
		}, {
			Name:        []string{"-save-stats"},
			Description: `Save llvm statistics`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-save-temps"},
			Description: `Save intermediate compilation results`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-serialize-diagnostics"},
			Description: `Serialize compiler diagnostics to a file`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-shared-libsan"},
			Description: `Dynamically link the sanitizer runtime`,
		}, {
			Name:        []string{"-static-libsan"},
			Description: `Statically link the sanitizer runtime`,
		}, {
			Name:        []string{"-static-openmp"},
			Description: `Use the static host OpenMP runtime while linking`,
		}, {
			Name:        []string{"-stdlib++-isystem"},
			Description: `Use directory as the C++ standard library include path`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "directory",
				Description: `Directory`,
			}},
		}, {
			Name:        []string{"-stdlib"},
			Description: `C++ standard library to use`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-sycl-std"},
			Description: `SYCL language standard to compile for`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"--system-header-prefix"},
			Description: `Treat all #include paths starting with <prefix> as including a system header`,
			Args: []model.Arg{{
				Name:        "prefix",
				Description: `Prefix`,
			}},
		}, {
			Name:        []string{"-S"},
			Description: `Only run preprocess and compilation steps`,
		}, {
			Name:        []string{"-target-variant"},
			Description: `Generate code that may run on a particular variant of the deployment target`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"--target"},
			Description: `Generate code for the given target`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-Tbss"},
			Description: `Set starting address of BSS to <addr>`,
			Args: []model.Arg{{
				Name:        "addr",
				Description: `Addr`,
			}},
		}, {
			Name:        []string{"-Tdata"},
			Description: `Set starting address of DATA to <addr>`,
			Args: []model.Arg{{
				Name:        "addr",
				Description: `Addr`,
			}},
		}, {
			Name:        []string{"-time"},
			Description: `Time individual commands`,
		}, {
			Name:        []string{"-traditional-cpp"},
			Description: `Enable some traditional CPP emulation`,
		}, {
			Name:        []string{"-trigraphs"},
			Description: `Process trigraph sequences`,
		}, {
			Name:        []string{"-Ttext"},
			Description: `Set starting address of TEXT to <addr>`,
			Args: []model.Arg{{
				Name:        "addr",
				Description: `Addr`,
			}},
		}, {
			Name:        []string{"-T"},
			Description: `Specify <script> as linker script`,
			Args: []model.Arg{{
				Name:        "script",
				Description: `Script`,
			}},
		}, {
			Name:        []string{"-undef"},
			Description: `Undef all system defines`,
		}, {
			Name:        []string{"-unwindlib"},
			Description: `Unwind library to use`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
			}},
		}, {
			Name:        []string{"-U"},
			Description: `Undefine macro <macro>`,
			Args: []model.Arg{{
				Name:        "macro",
				Description: `Macro`,
			}},
		}, {
			Name:        []string{"--verify-debug-info"},
			Description: `Verify the binary representation of debug output`,
		}, {
			Name:        []string{"-verify-pch"},
			Description: `Load and verify that a pre-compiled header file is not stale`,
		}, {
			Name:        []string{"--version"},
			Description: `Print version information`,
		}, {
			Name:        []string{"-v"},
			Description: `Show commands to run and use verbose output`,
		}, {
			Name:        []string{"-Wdeprecated"},
			Description: `Enable warnings for deprecated constructs and define __DEPRECATED`,
		}, {
			Name:        []string{"-working-directory"},
			Description: `Resolve file paths relative to the specified directory`,
			Args: []model.Arg{{
				Name:        "value",
				Description: `Value`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"-w"},
			Description: `Suppress all warnings`,
		}, {
			Name:        []string{"-Xanalyzer"},
			Description: `Pass <arg> to the static analyzer`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-Xarch_device"},
			Description: `Pass <arg> to the CUDA/HIP device compilation`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-Xarch_host"},
			Description: `Pass <arg> to the CUDA/HIP host compilation`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-Xassembler"},
			Description: `Pass <arg> to the assembler`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-Xclang"},
			Description: `Pass <arg> to the clang compiler`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-Xcuda-fatbinary"},
			Description: `Pass <arg> to fatbinary invocation`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-Xcuda-ptxas"},
			Description: `Pass <arg> to the ptxas assembler`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-Xlinker"},
			Description: `Pass <arg> to the linker`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-Xopenmp-target"},
			Description: `Pass <arg> to the target offloading toolchain identified by <triple>`,
			Args: []model.Arg{{
				Name:        "triple",
				Description: `Triple`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"-Xpreprocessor"},
			Description: `Pass <arg> to the preprocessor`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-x"},
			Description: `Treat subsequent input files as having type <language>`,
			Args: []model.Arg{{
				Name:        "language",
				Description: `Language`,
			}},
		}, {
			Name:        []string{"-z"},
			Description: `Pass -z <arg> to the linker`,
			Args: []model.Arg{{
				Name:        "arg",
				Description: `Arg`,
			}},
		}, {
			Name:        []string{"-std"},
			Description: `Language standard to compile for`,
			Args: []model.Arg{{
				Name: "value",
				Suggestions: []model.Suggestion{{
					Name:        []string{`c89`, `c90`, `iso9899:1990`},
					Description: `ISO C 1990`,
				}, {
					Name:        []string{`iso9899:199409`},
					Description: `ISO C 1990 with amendment 1`,
				}, {
					Name:        []string{`gnu89`, `gnu90`},
					Description: `ISO C 1990 with GNU extensions`,
				}, {
					Name:        []string{`c99`, `iso9899:1999`},
					Description: `ISO C 1999`,
				}, {
					Name:        []string{`gnu99`},
					Description: `ISO C 1999 with GNU extensions`,
				}, {
					Name:        []string{`c11`, `iso9899:2011`},
					Description: `ISO C 2011`,
				}, {
					Name:        []string{`gnu11`},
					Description: `ISO C 2011 with GNU extensions`,
				}, {
					Name:        []string{`c17`, `iso9899:2017`, `c18`, `iso9899:2018`},
					Description: `ISO C 2017`,
				}, {
					Name:        []string{`gnu17`, `gnu18`},
					Description: `ISO C 2017 with GNU extensions`,
				}, {
					Name:        []string{`c2x`},
					Description: `Working Draft for ISO C2x`,
				}, {
					Name:        []string{`gnu2x`},
					Description: `Working Draft for ISO C2x with GNU extensions`,
				}, {
					Name:        []string{`c++98`, `c++03`},
					Description: `ISO C++ 1998 with amendments`,
				}, {
					Name:        []string{`gnu++98`, `gnu++03`},
					Description: `ISO C++ 1998 with amendments and GNU extensions`,
				}, {
					Name:        []string{`c++11`},
					Description: `ISO C++ 2011 with amendments`,
				}, {
					Name:        []string{`gnu++11`},
					Description: `ISO C++ 2011 with amendments and GNU extensions`,
				}, {
					Name:        []string{`c++14`},
					Description: `ISO C++ 2014 with amendments`,
				}, {
					Name:        []string{`gnu++14`},
					Description: `ISO C++ 2014 with amendments and GNU extensions`,
				}, {
					Name:        []string{`c++17`},
					Description: `ISO C++ 2017 with amendments`,
				}, {
					Name:        []string{`gnu++17`},
					Description: `ISO C++ 2017 with amendments and GNU extensions`,
				}, {
					Name:        []string{`c++20`},
					Description: `ISO C++ 2020 DIS`,
				}, {
					Name:        []string{`gnu++20`},
					Description: `ISO C++ 2020 DIS with GNU extensions`,
				}, {
					Name:        []string{`c++2b`},
					Description: `Working draft for ISO C++ 2023 DIS`,
				}, {
					Name:        []string{`gnu++2b`},
					Description: `Working draft for ISO C++ 2023 DIS with GNU extensions`,
				}},
			}},
		}},
	}
}
