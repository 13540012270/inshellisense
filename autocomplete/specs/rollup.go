// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["rollup"] = model.Subcommand{
		Name:        []string{"rollup"},
		Description: `Next-generation ES module bundler`,
		Options: []model.Option{{
			Name:        []string{"-c", "--config"},
			Description: `Use this config file (if argument is used but value is unspecified, defaults to rollup.config.js)`,
			Args: []model.Arg{{
				Name:      "filename",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name: []string{"-d", "--dir"},
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "dirname",
				Description: `Directory for chunks (if absent, prints to stdout)`,
			}},
		}, {
			Name: []string{"-e", "--external"},
			Args: []model.Arg{{
				Name:        "ids",
				Description: `Comma-separate list of module IDs to exclude`,
			}},
		}, {
			Name: []string{"-f", "--format"},
			Args: []model.Arg{{
				Name:        "format",
				Description: `Type of output (amd, cjs, es, iife, umd, system)`,
				Suggestions: []model.Suggestion{{Name: []string{`amd`}}, {Name: []string{`cjs`}}, {Name: []string{`es`}}, {Name: []string{`iife`}}, {Name: []string{`umd`}}, {Name: []string{`system`}}},
			}},
		}, {
			Name: []string{"-g", "--globals"},
			Args: []model.Arg{{
				Name:        "pairs",
				Description: `Comma-separate list of "moduleID:Global" pairs`,
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Show help message`,
		}, {
			Name: []string{"-i", "--input"},
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "filename",
				Description: `Input (alternative to <entry file>)`,
			}},
		}, {
			Name:        []string{"-m", "--sourcemap"},
			Description: `Generate sourcemap ("-m inline" for inline map)`,
		}, {
			Name: []string{"-n", "--name"},
			Args: []model.Arg{{
				Name:        "name",
				Description: `Name for UMD export`,
			}},
		}, {
			Name: []string{"-o", "--file"},
			Args: []model.Arg{{
				Name:        "output",
				Description: `Single output file (if absent, prints to stdout)`,
			}},
		}, {
			Name: []string{"-p", "--plugin"},
			Args: []model.Arg{{
				Name:        "plugin",
				Description: `Use the plugin specified (may be repeated)`,
			}},
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Show version number`,
		}, {
			Name:        []string{"-w", "--watch"},
			Description: `Watch files in bundle and rebuild on changes`,
		}, {
			Name: []string{"--amd.id"},
			Args: []model.Arg{{
				Name:        "id",
				Description: `ID for AMD module (default is anonymous)`,
			}},
		}, {
			Name:        []string{"--amd.autoId"},
			Description: `Generate the AMD ID based off the chunk name`,
		}, {
			Name: []string{"--amd.basePath"},
			Args: []model.Arg{{
				Name:        "prefix",
				Description: `Path to prepend to auto generated AMD ID`,
			}},
		}, {
			Name: []string{"--amd.define"},
			Args: []model.Arg{{
				Name:        "name",
				Description: `Function to use in place of 'define'`,
			}},
		}, {
			Name: []string{"--assetFileNames"},
			Args: []model.Arg{{
				Name:        "pattern",
				Description: `Name pattern for emitted assets`,
			}},
		}, {
			Name: []string{"--banner"},
			Args: []model.Arg{{
				Name:        "text",
				Description: `Code to insert at top of bundle (outside wrapper)`,
			}},
		}, {
			Name: []string{"--chunkFileNames"},
			Args: []model.Arg{{
				Name:        "pattern",
				Description: `Name pattern for emitted secondary chunks`,
			}},
		}, {
			Name:        []string{"--compact"},
			Description: `Minify wrapper code`,
		}, {
			Name: []string{"--context"},
			Args: []model.Arg{{
				Name:        "variable",
				Description: `Specify top-level 'this' value`,
			}},
		}, {
			Name: []string{"--entryFileNames"},
			Args: []model.Arg{{
				Name:        "pattern",
				Description: `Name pattern for emitted entry chunks`,
			}},
		}, {
			Name: []string{"--environment"},
			Args: []model.Arg{{
				Name:        "values",
				Description: `Settings passed to config file`,
			}},
		}, {
			Name:        []string{"--no-esModule"},
			Description: `Do not add __esmodule property`,
		}, {
			Name: []string{"--exports"},
			Args: []model.Arg{{
				Name:        "mode",
				Description: `Specify export mode (auto, default, named, none)`,
			}},
		}, {
			Name:        []string{"--extend"},
			Description: `Extend global variable defined by --name`,
		}, {
			Name:        []string{"--no-externalLiveBindings"},
			Description: `Do not generate code to support live bindings`,
		}, {
			Name:        []string{"--failAfterWarnings"},
			Description: `Exit with an error if the build produced warnings`,
		}, {
			Name: []string{"--footer"},
			Args: []model.Arg{{
				Name:        "text",
				Description: `Code to insert at end of bundle (outside wrapper)`,
			}},
		}, {
			Name:        []string{"--no-freeze"},
			Description: `Do not freeze namespace objects`,
		}, {
			Name:        []string{"--no-hoistTransistiveImports"},
			Description: `Do not hoist transistive imports into entry chunks`,
		}, {
			Name:        []string{"--no-indent"},
			Description: `Don't indent result`,
		}, {
			Name:        []string{"--no-interop"},
			Description: `Do not include interop block`,
		}, {
			Name:        []string{"--inlineDynamicImports"},
			Description: `Create a single bundle when using dynamic imports`,
		}, {
			Name: []string{"--intro"},
			Args: []model.Arg{{
				Name:        "text",
				Description: `Code to insert at top of bundle (inside wrapper)`,
			}},
		}, {
			Name:        []string{"--minifyInternalImports"},
			Description: `Force or disable minification of internal imports`,
		}, {
			Name:        []string{"--namespaceToStringTag"},
			Description: `Create proper '.toString' methods for namespaces`,
		}, {
			Name:        []string{"--noConflict"},
			Description: `Generate a noConflict method for UMD globals`,
		}, {
			Name: []string{"--outro"},
			Args: []model.Arg{{
				Name:        "text",
				Description: `Code to insert at end of bundle (inside wrapper)`,
			}},
		}, {
			Name:        []string{"--preferConst"},
			Description: `Use 'const' instead of 'var' for exports`,
		}, {
			Name:        []string{"--no-preserveEntrySignatures"},
			Description: `Avoid facade chunks for entry points`,
		}, {
			Name:        []string{"--preserveModules"},
			Description: `Preserve module structure`,
		}, {
			Name:        []string{"--preserveModulesRoot"},
			Description: `Put preserved modules under this path at root level`,
		}, {
			Name:        []string{"--preserveSymlinks"},
			Description: `Do not follow symlinks when resolving files`,
		}, {
			Name:        []string{"--no-sanitizeFileName"},
			Description: `Do not replace invalid characters in file names`,
		}, {
			Name:        []string{"--shimMissingExports"},
			Description: `Create shim variables for missing exports`,
		}, {
			Name:        []string{"--silent"},
			Description: `Don't print warnings`,
		}, {
			Name:        []string{"--sourcemapExcludeSources"},
			Description: `Do not include source code in source maps`,
		}, {
			Name:        []string{"--sourcemapFile"},
			Description: `Specify bundle position for source maps`,
			Args: []model.Arg{{
				Name: "file",
			}},
		}, {
			Name:        []string{"--stdin=ext"},
			Description: `Specify file extension used for stdin input`,
		}, {
			Name:        []string{"--no-stdin"},
			Description: `Do not read "-" from stdin`,
		}, {
			Name:        []string{"--no-strict"},
			Description: `Don't emit '"use strict"; in the generated modules`,
		}, {
			Name:        []string{"--strictDeprecations"},
			Description: `Throw errors for deprecated features`,
		}, {
			Name:        []string{"--systemNullSetters"},
			Description: `Replace empty SystemJS setters with 'null'`,
		}, {
			Name:        []string{"--no-treeshake"},
			Description: `Disable tree-shaking optimizations`,
		}, {
			Name:        []string{"--no-treeshake.annotations"},
			Description: `Ignore pure call annotations`,
		}, {
			Name:        []string{"--no-treeshake.moduleSideEffects"},
			Description: `Assume modules have no side effects`,
		}, {
			Name:        []string{"--no-treeshake.propertyReadSideEffects"},
			Description: `Ignore property access side-effects`,
		}, {
			Name:        []string{"--no-treeshake.tryCatchDeoptimization"},
			Description: `Do not turn off try-catch-tree-shaking`,
		}, {
			Name:        []string{"--no-treeshake.unknownGlobalSideEffects"},
			Description: `Assume unknown globals do not throw`,
		}, {
			Name:        []string{"--waitForBuildInput"},
			Description: `Wait for bundle input files`,
		}, {
			Name:        []string{"--watch.buildDelay"},
			Description: `Throttle watch rebuilds`,
			Args: []model.Arg{{
				Name: "number",
			}},
		}, {
			Name:        []string{"--no-watch.clearScreen"},
			Description: `Do not clear the screen when rebuilding`,
		}, {
			Name:        []string{"--watch.skipWrite"},
			Description: `Do not write files to disk when watching`,
		}, {
			Name:        []string{"--watch.exclude"},
			Description: `Exclude files from being watched`,
			Args: []model.Arg{{
				Name: "files",
			}},
		}, {
			Name:        []string{"--watch.include"},
			Description: `Limit watching to specified files`,
			Args: []model.Arg{{
				Name: "files",
			}},
		}, {
			Name:        []string{"--validate"},
			Description: `Validate output`,
		}},
	}
}
