// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["cicada"] = model.Subcommand{
		Name:        []string{"cicada"},
		Description: `Write CI/CD Pipelines in TypeScript`,
		Options: []model.Option{{
			Name:        []string{"-h", "--help"},
			Description: `Print help`,
		}, {
			Name:        []string{"-V", "--version"},
			Description: `Print version`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"run"},
			Description: `Run a cicada pipeline`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "pipeline",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-s", "--secret"},
				Description: `Name of the secret to use, these come from environment variables`,
				Args: []model.Arg{{
					Name:       "secret",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--dotenv"},
				Description: `Load a custom .env file`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "dotenv",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--secrets-json"},
				Description: `Load secrets from a json file`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "secrets_json",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--cicada-dockerfile"},
				Description: `A custom dockerfile to load the cicada bin from`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "cicada_dockerfile",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--oci-backend"},
				Description: `The OCI backend to use`,
				Args: []model.Arg{{
					Name:        "oci_backend",
					Suggestions: []model.Suggestion{{Name: []string{`docker`}}, {Name: []string{`podman`}}},
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"--no-dotenv"},
				Description: `Do not load .env file`,
			}, {
				Name:        []string{"--no-cache"},
				Description: `Disable caching`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help (see more with '--help')`,
			}},
		}, {
			Name:        []string{"step"},
			Description: `Run a step in a cicada workflow`,
			Args: []model.Arg{{
				Name: "workflow",
			}, {
				Name: "step",
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"init"},
			Description: `Initialize a cicada project, you can optionally specify a pipeline to create`,
			Args: []model.Arg{{
				Name:       "pipeline",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"new"},
			Description: `Create a cicada pipeline`,
			Args: []model.Arg{{
				Name: "pipeline",
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"update"},
			Description: `Update cicada`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"completions"},
			Description: `List all available completions`,
			Args: []model.Arg{{
				Name:        "shell",
				Suggestions: []model.Suggestion{{Name: []string{`bash`}}, {Name: []string{`elvish`}}, {Name: []string{`fish`}}, {Name: []string{`powershell`}}, {Name: []string{`zsh`}}},
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"fig-completion"},
			Description: `Create fig completions`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"open"},
			Description: `Open a pipeline in your editor`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "pipeline",
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"doctor"},
			Description: `Check for common issues`,
			Options: []model.Option{{
				Name:        []string{"--oci-backend"},
				Description: `The OCI backend to use`,
				Args: []model.Arg{{
					Name:        "oci_backend",
					Suggestions: []model.Suggestion{{Name: []string{`docker`}}, {Name: []string{`podman`}}},
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"debug"},
			Description: `Debug commands`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
			Subcommands: []model.Subcommand{{
				Name: []string{"daemon-info"},
				Options: []model.Option{{
					Name:        []string{"--oci-backend"},
					Description: `The OCI backend to use`,
					Args: []model.Arg{{
						Name:        "oci_backend",
						Suggestions: []model.Suggestion{{Name: []string{`docker`}}, {Name: []string{`podman`}}},
						IsOptional:  true,
					}},
				}, {
					Name: []string{"-j", "--json"},
				}, {
					Name:        []string{"-h", "--help"},
					Description: `Print help`,
				}},
			}, {
				Name: []string{"disk-usage", "du"},
				Options: []model.Option{{
					Name:        []string{"--oci-backend"},
					Description: `The OCI backend to use`,
					Args: []model.Arg{{
						Name:        "oci_backend",
						Suggestions: []model.Suggestion{{Name: []string{`docker`}}, {Name: []string{`podman`}}},
						IsOptional:  true,
					}},
				}, {
					Name: []string{"-j", "--json"},
				}, {
					Name:        []string{"-h", "--help"},
					Description: `Print help`,
				}},
			}, {
				Name: []string{"workers"},
				Options: []model.Option{{
					Name:        []string{"--oci-backend"},
					Description: `The OCI backend to use`,
					Args: []model.Arg{{
						Name:        "oci_backend",
						Suggestions: []model.Suggestion{{Name: []string{`docker`}}, {Name: []string{`podman`}}},
						IsOptional:  true,
					}},
				}, {
					Name: []string{"-j", "--json"},
				}, {
					Name:        []string{"-h", "--help"},
					Description: `Print help`,
				}},
			}, {
				Name:        []string{"help"},
				Description: `Print this message or the help of the given subcommand(s)`,
				Subcommands: []model.Subcommand{{
					Name: []string{"daemon-info"},
				}, {
					Name: []string{"disk-usage"},
				}, {
					Name: []string{"workers"},
				}, {
					Name:        []string{"help"},
					Description: `Print this message or the help of the given subcommand(s)`,
				}},
			}},
		}, {
			Name:        []string{"help"},
			Description: `Print this message or the help of the given subcommand(s)`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"run"},
				Description: `Run a cicada pipeline`,
			}, {
				Name:        []string{"step"},
				Description: `Run a step in a cicada workflow`,
			}, {
				Name:        []string{"init"},
				Description: `Initialize a cicada project, you can optionally specify a pipeline to create`,
			}, {
				Name:        []string{"new"},
				Description: `Create a cicada pipeline`,
			}, {
				Name:        []string{"update"},
				Description: `Update cicada`,
			}, {
				Name:        []string{"completions"},
				Description: `List all available completions`,
			}, {
				Name:        []string{"fig-completion"},
				Description: `Create fig completions`,
			}, {
				Name:        []string{"open"},
				Description: `Open a pipeline in your editor`,
			}, {
				Name:        []string{"doctor"},
				Description: `Check for common issues`,
			}, {
				Name:        []string{"debug"},
				Description: `Debug commands`,
				Subcommands: []model.Subcommand{{
					Name: []string{"daemon-info"},
				}, {
					Name: []string{"disk-usage"},
				}, {
					Name: []string{"workers"},
				}},
			}, {
				Name:        []string{"help"},
				Description: `Print this message or the help of the given subcommand(s)`,
			}},
		}},
	}
}
