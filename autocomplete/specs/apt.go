// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["apt"] = model.Subcommand{
		Name:        []string{"apt"},
		Description: `Package manager for Debian-based Linux distributions`,
		Options: []model.Option{{
			Name:         []string{"-h", "--help"},
			Description:  `Print help message and exit`,
			IsPersistent: true,
		}, {
			Name:         []string{"-v", "--version"},
			Description:  `Print version information and exit`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"update"},
			Description: `Update the package database`,
			Options: []model.Option{{
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}},
		}, {
			Name:        []string{"upgrade"},
			Description: `Install all available upgrades`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `Package(s) to upgrade`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}},
		}, {
			Name:        []string{"full-upgrade"},
			Description: `Install available upgrades, removing currently installed packages if needed to upgrade the system as a whole`,
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}},
		}, {
			Name:        []string{"install"},
			Description: `Install package(s)`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to install`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}, {
				Name:        []string{"--reinstall"},
				Description: `Reinstall the package if it is already installed`,
			}, {
				Name:        []string{"-f", "--fix-broken"},
				Description: `Attempt to fix broken packages`,
			}},
		}, {
			Name:        []string{"reinstall"},
			Description: `Reinstall package(s)`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to reinstall`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}},
		}, {
			Name:        []string{"remove"},
			Description: `Remove package(s)`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to remove`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}, {
				Name:        []string{"-f", "--fix-broken"},
				Description: `Attempt to fix broken packages`,
			}},
		}, {
			Name:        []string{"purge"},
			Description: `Remove package(s) and their configuration files`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to purge`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}},
		}, {
			Name:        []string{"autoremove", "auto-remove"},
			Description: `Remove unused packages`,
			Options: []model.Option{{
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}},
		}, {
			Name:        []string{"list"},
			Description: `List packages`,
			Options: []model.Option{{
				Name:        []string{"--installed"},
				Description: `List installed packages`,
			}, {
				Name:        []string{"--upgradable"},
				Description: `List upgradable packages`,
			}},
		}, {
			Name:        []string{"search"},
			Description: `Search for packages`,
			Args: []model.Arg{{
				Name:        "query",
				Description: `The query to search for`,
			}},
			Options: []model.Option{{
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}},
		}, {
			Name:        []string{"show"},
			Description: `Show package details`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to show`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"satisfy"},
			Description: `Satisfy package dependencies`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to satisfy`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}},
		}, {
			Name:        []string{"clean"},
			Description: `Remove downloaded package files`,
			Options: []model.Option{{
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}},
		}, {
			Name:        []string{"edit-sources"},
			Description: `Edit the list of package sources`,
			Options: []model.Option{{
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}},
		}, {
			Name:        []string{"source"},
			Description: `Fetch package source files`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to get source files for`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}, {
				Name:        []string{"--compile"},
				Description: `Compile the package to a binary using dpkg-buildpackage`,
			}, {
				Name: []string{"--only-source"},
			}, {
				Name:        []string{"--host-architecture"},
				Description: `The architecture to build for`,
				Args: []model.Arg{{
					Name:        "architecture",
					Description: `The architecture to build for`,
				}},
			}},
		}, {
			Name:        []string{"build-dep"},
			Description: `Install/remove packages in an attempt to satisfy the build dependencies for a source package`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to build dependencies for`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}, {
				Name:        []string{"--host-architecture"},
				Description: `The architecture to build for`,
				Args: []model.Arg{{
					Name:        "architecture",
					Description: `The architecture to build for`,
				}},
			}, {
				Name: []string{"--only-source"},
			}},
		}, {
			Name:        []string{"download"},
			Description: `Download package binary into the current directory`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to download`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}},
		}, {
			Name:        []string{"autoclean", "auto-clean"},
			Description: `Like clean, but only removes package files that can no longer be downloaded`,
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}, {
				Name:        []string{"-s", "--simulate"},
				Description: `Simulate running this command and show it's output, without actually changing anything`,
			}},
		}, {
			Name:        []string{"changelog"},
			Description: `Show the changelog for a package`,
			Args: []model.Arg{{
				Name:        "package",
				Description: `The package you want to show the changelog for`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--download-only"},
				Description: `For any operation that would download packages, download them, but do nothing else`,
			}, {
				Name:        []string{"--no-download"},
				Description: `Do not download packages, attempt to use already downloaded packages`,
			}, {
				Name:        []string{"-y"},
				Description: `Assume yes to all prompts`,
				ExclusiveOn: []string{"--assume-no"},
			}, {
				Name:        []string{"--assume-no"},
				Description: `Assume no to all prompts`,
				ExclusiveOn: []string{"-y"},
			}},
		}},
	}
}
