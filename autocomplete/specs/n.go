// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["n"] = model.Subcommand{
		Name:        []string{"n"},
		Description: `Node version management`,
		Args: []model.Arg{{
			Name: "version",
			Suggestions: []model.Suggestion{{
				Name:        []string{`latest`, `current`},
				Description: `Newest official release`,
			}, {
				Name:        []string{`lts`},
				Description: `Newest Long Term Support official release`,
			}, {
				Name:        []string{`auto`},
				Description: `Read version from file: .n-node-version, .node-version, .nvmrc, or package.json`,
			}, {
				Name:        []string{`engine`},
				Description: `Read version from package.json`,
			}},
			Generator:  nil, // TODO: port over generator
			IsOptional: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-V", "--version"},
			Description: `Output version of n`,
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Display help information`,
		}, {
			Name:        []string{"-p", "--preserve"},
			Description: `Preserve npm and npx during install of Node.js`,
		}, {
			Name:        []string{"--no-preserve"},
			Description: `Do not preserve npm and npx during install of Node.js`,
		}, {
			Name:        []string{"-q", "--quiet"},
			Description: `Disable curl output. Disable log messages processing "auto" and "engine" labels`,
		}, {
			Name:        []string{"-d", "--download"},
			Description: `Download only`,
		}, {
			Name:        []string{"-a", "--arch"},
			Description: `Override system architecture`,
			Args: []model.Arg{{
				Name: "Architecture",
				Suggestions: []model.Suggestion{{
					Name: []string{`x64`, `x86_64`},
				}, {
					Name: []string{`arm64`, `aarch64`, `armv8l`},
				}, {
					Name: []string{`x86`, `i386`, `i686`},
				}, {
					Name: []string{`armv6l`, `armv7l`},
				}},
			}},
		}, {
			Name:        []string{"--insecure"},
			Description: `Turn off certificate checking for https requests (may be needed from behind a proxy server)`,
		}, {
			Name:        []string{"--use-xz"},
			Description: `Override automatic detection of xz support and enable use of xz compressed node downloads`,
			ExclusiveOn: []string{"--no-use-xz"},
		}, {
			Name:        []string{"--no-use-xz"},
			Description: `Override automatic detection of xz support and disable use of xz compressed node downloads`,
			ExclusiveOn: []string{"--use-xz"},
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"i", "install"},
			Description: `Install a Node.js version`,
			Args: []model.Arg{{
				Name: "version",
				Suggestions: []model.Suggestion{{
					Name:        []string{`latest`, `current`},
					Description: `Newest official release`,
				}, {
					Name:        []string{`lts`},
					Description: `Newest Long Term Support official release`,
				}, {
					Name:        []string{`auto`},
					Description: `Read version from file: .n-node-version, .node-version, .nvmrc, or package.json`,
				}, {
					Name:        []string{`engine`},
					Description: `Read version from package.json`,
				}},
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"rm", "â€“"},
			Description: `Remove a Node.js version`,
			Args: []model.Arg{{
				Name: "version",
				Suggestions: []model.Suggestion{{
					Name:        []string{`latest`, `current`},
					Description: `Newest official release`,
				}, {
					Name:        []string{`lts`},
					Description: `Newest Long Term Support official release`,
				}, {
					Name:        []string{`auto`},
					Description: `Read version from file: .n-node-version, .node-version, .nvmrc, or package.json`,
				}, {
					Name:        []string{`engine`},
					Description: `Read version from package.json`,
				}},
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"prune"},
			Description: `Remove all cached Node.js versions except the installed version`,
		}, {
			Name:        []string{"doctor"},
			Description: `Display diagnostics to help resolve problems`,
		}, {
			Name:        []string{"uninstall"},
			Description: `Remove the installed Node.js`,
		}, {
			Name:        []string{"ls", "list"},
			Description: `Output downloaded versions`,
		}, {
			Name:        []string{"lsr", "ls-remote", "list-remote"},
			Description: `Output matching versions available for download`,
			Args: []model.Arg{{
				Name: "version",
				Suggestions: []model.Suggestion{{
					Name:        []string{`latest`, `current`},
					Description: `Newest official release`,
				}, {
					Name:        []string{`lts`},
					Description: `Newest Long Term Support official release`,
				}, {
					Name:        []string{`auto`},
					Description: `Read version from file: .n-node-version, .node-version, .nvmrc, or package.json`,
				}, {
					Name:        []string{`engine`},
					Description: `Read version from package.json`,
				}},
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Ls-remote displays all matches instead of last 20`,
			}},
		}, {
			Name:        []string{"which", "bin"},
			Description: `Output path for downloaded node version`,
			Args: []model.Arg{{
				Name: "version",
				Suggestions: []model.Suggestion{{
					Name:        []string{`latest`, `current`},
					Description: `Newest official release`,
				}, {
					Name:        []string{`lts`},
					Description: `Newest Long Term Support official release`,
				}, {
					Name:        []string{`auto`},
					Description: `Read version from file: .n-node-version, .node-version, .nvmrc, or package.json`,
				}, {
					Name:        []string{`engine`},
					Description: `Read version from package.json`,
				}},
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"run", "use", "as"},
			Description: `Execute downloaded Node.js version with args`,
			Args: []model.Arg{{
				Name: "version",
				Suggestions: []model.Suggestion{{
					Name:        []string{`latest`, `current`},
					Description: `Newest official release`,
				}, {
					Name:        []string{`lts`},
					Description: `Newest Long Term Support official release`,
				}, {
					Name:        []string{`auto`},
					Description: `Read version from file: .n-node-version, .node-version, .nvmrc, or package.json`,
				}, {
					Name:        []string{`engine`},
					Description: `Read version from package.json`,
				}},
				Generator: nil, // TODO: port over generator
			}, {
				Name:      "node script",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-e", "--eval=..."},
				Description: `Evaluate script`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"-p", "--print"},
				Description: `Evaluate script and print result`,
			}, {
				Name:        []string{"-c", "--check"},
				Description: `Syntax check script without executing`,
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Print Node.js version`,
			}, {
				Name:        []string{"-i", "--interactive"},
				Description: `Always enter the REPL even if stdin does not appear to be a terminal`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print node command line options (currently set)`,
			}, {
				Name:        []string{"--inspect"},
				Description: `Activate inspector on host:port (default: 127.0.0.1:9229)`,
				Args: []model.Arg{{
					Name:       "[host:]port",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--preserve-symlinks"},
				Description: `Follows symlinks to directories when examining source code and templates for translation strings`,
			}},
		}, {
			Name:        []string{"exec"},
			Description: `Execute command with modified PATH, so downloaded node version and npm first`,
			Args: []model.Arg{{
				Name: "version",
				Suggestions: []model.Suggestion{{
					Name:        []string{`latest`, `current`},
					Description: `Newest official release`,
				}, {
					Name:        []string{`lts`},
					Description: `Newest Long Term Support official release`,
				}, {
					Name:        []string{`auto`},
					Description: `Read version from file: .n-node-version, .node-version, .nvmrc, or package.json`,
				}, {
					Name:        []string{`engine`},
					Description: `Read version from package.json`,
				}},
				Generator: nil, // TODO: port over generator
			}, {
				Name:      "cmd",
				IsCommand: true,
			}, {
				Name:       "args",
				IsVariadic: true,
			}},
		}},
	}
}
