// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["rclone"] = model.Subcommand{
		Name:        []string{"rclone"},
		Description: `The Swiss army knife of cloud storage`,
		Options: []model.Option{{
			Name:        []string{"--version"},
			Description: `View your current rclone version`,
		}, {
			Name:        []string{"--help", "-h"},
			Description: `Show help for rclone commands, flags and backends`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"about"},
			Description: `Get quota information from the remote`,
			Args: []model.Arg{{
				Name:      "remote:",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--full"},
				Description: `Full numbers instead of SI units`,
			}, {
				Name:        []string{"--json"},
				Description: `Format output as JSON`,
			}},
		}, {
			Name:        []string{"authorize"},
			Description: `Remote authorization`,
			Options: []model.Option{{
				Name:        []string{"--auth-no-open-browser"},
				Description: `Do not automatically open auth link in default browser`,
			}},
		}, {
			Name:        []string{"backend"},
			Description: `Run a backend specific command`,
			Options: []model.Option{{
				Name:        []string{"--json"},
				Description: `Format output as JSON`,
			}},
		}, {
			Name:        []string{"cat"},
			Description: `Concatenates any files and sends them to stdout`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--discard"},
				Description: `Discard the output instead of printing`,
			}, {
				Name:        []string{"--count"},
				Description: `Only print N characters. (default -1)`,
				Args: []model.Arg{{
					Name: "int",
				}},
			}, {
				Name:        []string{"--head"},
				Description: `Only print the first N characters`,
				Args: []model.Arg{{
					Name: "int",
				}},
			}, {
				Name:        []string{"--offset"},
				Description: `Start printing at offset N (or from end if -ve)`,
				Args: []model.Arg{{
					Name: "int",
				}},
			}, {
				Name:        []string{"--tail"},
				Description: `Only print the last N characters`,
				Args: []model.Arg{{
					Name: "int",
				}},
			}},
		}, {
			Name:        []string{"check"},
			Description: `Checks the files in the source and destination match`,
			Args: []model.Arg{{
				Name:      "source:path",
				Generator: nil, // TODO: port over generator
			}, {
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--download"},
				Description: `Check by downloading rather than with hash`,
			}, {
				Name:        []string{"--combined"},
				Description: `Make a combined report of changes to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--differ"},
				Description: `Report all non-matching files to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--error"},
				Description: `Report all files with errors (hashing or reading) to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--match"},
				Description: `Report all matching files to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--missing-on-dst"},
				Description: `Report all files missing from the destination to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--missing-on-src"},
				Description: `Report all files missing from the source to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--one-way"},
				Description: `Check one way only, source files must exist on remote`,
			}},
		}, {
			Name:        []string{"cleanup"},
			Description: `Clean up the remote if possible`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"config"},
			Description: `Enter an interactive configuration session`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Create a new remote with name, type and options`,
				Args: []model.Arg{{
					Name: "name",
				}, {
					Name: "type",
				}},
			}},
		}, {
			Name:        []string{"copy"},
			Description: `Copy files from source to dest, skipping already copied`,
			Args: []model.Arg{{
				Name:      "source:path",
				Generator: nil, // TODO: port over generator
			}, {
				Name:      "dest:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"copyto"},
			Description: `Copy files from source to dest, skipping already copied`,
			Args: []model.Arg{{
				Name:      "source:path",
				Generator: nil, // TODO: port over generator
			}, {
				Name:      "dest:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"copyurl"},
			Description: `Copy url content to dest`,
			Args: []model.Arg{{
				Name: "url",
			}, {
				Name:      "dest:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"cryptcheck"},
			Description: `Cryptcheck checks the integrity of a crypted remote`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}, {
				Name:      "cryptedremote",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--combined"},
				Description: `Make a combined report of changes to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--differ"},
				Description: `Report all non-matching files to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--error"},
				Description: `Report all files with errors (hashing or reading) to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--match"},
				Description: `Report all matching files to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--missing-on-dst"},
				Description: `Report all files missing from the destination to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--missing-on-src"},
				Description: `Report all files missing from the source to this file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}, {
				Name:        []string{"--one-way"},
				Description: `Check one way only, source files must exist on remote`,
			}},
		}, {
			Name:        []string{"cryptdecode"},
			Description: `Cryptdecode returns unencrypted file names`,
			Args: []model.Arg{{
				Name:      "cryptedremote",
				Generator: nil, // TODO: port over generator
			}, {
				Name:       "encryptedfilename",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--reverse"},
				Description: `Reverse cryptdecode, encrypts filenames`,
			}},
		}, {
			Name:        []string{"dedupe"},
			Description: `Interactively find duplicate filenames and delete/rename them`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--by-hash"},
				Description: `Find identical hashes rather than names`,
			}, {
				Name:        []string{"--dedupe-mode"},
				Description: `Dedupe mode`,
				Args: []model.Arg{{
					Name: "mode",
					Suggestions: []model.Suggestion{{
						Name:        []string{`interactive`},
						Description: `Interactive`,
					}, {
						Name:        []string{`skip`},
						Description: `Removes identical files then skips anything left`,
					}, {
						Name:        []string{`rename`},
						Description: `Removes identical files then renames the rest to be different`,
					}, {
						Name:        []string{`list`},
						Description: `Lists duplicate dirs and files only and changes nothing`,
					}, {
						Name:        []string{`first`},
						Description: `removes identical files then keeps the first one.`,
					}, {
						Name:        []string{`newest`},
						Description: `removes identical files then keeps the newest one.`,
					}, {
						Name:        []string{`oldest`},
						Description: `removes identical files then keeps the oldest one.`,
					}, {
						Name:        []string{`largest`},
						Description: `removes identical files then keeps the largest one.`,
					}, {
						Name:        []string{`smallest`},
						Description: `removes identical files then keeps the smallest one.`,
					}},
				}},
			}},
		}, {
			Name:        []string{"delete"},
			Description: `Remove the files in path`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--rmdirs"},
				Description: `Rmdirs removes empty directories but leaves root intact`,
			}},
		}, {
			Name:        []string{"deletefile"},
			Description: `Remove a single file from remote`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"genautocomplete"},
			Description: `Output completion script for a given shell`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"bash"},
				Description: `Output bash completion script for rclone.`,
				Args: []model.Arg{{
					Name:        "output_file",
					Description: `If output_file is "-", then the output will be written to stdout`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"fish"},
				Description: `Output fish completion script for rclone.`,
				Args: []model.Arg{{
					Name:        "output_file",
					Description: `If output_file is "-", then the output will be written to stdout`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"zsh"},
				Description: `Output zsh completion script for rclone.`,
				Args: []model.Arg{{
					Name:        "output_file",
					Description: `If output_file is "-", then the output will be written to stdout`,
					IsOptional:  true,
				}},
			}},
		}, {
			Name:        []string{"gendocs"},
			Description: `Output markdown docs for rclone to the directory supplied`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "output_directory",
			}},
		}, {
			Name:        []string{"hashsum"},
			Description: `Produces a hashsum file for all the objects in the path`,
			Args: []model.Arg{{
				Name:        "hash",
				Suggestions: []model.Suggestion{{Name: []string{`MD5`}}, {Name: []string{`SHA-1`}}, {Name: []string{`DropboxHash`}}, {Name: []string{`QuickXorHash`}}, {Name: []string{`Whirlpool`}}, {Name: []string{`CRC-32`}}, {Name: []string{`MailruHash`}}},
			}, {
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--base64"},
				Description: `Output base64 encoded hashsum`,
			}, {
				Name:        []string{"--download"},
				Description: `Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote`,
			}, {
				Name:        []string{"--output-file"},
				Description: `Output hashsums to a file rather than the terminal`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
				}},
			}},
		}, {
			Name:        []string{"help"},
			Description: `Show help for rclone commands, flags and backends`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"flags"},
				Description: `List of global flags`,
			}},
		}, {
			Name:        []string{"link"},
			Description: `Generate public link to file/folder`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--expire"},
				Description: `The amount of time that the link will be valid (default 100y)`,
				Args: []model.Arg{{
					Name: "duration",
				}},
			}, {
				Name:        []string{"--unlink"},
				Description: `Remove existing public link to file/folder`,
			}},
		}, {
			Name:        []string{"listremotes"},
			Description: `List all the remotes in the config file`,
			Options: []model.Option{{
				Name:        []string{"--long"},
				Description: `Show the type as well as names`,
			}},
		}, {
			Name:        []string{"ls"},
			Description: `List the objects in the path with size and path`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"lsd"},
			Description: `List all directories/containers/buckets in the path`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name: []string{"-R", "--recursive"},
			}},
		}, {
			Name:        []string{"lsf"},
			Description: `List directories and objects in remote:path formatted for parsing`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--dirs-only"},
				Description: `Only list directories`,
			}, {
				Name:        []string{"--files-only"},
				Description: `Only list files`,
			}, {
				Name:        []string{"--recursive", "-R"},
				Description: `Recurse into the listing`,
			}, {
				Name:        []string{"--absolute"},
				Description: `Put a leading / in front of path names`,
			}, {
				Name:        []string{"--csv"},
				Description: `Output in CSV format`,
			}, {
				Name:        []string{"-d", "--dir-slash"},
				Description: `Append a slash to directory names. (default true)`,
			}, {
				Name:        []string{"--format", "-F"},
				Description: `Output format - see  help for details (default "p")`,
				Args: []model.Arg{{
					Name: "format",
					Suggestions: []model.Suggestion{{
						Name:        []string{`p`},
						Description: `path`,
					}, {
						Name:        []string{`s`},
						Description: `size`,
					}, {
						Name:        []string{`t`},
						Description: `modification time`,
					}, {
						Name:        []string{`h`},
						Description: `hash`,
					}, {
						Name:        []string{`i`},
						Description: `ID of object`,
					}, {
						Name:        []string{`o`},
						Description: `Original ID of underlying object`,
					}, {
						Name:        []string{`m`},
						Description: `MimeType of object if known`,
					}},
				}},
			}, {
				Name:        []string{"--hash"},
				Description: `Use this hash when h is used in the format (default "MD5")`,
				Args: []model.Arg{{
					Name:        "hash",
					Suggestions: []model.Suggestion{{Name: []string{`MD5`}}, {Name: []string{`SHA-1`}}, {Name: []string{`DropboxHash`}}, {Name: []string{`QuickXorHash`}}, {Name: []string{`Whirlpool`}}, {Name: []string{`CRC-32`}}, {Name: []string{`MailruHash`}}},
				}},
			}, {
				Name:        []string{"--separator", "-s"},
				Description: `Separator for the items in the format. (default ";")`,
				Args: []model.Arg{{
					Name: "separator",
				}},
			}},
		}, {
			Name:        []string{"lsjson"},
			Description: `List directories and objects in the path in JSON format`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--dirs-only"},
				Description: `Only list directories`,
			}, {
				Name:        []string{"--files-only"},
				Description: `Only list files`,
			}, {
				Name:        []string{"--recursive", "-R"},
				Description: `Recurse into the listing`,
			}, {
				Name:        []string{"--encrypted", "-M"},
				Description: `Show the encrypted names`,
			}, {
				Name:        []string{"--hash"},
				Description: `Include hashes in the output (may take longer)`,
			}, {
				Name:        []string{"--hash-type"},
				Description: `Show only this hash type (may be repeated)`,
				Args: []model.Arg{{
					Name:        "hashes",
					Suggestions: []model.Suggestion{{Name: []string{`MD5`}}, {Name: []string{`SHA-1`}}, {Name: []string{`DropboxHash`}}, {Name: []string{`QuickXorHash`}}, {Name: []string{`Whirlpool`}}, {Name: []string{`CRC-32`}}, {Name: []string{`MailruHash`}}},
				}},
			}, {
				Name:        []string{"--no-mimetype"},
				Description: `Don't read the mime type (can speed things up)`,
			}, {
				Name:        []string{"--no-modtime"},
				Description: `Don't read the modification time (can speed things up)`,
			}, {
				Name:        []string{"--original"},
				Description: `Show the ID of the underlying Object`,
			}},
		}, {
			Name:        []string{"lsl"},
			Description: `List the objects in path with modification time, size and path`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"md5sum"},
			Description: `Produces an md5sum file for all the objects in the path`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--base64"},
				Description: `Output base64 encoded hashsum`,
			}, {
				Name:        []string{"--download"},
				Description: `Download the file and hash it locally; if this flag is not specified, the hash is requested from the remote`,
			}, {
				Name:        []string{"--output-file"},
				Description: `Output hashsums to a file rather than the terminal`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "file",
				}},
			}},
		}, {
			Name:        []string{"mkdir"},
			Description: `Make the path if it doesn't already exist`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"mount"},
			Description: `Mount the remote as file system on a mountpoint`,
			Args: []model.Arg{{
				Name:      "remote:path",
				Generator: nil, // TODO: port over generator
			}, {
				Templates: []model.Template{model.TemplateFolders},
				Name:      "mountpoint",
			}},
		}, {
			Name:        []string{"move"},
			Description: `Move files from source to dest`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"moveto"},
			Description: `Move file or directory from source to dest`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"ncdu"},
			Description: `Explore a remote with a text based user interface`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"obscure"},
			Description: `Obscure password for use in the rclone config file`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"purge"},
			Description: `Remove the path and all of its contents`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"rc"},
			Description: `Run a command against a running rclone`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"rcat"},
			Description: `Copies standard input to file on remote`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"rcd"},
			Description: `Run rclone listening to remote control commands only`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"rmdir"},
			Description: `Remove the empty directory at path`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"rmdirs"},
			Description: `Remove empty directories under the path`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"selfupdate"},
			Description: `Update the rclone binary`,
		}, {
			Name:        []string{"serve"},
			Description: `Serve a remote over a protocol`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"settier"},
			Description: `Changes storage class/tier of objects in remote`,
			Args:        []model.Arg{{}, {}},
		}, {
			Name:        []string{"sha1sum"},
			Description: `Produces an sha1sum file for all the objects in the path`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"size"},
			Description: `Prints the total size and number of objects in remote:path`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"sync"},
			Description: `Make source and dest identical, modifying destination only`,
			Args: []model.Arg{{
				Name:      "source:path",
				Generator: nil, // TODO: port over generator
			}, {
				Name:      "dest:path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"test"},
			Description: `Run a test command`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"touch"},
			Description: `Create new file or change file modification time`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"tree"},
			Description: `List the contents of the remote in a tree like fashion`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"version"},
			Description: `Show the version number`,
		}},
	}
}
