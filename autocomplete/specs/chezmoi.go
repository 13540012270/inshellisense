// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["chezmoi"] = model.Subcommand{
		Name:        []string{"chezmoi"},
		Description: `Manage your dotfiles across multiple diverse machines, securely`,
		Options: []model.Option{{
			Name:        []string{"--cache"},
			Description: `Set cache directory`,
			Args: []model.Arg{{
				Name: "cache",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--color"},
			Description: `Colorize output`,
			Args: []model.Arg{{
				Name:        "color",
				Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}, {Name: []string{`auto`}}},
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--config", "-c"},
			Description: `Set config file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "config",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--config-format"},
			Description: `Set config file format`,
			Args: []model.Arg{{
				Name:        "config-format",
				Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`toml`}}, {Name: []string{`yaml`}}},
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--cpu-profile"},
			Description: `Write a CPU profile to path`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "cpu-profile",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--debug"},
			Description:  `Include debug information in output`,
			IsPersistent: true,
		}, {
			Name:        []string{"--destination", "-D"},
			Description: `Set destination directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "destination",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--dry-run", "-n"},
			Description:  `Do not make any modifications to the destination directory`,
			IsPersistent: true,
		}, {
			Name:         []string{"--force"},
			Description:  `Make all changes without prompting`,
			IsPersistent: true,
		}, {
			Name:         []string{"--gops"},
			Description:  `Enable gops agent`,
			IsPersistent: true,
		}, {
			Name:         []string{"--interactive"},
			Description:  `Prompt for all changes`,
			IsPersistent: true,
		}, {
			Name:         []string{"--keep-going", "-k"},
			Description:  `Keep going as far as possible after an error`,
			IsPersistent: true,
		}, {
			Name:        []string{"--mode"},
			Description: `Mode`,
			Args: []model.Arg{{
				Name:        "mode",
				Suggestions: []model.Suggestion{{Name: []string{`file`}}, {Name: []string{`symlink`}}},
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--no-pager"},
			Description:  `Do not use the pager`,
			IsPersistent: true,
		}, {
			Name:         []string{"--no-tty"},
			Description:  `Do not attempt to get a TTY for reading passwords`,
			IsPersistent: true,
		}, {
			Name:        []string{"--output", "-o"},
			Description: `Write output to path instead of stdout`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "output",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--persistent-state"},
			Description: `Set persistent state file`,
			Args: []model.Arg{{
				Name: "persistent-state",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--refresh-externals", "-R"},
			Description:  `Refresh external cache`,
			IsPersistent: true,
		}, {
			Name:         []string{"--safe"},
			Description:  `Safely replace files and symlinks`,
			IsPersistent: true,
		}, {
			Name:        []string{"--source", "-S"},
			Description: `Set source directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "source",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--source-path"},
			Description:  `Specify targets by source path`,
			IsPersistent: true,
		}, {
			Name:        []string{"--use-builtin-age"},
			Description: `Use builtin age`,
			Args: []model.Arg{{
				Name:        "use-builtin-age",
				Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}, {Name: []string{`auto`}}},
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--use-builtin-git"},
			Description: `Use builtin git`,
			Args: []model.Arg{{
				Name:        "use-builtin-git",
				Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}, {Name: []string{`auto`}}},
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--verbose", "-v"},
			Description:  `Make output more verbose`,
			IsPersistent: true,
		}, {
			Name:        []string{"--working-tree", "-W"},
			Description: `Set working tree directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "working-tree",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--help", "-h"},
			Description:  `Display help`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"manage", "add"},
			Description: `Add an existing file, directory, or symlink to the source state`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "file",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--autotemplate", "-a"},
				Description: `Generate the template when adding files as templates`,
			}, {
				Name:        []string{"--create"},
				Description: `Add files that should exist, irrespective of their contents`,
			}, {
				Name:        []string{"--encrypt"},
				Description: `Encrypt files`,
			}, {
				Name:        []string{"--exact"},
				Description: `Add directories exactly`,
			}, {
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--follow", "-f"},
				Description: `Add symlink targets instead of symlinks`,
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--prompt", "-p"},
				Description: `Prompt before adding each entry`,
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}, {
				Name:        []string{"--template", "-T"},
				Description: `Add files as templates`,
			}, {
				Name:        []string{"--template-symlinks"},
				Description: `Add symlinks with target in source or home dirs as templates`,
			}},
		}, {
			Name:        []string{"apply"},
			Description: `Update the destination directory to match the target state`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}},
		}, {
			Name:        []string{"archive"},
			Description: `Generate a tar archive of the target state`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set archive format`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`tar`}}, {Name: []string{`tar.bz2`}}, {Name: []string{`tar.gz`}}, {Name: []string{`tar.xz`}}, {Name: []string{`tbz2`}}, {Name: []string{`tgz`}}, {Name: []string{`txz`}}, {Name: []string{`zip`}}},
				}},
			}, {
				Name:        []string{"--gzip", "-z"},
				Description: `Compress output with gzip`,
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}},
		}, {
			Name:        []string{"cat"},
			Description: `Print the target contents of a file, script, or symlink`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "target",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"cd"},
			Description: `Launch a shell in the source directory`,
		}, {
			Name:        []string{"chattr"},
			Description: `Change the attributes of a target in the source state`,
			Args: []model.Arg{{
				Name:      "attributes/modifiers",
				Generator: nil, // TODO: port over generator
			}, {
				Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:       "target",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"completion"},
			Description: `Generate shell completion code`,
			Args: []model.Arg{{
				Name:        "shell",
				Suggestions: []model.Suggestion{{Name: []string{`bash`}}, {Name: []string{`fish`}}, {Name: []string{`zsh`}}, {Name: []string{`powershell`}}},
			}},
		}, {
			Name:        []string{"data"},
			Description: `Print the template data`,
			Options: []model.Option{{
				Name:        []string{"--format", "-f"},
				Description: `Format`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`yaml`}}},
				}},
				IsPersistent: true,
			}},
		}, {
			Name:        []string{"decrypt"},
			Description: `Decrypt file or standard input`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "file",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"diff"},
			Description: `Print the diff between the target state and the destination state`,
			Args: []model.Arg{{
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}, {
				Name:        []string{"--pager"},
				Description: `Set pager`,
				Args: []model.Arg{{
					Name: "pager",
				}},
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}, {
				Name:        []string{"--reverse"},
				Description: `Reverse the direction of the diff`,
			}, {
				Name:        []string{"--use-builtin-diff"},
				Description: `Use the builtin diff`,
			}},
		}, {
			Name:        []string{"doctor"},
			Description: `Check your system for potential problems`,
		}, {
			Name:        []string{"dump"},
			Description: `Generate a dump of the target state`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}},
		}, {
			Name:        []string{"edit"},
			Description: `Edit the source state of a target`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--apply", "-a"},
				Description: `Apply after editing`,
			}, {
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--hardlink"},
				Description: `Invoke editor with a hardlink to the source file`,
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}},
		}, {
			Name:        []string{"edit-config"},
			Description: `Edit the configuration file`,
		}, {
			Name:        []string{"encrypt"},
			Description: `Encrypt file or standard input`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"execute-template"},
			Description: `Execute the given template(s)`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "template",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--init", "-i"},
				Description: `Simulate chezmoi init`,
			}, {
				Name:        []string{"--promptBool"},
				Description: `Simulate promptBool`,
				Args: []model.Arg{{
					Name: "promptBool",
				}},
			}, {
				Name:        []string{"--promptInt"},
				Description: `Simulate promptInt`,
				Args: []model.Arg{{
					Name: "promptInt",
				}},
			}, {
				Name:        []string{"--promptString", "-p"},
				Description: `Simulate promptString`,
				Args: []model.Arg{{
					Name: "promptString",
				}},
			}, {
				Name:        []string{"--stdinisatty"},
				Description: `Simulate stdinIsATTY`,
			}},
		}, {
			Name:        []string{"unmanage", "forget"},
			Description: `Remove a target from the source state`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"generate"},
			Description: `Generate a file for use with chezmoi`,
			Args: []model.Arg{{
				Name:        "file",
				Suggestions: []model.Suggestion{{Name: []string{`install.sh`}}},
			}},
		}, {
			Name:        []string{"git"},
			Description: `Run git in the source directory`,
		}, {
			Name:        []string{"ignored"},
			Description: `Print ignored targets`,
		}, {
			Name:        []string{"import"},
			Description: `Import an archive into the source state`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "archive",
			}},
			Options: []model.Option{{
				Name:        []string{"--exact"},
				Description: `Set exact_ attribute on imported directories`,
			}, {
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--remove-destination", "-r"},
				Description: `Remove destination before import`,
			}, {
				Name:        []string{"--strip-components"},
				Description: `Strip leading path components`,
				Args: []model.Arg{{
					Name: "strip-components",
				}},
			}},
		}, {
			Name:        []string{"init"},
			Description: `Setup the source directory and update the destination directory to match the target state`,
			Args: []model.Arg{{
				Name: "source",
			}},
			Options: []model.Option{{
				Name:        []string{"--apply", "-a"},
				Description: `Update destination directory`,
			}, {
				Name:        []string{"--branch"},
				Description: `Set initial branch to checkout`,
				Args: []model.Arg{{
					Name: "branch",
				}},
			}, {
				Name:        []string{"--config-path", "-C"},
				Description: `Path to write generated config file`,
				Args: []model.Arg{{
					Name: "config-path",
				}},
			}, {
				Name:        []string{"--data"},
				Description: `Include existing template data`,
			}, {
				Name:        []string{"--depth", "-d"},
				Description: `Create a shallow clone`,
				Args: []model.Arg{{
					Name: "depth",
				}},
			}, {
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--guess-repo-url", "-g"},
				Description: `Guess the repo URL`,
			}, {
				Name:        []string{"--one-shot"},
				Description: `Run in one-shot mode`,
			}, {
				Name:        []string{"--prompt"},
				Description: `Force prompt*Once template functions to prompt`,
			}, {
				Name:        []string{"--purge", "-p"},
				Description: `Purge config and source directories after running`,
			}, {
				Name:        []string{"--purge-binary", "-P"},
				Description: `Purge chezmoi binary after running`,
			}, {
				Name:        []string{"--ssh"},
				Description: `Use ssh instead of https when guessing dotfile repo URL`,
			}},
		}, {
			Name:        []string{"license"},
			Description: `Print license`,
		}, {
			Name:        []string{"list", "managed"},
			Description: `List the managed entries in the destination directory`,
			Options: []model.Option{{
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}},
		}, {
			Name:        []string{"merge"},
			Description: `Perform a three-way merge between the destination state, the source state, and the target state`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"merge-all"},
			Description: `Perform a three-way merge for each modified file`,
			Options: []model.Option{{
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}},
		}, {
			Name:        []string{"purge"},
			Description: `Purge chezmoi's configuration and data`,
			Options: []model.Option{{
				Name:        []string{"--binary", "-P"},
				Description: `Purge chezmoi binary`,
			}},
		}, {
			Name:        []string{"re-add"},
			Description: `Re-add modified files`,
			Options: []model.Option{{
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}},
		}, {
			Name:        []string{"rm", "remove"},
			Description: `Remove a target from the source state and the destination directory`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}},
		}, {
			Name:        []string{"secret"},
			Description: `Interact with a secret manager`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"keyring"},
				Description: `Interact with keyring`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"delete"},
					Description: `Delete a value from keyring`,
					Options: []model.Option{{
						Name:        []string{"--service"},
						Description: `Service`,
						Args: []model.Arg{{
							Name: "service",
						}},
						IsPersistent: true,
					}, {
						Name:        []string{"--user"},
						Description: `User`,
						Args: []model.Arg{{
							Name: "user",
						}},
						IsPersistent: true,
					}},
				}, {
					Name:        []string{"get"},
					Description: `Get a value from keyring`,
					Options: []model.Option{{
						Name:        []string{"--service"},
						Description: `Service`,
						Args: []model.Arg{{
							Name: "service",
						}},
						IsPersistent: true,
					}, {
						Name:        []string{"--user"},
						Description: `User`,
						Args: []model.Arg{{
							Name: "user",
						}},
						IsPersistent: true,
					}},
				}, {
					Name:        []string{"set"},
					Description: `Set a value in keyring`,
					Options: []model.Option{{
						Name:        []string{"--service"},
						Description: `Service`,
						Args: []model.Arg{{
							Name: "service",
						}},
						IsPersistent: true,
					}, {
						Name:        []string{"--user"},
						Description: `User`,
						Args: []model.Arg{{
							Name: "user",
						}},
						IsPersistent: true,
					}, {
						Name:        []string{"--value"},
						Description: `Value`,
						Args: []model.Arg{{
							Name: "value",
						}},
						IsPersistent: true,
					}},
				}},
			}},
		}, {
			Name:        []string{"source-path"},
			Description: `Print the source path of a target`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"state"},
			Description: `Manipulate the persistent state`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"data"},
				Description: `Print the raw data in the persistent state`,
				Options: []model.Option{{
					Name:        []string{"--format", "-f"},
					Description: `Format`,
					Args: []model.Arg{{
						Name: "format",
					}},
					IsPersistent: true,
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a value from the persistent state`,
				Options: []model.Option{{
					Name:        []string{"--bucket"},
					Description: `Bucket`,
					Args: []model.Arg{{
						Name: "bucket",
					}},
					IsPersistent: true,
				}, {
					Name:        []string{"--key"},
					Description: `Key`,
					Args: []model.Arg{{
						Name: "key",
					}},
					IsPersistent: true,
				}},
			}, {
				Name:        []string{"delete-bucket"},
				Description: `Delete a bucket from the persistent state`,
				Options: []model.Option{{
					Name:        []string{"--bucket"},
					Description: `Bucket`,
					Args: []model.Arg{{
						Name: "bucket",
					}},
					IsPersistent: true,
				}},
			}, {
				Name:        []string{"dump"},
				Description: `Generate a dump of the persistent state`,
				Options: []model.Option{{
					Name:        []string{"--format", "-f"},
					Description: `Format`,
					Args: []model.Arg{{
						Name: "format",
					}},
					IsPersistent: true,
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get a value from the persistent state`,
				Options: []model.Option{{
					Name:        []string{"--bucket"},
					Description: `Bucket`,
					Args: []model.Arg{{
						Name: "bucket",
					}},
					IsPersistent: true,
				}, {
					Name:        []string{"--key"},
					Description: `Key`,
					Args: []model.Arg{{
						Name: "key",
					}},
					IsPersistent: true,
				}},
			}, {
				Name:        []string{"get-bucket"},
				Description: `Get a bucket from the persistent state`,
				Options: []model.Option{{
					Name:        []string{"--bucket"},
					Description: `Bucket`,
					Args: []model.Arg{{
						Name: "bucket",
					}},
					IsPersistent: true,
				}, {
					Name:        []string{"--format", "-f"},
					Description: `Format`,
					Args: []model.Arg{{
						Name: "format",
					}},
					IsPersistent: true,
				}},
			}, {
				Name:        []string{"reset"},
				Description: `Reset the persistent state`,
			}, {
				Name:        []string{"set"},
				Description: `Set a value from the persistent state`,
				Options: []model.Option{{
					Name:        []string{"--bucket"},
					Description: `Bucket`,
					Args: []model.Arg{{
						Name: "bucket",
					}},
					IsPersistent: true,
				}, {
					Name:        []string{"--key"},
					Description: `Key`,
					Args: []model.Arg{{
						Name: "key",
					}},
					IsPersistent: true,
				}, {
					Name:        []string{"--value"},
					Description: `Value`,
					Args: []model.Arg{{
						Name: "value",
					}},
					IsPersistent: true,
				}},
			}},
		}, {
			Name:        []string{"status"},
			Description: `Show the status of targets`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}},
		}, {
			Name:        []string{"target-path"},
			Description: `Print the target path of a source path`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "source",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"unmanaged"},
			Description: `List the unmanaged files in the destination directory`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "paths",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"update"},
			Description: `Pull and apply any changes`,
			Options: []model.Option{{
				Name:        []string{"--apply", "-a"},
				Description: `Apply after pulling`,
			}, {
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}},
		}, {
			Name:        []string{"upgrade"},
			Description: `Upgrade chezmoi to the latest released version`,
			Options: []model.Option{{
				Name:        []string{"--executable"},
				Description: `Set executable to replace`,
				Args: []model.Arg{{
					Name: "executable",
				}},
			}, {
				Name:        []string{"--method"},
				Description: `Set upgrade method`,
				Args: []model.Arg{{
					Name: "method",
				}},
			}, {
				Name:        []string{"--owner"},
				Description: `Set owner`,
				Args: []model.Arg{{
					Name: "owner",
				}},
			}, {
				Name:        []string{"--repo"},
				Description: `Set repo`,
				Args: []model.Arg{{
					Name: "repo",
				}},
			}},
		}, {
			Name:        []string{"verify"},
			Description: `Exit with success if the destination state matches the target state, fail otherwise`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "target",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--exclude", "-x"},
				Description: `Exclude entry types`,
				Args: []model.Arg{{
					Name:      "exclude",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--include", "-i"},
				Description: `Include entry types`,
				Args: []model.Arg{{
					Name:      "include",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--init"},
				Description: `Recreate config file from template`,
			}, {
				Name:        []string{"--recursive", "-r"},
				Description: `Recurse into subdirectories`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Help about any command`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"manage", "add"},
				Description: `Add an existing file, directory, or symlink to the source state`,
			}, {
				Name:        []string{"apply"},
				Description: `Update the destination directory to match the target state`,
			}, {
				Name:        []string{"archive"},
				Description: `Generate a tar archive of the target state`,
			}, {
				Name:        []string{"cat"},
				Description: `Print the target contents of a file, script, or symlink`,
			}, {
				Name:        []string{"cd"},
				Description: `Launch a shell in the source directory`,
			}, {
				Name:        []string{"chattr"},
				Description: `Change the attributes of a target in the source state`,
			}, {
				Name:        []string{"completion"},
				Description: `Generate shell completion code`,
			}, {
				Name:        []string{"data"},
				Description: `Print the template data`,
			}, {
				Name:        []string{"decrypt"},
				Description: `Decrypt file or standard input`,
			}, {
				Name:        []string{"diff"},
				Description: `Print the diff between the target state and the destination state`,
			}, {
				Name:        []string{"doctor"},
				Description: `Check your system for potential problems`,
			}, {
				Name:        []string{"dump"},
				Description: `Generate a dump of the target state`,
			}, {
				Name:        []string{"edit"},
				Description: `Edit the source state of a target`,
			}, {
				Name:        []string{"edit-config"},
				Description: `Edit the configuration file`,
			}, {
				Name:        []string{"encrypt"},
				Description: `Encrypt file or standard input`,
			}, {
				Name:        []string{"execute-template"},
				Description: `Execute the given template(s)`,
			}, {
				Name:        []string{"unmanage", "forget"},
				Description: `Remove a target from the source state`,
			}, {
				Name:        []string{"generate"},
				Description: `Generate a file for use with chezmoi`,
			}, {
				Name:        []string{"git"},
				Description: `Run git in the source directory`,
			}, {
				Name:        []string{"ignored"},
				Description: `Print ignored targets`,
			}, {
				Name:        []string{"import"},
				Description: `Import an archive into the source state`,
			}, {
				Name:        []string{"init"},
				Description: `Setup the source directory and update the destination directory to match the target state`,
			}, {
				Name:        []string{"license"},
				Description: `Print license`,
			}, {
				Name:        []string{"list", "managed"},
				Description: `List the managed entries in the destination directory`,
			}, {
				Name:        []string{"merge"},
				Description: `Perform a three-way merge between the destination state, the source state, and the target state`,
			}, {
				Name:        []string{"merge-all"},
				Description: `Perform a three-way merge for each modified file`,
			}, {
				Name:        []string{"purge"},
				Description: `Purge chezmoi's configuration and data`,
			}, {
				Name:        []string{"re-add"},
				Description: `Re-add modified files`,
			}, {
				Name:        []string{"rm", "remove"},
				Description: `Remove a target from the source state and the destination directory`,
			}, {
				Name:        []string{"secret"},
				Description: `Interact with a secret manager`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"keyring"},
					Description: `Interact with keyring`,
					Subcommands: []model.Subcommand{{
						Name:        []string{"delete"},
						Description: `Delete a value from keyring`,
					}, {
						Name:        []string{"get"},
						Description: `Get a value from keyring`,
					}, {
						Name:        []string{"set"},
						Description: `Set a value in keyring`,
					}},
				}},
			}, {
				Name:        []string{"source-path"},
				Description: `Print the source path of a target`,
			}, {
				Name:        []string{"state"},
				Description: `Manipulate the persistent state`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"data"},
					Description: `Print the raw data in the persistent state`,
				}, {
					Name:        []string{"delete"},
					Description: `Delete a value from the persistent state`,
				}, {
					Name:        []string{"delete-bucket"},
					Description: `Delete a bucket from the persistent state`,
				}, {
					Name:        []string{"dump"},
					Description: `Generate a dump of the persistent state`,
				}, {
					Name:        []string{"get"},
					Description: `Get a value from the persistent state`,
				}, {
					Name:        []string{"get-bucket"},
					Description: `Get a bucket from the persistent state`,
				}, {
					Name:        []string{"reset"},
					Description: `Reset the persistent state`,
				}, {
					Name:        []string{"set"},
					Description: `Set a value from the persistent state`,
				}},
			}, {
				Name:        []string{"status"},
				Description: `Show the status of targets`,
			}, {
				Name:        []string{"target-path"},
				Description: `Print the target path of a source path`,
			}, {
				Name:        []string{"unmanaged"},
				Description: `List the unmanaged files in the destination directory`,
			}, {
				Name:        []string{"update"},
				Description: `Pull and apply any changes`,
			}, {
				Name:        []string{"upgrade"},
				Description: `Upgrade chezmoi to the latest released version`,
			}, {
				Name:        []string{"verify"},
				Description: `Exit with success if the destination state matches the target state, fail otherwise`,
			}},
		}},
	}
}
