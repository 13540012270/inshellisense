// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["opa"] = model.Subcommand{
		Name:        []string{"opa"},
		Description: `Open Policy Agent (OPA)`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Help for opa`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"bench"},
			Description: `Benchmark a Rego query`,
			Options: []model.Option{{
				Name:        []string{"--benchmem"},
				Description: `Report memory allocations with benchmark results`,
			}, {
				Name:        []string{"--bundle", "-b"},
				Description: `Set bundle file(s) or directory path(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "bundle",
				}},
			}, {
				Name:        []string{"--count"},
				Description: `Number of times to repeat each benchmark`,
				Args: []model.Arg{{
					Name: "count",
				}},
			}, {
				Name:        []string{"--data", "-d"},
				Description: `Set policy or data file(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "data",
				}},
			}, {
				Name:        []string{"--fail"},
				Description: `Exits with non-zero exit code on undefined/empty result and errors`,
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--ignore"},
				Description: `Set file and directory names to ignore during loading (e.g., '.*' excludes hidden files)`,
				Args: []model.Arg{{
					Name: "ignore",
				}},
			}, {
				Name:        []string{"--import"},
				Description: `Set query import(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "import",
				}},
			}, {
				Name:        []string{"--input", "-i"},
				Description: `Set input file path`,
				Args: []model.Arg{{
					Name: "input",
				}},
			}, {
				Name:        []string{"--metrics"},
				Description: `Report query performance metrics`,
			}, {
				Name:        []string{"--package"},
				Description: `Set query package`,
				Args: []model.Arg{{
					Name: "package",
				}},
			}, {
				Name:        []string{"--partial", "-p"},
				Description: `Perform partial evaluation`,
			}, {
				Name:        []string{"--schema", "-s"},
				Description: `Set schema file path or directory path`,
				Args: []model.Arg{{
					Name: "schema",
				}},
			}, {
				Name:        []string{"--stdin"},
				Description: `Read query from stdin`,
			}, {
				Name:        []string{"--stdin-input", "-I"},
				Description: `Read input document from stdin`,
			}, {
				Name:        []string{"--target", "-t"},
				Description: `Set the runtime to exercise`,
				Args: []model.Arg{{
					Name: "target",
				}},
			}, {
				Name:        []string{"--unknowns", "-u"},
				Description: `Set paths to treat as unknown during partial evaluation`,
				Args: []model.Arg{{
					Name: "unknowns",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for bench`,
			}},
		}, {
			Name:        []string{"build"},
			Description: `Build an OPA bundle`,
			Options: []model.Option{{
				Name:        []string{"--bundle", "-b"},
				Description: `Load paths as bundle files or root directories`,
			}, {
				Name:        []string{"--capabilities"},
				Description: `Set capabilities.json file path`,
				Args: []model.Arg{{
					Name: "capabilities",
				}},
			}, {
				Name:        []string{"--claims-file"},
				Description: `Set path of JSON file containing optional claims (see: https://openpolicyagent.org/docs/latest/management/#signature-format)`,
				Args: []model.Arg{{
					Name: "claims-file",
				}},
			}, {
				Name:        []string{"--debug"},
				Description: `Enable debug output`,
			}, {
				Name:        []string{"--entrypoint", "-e"},
				Description: `Set slash separated entrypoint path`,
				Args: []model.Arg{{
					Name: "entrypoint",
				}},
			}, {
				Name:        []string{"--exclude-files-verify"},
				Description: `Set file names to exclude during bundle verification`,
				Args: []model.Arg{{
					Name: "exclude-files-verify",
				}},
			}, {
				Name:        []string{"--ignore"},
				Description: `Set file and directory names to ignore during loading (e.g., '.*' excludes hidden files)`,
				Args: []model.Arg{{
					Name: "ignore",
				}},
			}, {
				Name:        []string{"--optimize", "-O"},
				Description: `Set optimization level`,
				Args: []model.Arg{{
					Name: "optimize",
				}},
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Set the output filename`,
				Args: []model.Arg{{
					Name: "output",
				}},
			}, {
				Name:        []string{"--revision", "-r"},
				Description: `Set output bundle revision`,
				Args: []model.Arg{{
					Name: "revision",
				}},
			}, {
				Name:        []string{"--scope"},
				Description: `Scope to use for bundle signature verification`,
				Args: []model.Arg{{
					Name: "scope",
				}},
			}, {
				Name:        []string{"--signing-alg"},
				Description: `Name of the signing algorithm`,
				Args: []model.Arg{{
					Name: "signing-alg",
				}},
			}, {
				Name:        []string{"--signing-key"},
				Description: `Set the secret (HMAC) or path of the PEM file containing the private key (RSA and ECDSA)`,
				Args: []model.Arg{{
					Name: "signing-key",
				}},
			}, {
				Name:        []string{"--signing-plugin"},
				Description: `Name of the plugin to use for signing/verification (see https://openpolicyagent.org/docs/latest/management/#signature-plugin`,
				Args: []model.Arg{{
					Name: "signing-plugin",
				}},
			}, {
				Name:        []string{"--target", "-t"},
				Description: `Set the output bundle target type`,
				Args: []model.Arg{{
					Name: "target",
				}},
			}, {
				Name:        []string{"--verification-key"},
				Description: `Set the secret (HMAC) or path of the PEM file containing the public key (RSA and ECDSA)`,
				Args: []model.Arg{{
					Name: "verification-key",
				}},
			}, {
				Name:        []string{"--verification-key-id"},
				Description: `Name assigned to the verification key used for bundle verification`,
				Args: []model.Arg{{
					Name: "verification-key-id",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for build`,
			}},
		}, {
			Name:        []string{"check"},
			Description: `Check Rego source files`,
			Options: []model.Option{{
				Name:        []string{"--bundle", "-b"},
				Description: `Load paths as bundle files or root directories`,
			}, {
				Name:        []string{"--capabilities"},
				Description: `Set capabilities.json file path`,
				Args: []model.Arg{{
					Name: "capabilities",
				}},
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--ignore"},
				Description: `Set file and directory names to ignore during loading (e.g., '.*' excludes hidden files)`,
				Args: []model.Arg{{
					Name: "ignore",
				}},
			}, {
				Name:        []string{"--max-errors", "-m"},
				Description: `Set the number of errors to allow before compilation fails early`,
				Args: []model.Arg{{
					Name: "max-errors",
				}},
			}, {
				Name:        []string{"--schema", "-s"},
				Description: `Set schema file path or directory path`,
				Args: []model.Arg{{
					Name: "schema",
				}},
			}, {
				Name:        []string{"--strict", "-S"},
				Description: `Enable compiler strict mode`,
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for check`,
			}},
		}, {
			Name:        []string{"completion"},
			Description: `Generate the autocompletion script for the specified shell`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Help for completion`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"bash"},
				Description: `Generate the autocompletion script for bash`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for bash`,
				}},
			}, {
				Name:        []string{"fish"},
				Description: `Generate the autocompletion script for fish`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for fish`,
				}},
			}, {
				Name:        []string{"powershell"},
				Description: `Generate the autocompletion script for powershell`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for powershell`,
				}},
			}, {
				Name:        []string{"zsh"},
				Description: `Generate the autocompletion script for zsh`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}, {
					Name:        []string{"--help", "-h"},
					Description: `Help for zsh`,
				}},
			}},
		}, {
			Name:        []string{"deps"},
			Description: `Analyze Rego query dependencies`,
			Options: []model.Option{{
				Name:        []string{"--bundle", "-b"},
				Description: `Set bundle file(s) or directory path(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "bundle",
				}},
			}, {
				Name:        []string{"--data", "-d"},
				Description: `Set policy or data file(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "data",
				}},
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--ignore"},
				Description: `Set file and directory names to ignore during loading (e.g., '.*' excludes hidden files)`,
				Args: []model.Arg{{
					Name: "ignore",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for deps`,
			}},
		}, {
			Name:        []string{"eval"},
			Description: `Evaluate a Rego query`,
			Options: []model.Option{{
				Name:        []string{"--bundle", "-b"},
				Description: `Set bundle file(s) or directory path(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "bundle",
				}},
			}, {
				Name:        []string{"--capabilities"},
				Description: `Set capabilities.json file path`,
				Args: []model.Arg{{
					Name: "capabilities",
				}},
			}, {
				Name:        []string{"--count"},
				Description: `Number of times to repeat each benchmark`,
				Args: []model.Arg{{
					Name: "count",
				}},
			}, {
				Name:        []string{"--coverage"},
				Description: `Report coverage`,
			}, {
				Name:        []string{"--data", "-d"},
				Description: `Set policy or data file(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "data",
				}},
			}, {
				Name:        []string{"--disable-early-exit"},
				Description: `Disable 'early exit' optimizations`,
			}, {
				Name:        []string{"--disable-indexing"},
				Description: `Disable indexing optimizations`,
			}, {
				Name:        []string{"--disable-inlining"},
				Description: `Set paths of documents to exclude from inlining`,
				Args: []model.Arg{{
					Name: "disable-inlining",
				}},
			}, {
				Name:        []string{"--explain"},
				Description: `Enable query explanations`,
				Args: []model.Arg{{
					Name: "explain",
				}},
			}, {
				Name:        []string{"--fail"},
				Description: `Exits with non-zero exit code on undefined/empty result and errors`,
			}, {
				Name:        []string{"--fail-defined"},
				Description: `Exits with non-zero exit code on defined/non-empty result and errors`,
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--ignore"},
				Description: `Set file and directory names to ignore during loading (e.g., '.*' excludes hidden files)`,
				Args: []model.Arg{{
					Name: "ignore",
				}},
			}, {
				Name:        []string{"--import"},
				Description: `Set query import(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "import",
				}},
			}, {
				Name:        []string{"--input", "-i"},
				Description: `Set input file path`,
				Args: []model.Arg{{
					Name: "input",
				}},
			}, {
				Name:        []string{"--instrument"},
				Description: `Enable query instrumentation metrics (implies --metrics)`,
			}, {
				Name:        []string{"--metrics"},
				Description: `Report query performance metrics`,
			}, {
				Name:        []string{"--package"},
				Description: `Set query package`,
				Args: []model.Arg{{
					Name: "package",
				}},
			}, {
				Name:        []string{"--partial", "-p"},
				Description: `Perform partial evaluation`,
			}, {
				Name:        []string{"--pretty-limit"},
				Description: `Set limit after which pretty output gets truncated`,
				Args: []model.Arg{{
					Name: "pretty-limit",
				}},
			}, {
				Name:        []string{"--profile"},
				Description: `Perform expression profiling`,
			}, {
				Name:        []string{"--profile-limit"},
				Description: `Set number of profiling results to show`,
				Args: []model.Arg{{
					Name: "profile-limit",
				}},
			}, {
				Name:        []string{"--profile-sort"},
				Description: `Set sort order of expression profiler results`,
				Args: []model.Arg{{
					Name: "profile-sort",
				}},
			}, {
				Name:        []string{"--schema", "-s"},
				Description: `Set schema file path or directory path`,
				Args: []model.Arg{{
					Name: "schema",
				}},
			}, {
				Name:        []string{"--shallow-inlining"},
				Description: `Disable inlining of rules that depend on unknowns`,
			}, {
				Name:        []string{"--stdin"},
				Description: `Read query from stdin`,
			}, {
				Name:        []string{"--stdin-input", "-I"},
				Description: `Read input document from stdin`,
			}, {
				Name:        []string{"--strict-builtin-errors"},
				Description: `Treat built-in function errors as fatal`,
			}, {
				Name:        []string{"--target", "-t"},
				Description: `Set the runtime to exercise`,
				Args: []model.Arg{{
					Name: "target",
				}},
			}, {
				Name:        []string{"--timeout"},
				Description: `Set eval timeout (default unlimited)`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}, {
				Name:        []string{"--unknowns", "-u"},
				Description: `Set paths to treat as unknown during partial evaluation`,
				Args: []model.Arg{{
					Name: "unknowns",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for eval`,
			}},
		}, {
			Name:        []string{"exec"},
			Description: `Execute against input files`,
			Options: []model.Option{{
				Name:        []string{"--bundle", "-b"},
				Description: `Set bundle file(s) or directory path(s). This flag can be repeated`,
				Args: []model.Arg{{
					Name: "bundle",
				}},
			}, {
				Name:        []string{"--config-file", "-c"},
				Description: `Set path of configuration file`,
				Args: []model.Arg{{
					Name: "config-file",
				}},
			}, {
				Name:        []string{"--decision"},
				Description: `Set decision to evaluate`,
				Args: []model.Arg{{
					Name: "decision",
				}},
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--log-format"},
				Description: `Set log format`,
				Args: []model.Arg{{
					Name: "log-format",
				}},
			}, {
				Name:        []string{"--log-level", "-l"},
				Description: `Set log level`,
				Args: []model.Arg{{
					Name: "log-level",
				}},
			}, {
				Name:        []string{"--set"},
				Description: `Override config values on the command line (use commas to specify multiple values)`,
				Args: []model.Arg{{
					Name: "set",
				}},
			}, {
				Name:        []string{"--set-file"},
				Description: `Override config values with files on the command line (use commas to specify multiple values)`,
				Args: []model.Arg{{
					Name: "set-file",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for exec`,
			}},
		}, {
			Name:        []string{"fmt"},
			Description: `Format Rego source files`,
			Options: []model.Option{{
				Name:        []string{"--diff", "-d"},
				Description: `Only display a diff of the changes`,
			}, {
				Name:        []string{"--fail"},
				Description: `Non zero exit code on reformat`,
			}, {
				Name:        []string{"--list", "-l"},
				Description: `List all files who would change when formatted`,
			}, {
				Name:        []string{"--write", "-w"},
				Description: `Overwrite the original source file`,
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for fmt`,
			}},
		}, {
			Name:        []string{"inspect"},
			Description: `Inspect OPA bundle(s)`,
			Options: []model.Option{{
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for inspect`,
			}},
		}, {
			Name:        []string{"parse"},
			Description: `Parse Rego source file`,
			Options: []model.Option{{
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for parse`,
			}},
		}, {
			Name:        []string{"run"},
			Description: `Start OPA in interactive or server mode`,
			Options: []model.Option{{
				Name:        []string{"--addr", "-a"},
				Description: `Set listening address of the server (e.g., [ip]:<port> for TCP, unix://<path> for UNIX domain socket)`,
				Args: []model.Arg{{
					Name: "addr",
				}},
			}, {
				Name:        []string{"--authentication"},
				Description: `Set authentication scheme`,
				Args: []model.Arg{{
					Name: "authentication",
				}},
			}, {
				Name:        []string{"--authorization"},
				Description: `Set authorization scheme`,
				Args: []model.Arg{{
					Name: "authorization",
				}},
			}, {
				Name:        []string{"--bundle", "-b"},
				Description: `Load paths as bundle files or root directories`,
			}, {
				Name:        []string{"--config-file", "-c"},
				Description: `Set path of configuration file`,
				Args: []model.Arg{{
					Name: "config-file",
				}},
			}, {
				Name:        []string{"--diagnostic-addr"},
				Description: `Set read-only diagnostic listening address of the server for /health and /metric APIs (e.g., [ip]:<port> for TCP, unix://<path> for UNIX domain socket)`,
				Args: []model.Arg{{
					Name: "diagnostic-addr",
				}},
			}, {
				Name:        []string{"--exclude-files-verify"},
				Description: `Set file names to exclude during bundle verification`,
				Args: []model.Arg{{
					Name: "exclude-files-verify",
				}},
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set shell output format, i.e, pretty, json`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--h2c"},
				Description: `Enable H2C for HTTP listeners`,
			}, {
				Name:        []string{"--history", "-H"},
				Description: `Set path of history file`,
				Args: []model.Arg{{
					Name: "history",
				}},
			}, {
				Name:        []string{"--ignore"},
				Description: `Set file and directory names to ignore during loading (e.g., '.*' excludes hidden files)`,
				Args: []model.Arg{{
					Name: "ignore",
				}},
			}, {
				Name:        []string{"--log-format"},
				Description: `Set log format`,
				Args: []model.Arg{{
					Name: "log-format",
				}},
			}, {
				Name:        []string{"--log-level", "-l"},
				Description: `Set log level`,
				Args: []model.Arg{{
					Name: "log-level",
				}},
			}, {
				Name:        []string{"--max-errors", "-m"},
				Description: `Set the number of errors to allow before compilation fails early`,
				Args: []model.Arg{{
					Name: "max-errors",
				}},
			}, {
				Name:        []string{"--min-tls-version"},
				Description: `Set minimum TLS version to be used by OPA's server`,
				Args: []model.Arg{{
					Name: "min-tls-version",
				}},
			}, {
				Name:        []string{"--pprof"},
				Description: `Enables pprof endpoints`,
			}, {
				Name:        []string{"--ready-timeout"},
				Description: `Wait (in seconds) for configured plugins before starting server (value <= 0 disables ready check)`,
				Args: []model.Arg{{
					Name: "ready-timeout",
				}},
			}, {
				Name:        []string{"--scope"},
				Description: `Scope to use for bundle signature verification`,
				Args: []model.Arg{{
					Name: "scope",
				}},
			}, {
				Name:        []string{"--server", "-s"},
				Description: `Start the runtime in server mode`,
			}, {
				Name:        []string{"--set"},
				Description: `Override config values on the command line (use commas to specify multiple values)`,
				Args: []model.Arg{{
					Name: "set",
				}},
			}, {
				Name:        []string{"--set-file"},
				Description: `Override config values with files on the command line (use commas to specify multiple values)`,
				Args: []model.Arg{{
					Name: "set-file",
				}},
			}, {
				Name:        []string{"--shutdown-grace-period"},
				Description: `Set the time (in seconds) that the server will wait to gracefully shut down`,
				Args: []model.Arg{{
					Name: "shutdown-grace-period",
				}},
			}, {
				Name:        []string{"--shutdown-wait-period"},
				Description: `Set the time (in seconds) that the server will wait before initiating shutdown`,
				Args: []model.Arg{{
					Name: "shutdown-wait-period",
				}},
			}, {
				Name:        []string{"--signing-alg"},
				Description: `Name of the signing algorithm`,
				Args: []model.Arg{{
					Name: "signing-alg",
				}},
			}, {
				Name:        []string{"--skip-verify"},
				Description: `Disables bundle signature verification`,
			}, {
				Name:        []string{"--skip-version-check"},
				Description: `Disables anonymous version reporting (see: https://openpolicyagent.org/docs/latest/privacy)`,
			}, {
				Name:        []string{"--tls-ca-cert-file"},
				Description: `Set path of TLS CA cert file`,
				Args: []model.Arg{{
					Name: "tls-ca-cert-file",
				}},
			}, {
				Name:        []string{"--tls-cert-file"},
				Description: `Set path of TLS certificate file`,
				Args: []model.Arg{{
					Name: "tls-cert-file",
				}},
			}, {
				Name:        []string{"--tls-cert-refresh-period"},
				Description: `Set certificate refresh period`,
				Args: []model.Arg{{
					Name: "tls-cert-refresh-period",
				}},
			}, {
				Name:        []string{"--tls-private-key-file"},
				Description: `Set path of TLS private key file`,
				Args: []model.Arg{{
					Name: "tls-private-key-file",
				}},
			}, {
				Name:        []string{"--verification-key"},
				Description: `Set the secret (HMAC) or path of the PEM file containing the public key (RSA and ECDSA)`,
				Args: []model.Arg{{
					Name: "verification-key",
				}},
			}, {
				Name:        []string{"--verification-key-id"},
				Description: `Name assigned to the verification key used for bundle verification`,
				Args: []model.Arg{{
					Name: "verification-key-id",
				}},
			}, {
				Name:        []string{"--watch", "-w"},
				Description: `Watch command line files for changes`,
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for run`,
			}},
		}, {
			Name:        []string{"sign"},
			Description: `Generate an OPA bundle signature`,
			Options: []model.Option{{
				Name:        []string{"--bundle", "-b"},
				Description: `Load paths as bundle files or root directories`,
			}, {
				Name:        []string{"--claims-file"},
				Description: `Set path of JSON file containing optional claims (see: https://openpolicyagent.org/docs/latest/management/#signature-format)`,
				Args: []model.Arg{{
					Name: "claims-file",
				}},
			}, {
				Name:        []string{"--output-file-path", "-o"},
				Description: `Set the location for the .signatures.json file`,
				Args: []model.Arg{{
					Name: "output-file-path",
				}},
			}, {
				Name:        []string{"--signing-alg"},
				Description: `Name of the signing algorithm`,
				Args: []model.Arg{{
					Name: "signing-alg",
				}},
			}, {
				Name:        []string{"--signing-key"},
				Description: `Set the secret (HMAC) or path of the PEM file containing the private key (RSA and ECDSA)`,
				Args: []model.Arg{{
					Name: "signing-key",
				}},
			}, {
				Name:        []string{"--signing-plugin"},
				Description: `Name of the plugin to use for signing/verification (see https://openpolicyagent.org/docs/latest/management/#signature-plugin`,
				Args: []model.Arg{{
					Name: "signing-plugin",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for sign`,
			}},
		}, {
			Name:        []string{"test"},
			Description: `Execute Rego test cases`,
			Options: []model.Option{{
				Name:        []string{"--bench"},
				Description: `Benchmark the unit tests`,
			}, {
				Name:        []string{"--benchmem"},
				Description: `Report memory allocations with benchmark results`,
			}, {
				Name:        []string{"--bundle", "-b"},
				Description: `Load paths as bundle files or root directories`,
			}, {
				Name:        []string{"--count"},
				Description: `Number of times to repeat each test`,
				Args: []model.Arg{{
					Name: "count",
				}},
			}, {
				Name:        []string{"--coverage", "-c"},
				Description: `Report coverage (overrides debug tracing)`,
			}, {
				Name:        []string{"--exit-zero-on-skipped", "-z"},
				Description: `Skipped tests return status 0`,
			}, {
				Name:        []string{"--explain"},
				Description: `Enable query explanations`,
				Args: []model.Arg{{
					Name: "explain",
				}},
			}, {
				Name:        []string{"--format", "-f"},
				Description: `Set output format`,
				Args: []model.Arg{{
					Name: "format",
				}},
			}, {
				Name:        []string{"--ignore"},
				Description: `Set file and directory names to ignore during loading (e.g., '.*' excludes hidden files)`,
				Args: []model.Arg{{
					Name: "ignore",
				}},
			}, {
				Name:        []string{"--max-errors", "-m"},
				Description: `Set the number of errors to allow before compilation fails early`,
				Args: []model.Arg{{
					Name: "max-errors",
				}},
			}, {
				Name:        []string{"--run", "-r"},
				Description: `Run only test cases matching the regular expression`,
				Args: []model.Arg{{
					Name: "run",
				}},
			}, {
				Name:        []string{"--show-failure-line", "-l"},
				Description: `Show test failure line`,
			}, {
				Name:        []string{"--target", "-t"},
				Description: `Set the runtime to exercise`,
				Args: []model.Arg{{
					Name: "target",
				}},
			}, {
				Name:        []string{"--threshold"},
				Description: `Set coverage threshold and exit with non-zero status if coverage is less than threshold %`,
				Args: []model.Arg{{
					Name: "threshold",
				}},
			}, {
				Name:        []string{"--timeout"},
				Description: `Set test timeout (default 5s, 30s when benchmarking)`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}, {
				Name:        []string{"--verbose", "-v"},
				Description: `Set verbose reporting mode`,
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for test`,
			}},
		}, {
			Name:        []string{"version"},
			Description: `Print the version of OPA`,
			Options: []model.Option{{
				Name:        []string{"--check", "-c"},
				Description: `Check for latest OPA release`,
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for version`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Help about any command`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Help for help`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"bench"},
				Description: `Benchmark a Rego query`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for bench`,
				}},
			}, {
				Name:        []string{"build"},
				Description: `Build an OPA bundle`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for build`,
				}},
			}, {
				Name:        []string{"check"},
				Description: `Check Rego source files`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for check`,
				}},
			}, {
				Name:        []string{"completion"},
				Description: `Generate the autocompletion script for the specified shell`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for completion`,
				}},
				Subcommands: []model.Subcommand{{
					Name:        []string{"bash"},
					Description: `Generate the autocompletion script for bash`,
					Options: []model.Option{{
						Name:        []string{"--no-descriptions"},
						Description: `Disable completion descriptions`,
					}, {
						Name:        []string{"--help", "-h"},
						Description: `Help for bash`,
					}},
				}, {
					Name:        []string{"fish"},
					Description: `Generate the autocompletion script for fish`,
					Options: []model.Option{{
						Name:        []string{"--no-descriptions"},
						Description: `Disable completion descriptions`,
					}, {
						Name:        []string{"--help", "-h"},
						Description: `Help for fish`,
					}},
				}, {
					Name:        []string{"powershell"},
					Description: `Generate the autocompletion script for powershell`,
					Options: []model.Option{{
						Name:        []string{"--no-descriptions"},
						Description: `Disable completion descriptions`,
					}, {
						Name:        []string{"--help", "-h"},
						Description: `Help for powershell`,
					}},
				}, {
					Name:        []string{"zsh"},
					Description: `Generate the autocompletion script for zsh`,
					Options: []model.Option{{
						Name:        []string{"--no-descriptions"},
						Description: `Disable completion descriptions`,
					}, {
						Name:        []string{"--help", "-h"},
						Description: `Help for zsh`,
					}},
				}},
			}, {
				Name:        []string{"deps"},
				Description: `Analyze Rego query dependencies`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for deps`,
				}},
			}, {
				Name:        []string{"eval"},
				Description: `Evaluate a Rego query`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for eval`,
				}},
			}, {
				Name:        []string{"exec"},
				Description: `Execute against input files`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for exec`,
				}},
			}, {
				Name:        []string{"fmt"},
				Description: `Format Rego source files`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for fmt`,
				}},
			}, {
				Name:        []string{"inspect"},
				Description: `Inspect OPA bundle(s)`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for inspect`,
				}},
			}, {
				Name:        []string{"parse"},
				Description: `Parse Rego source file`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for parse`,
				}},
			}, {
				Name:        []string{"run"},
				Description: `Start OPA in interactive or server mode`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for run`,
				}},
			}, {
				Name:        []string{"sign"},
				Description: `Generate an OPA bundle signature`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for sign`,
				}},
			}, {
				Name:        []string{"test"},
				Description: `Execute Rego test cases`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for test`,
				}},
			}, {
				Name:        []string{"version"},
				Description: `Print the version of OPA`,
				Options: []model.Option{{
					Name:        []string{"--help", "-h"},
					Description: `Help for version`,
				}},
			}},
		}},
	}
}
