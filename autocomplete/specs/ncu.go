// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["ncu"] = model.Subcommand{
		Name:        []string{"ncu"},
		Description: `Upgrade your npm package.json dependencies to the latest versions, ignoring specified versions`,
		Args: []model.Arg{{
			Name:        "filter",
			Description: `A list or regex of package names to check (all others will be ignored)`,
			IsOptional:  true,
			IsVariadic:  true,
		}},
		Options: []model.Option{{
			Name:        []string{"--cache"},
			Description: `Cache versions to a local cache file. Default --cacheFile is ~/.ncu-cache.json and default --cacheExpiration is 10 minutes`,
		}, {
			Name:        []string{"--cacheClear"},
			Description: `Clear the default cache, or the cache file specified by --cacheFile`,
		}, {
			Name:        []string{"--cacheExpiration"},
			Description: `Cache expiration in minutes. Only works with --cache. (default: 10)`,
			Args: []model.Arg{{
				Name: "min",
			}},
		}, {
			Name:        []string{"--cacheFile"},
			Description: `Filepath for the cache file. Only works with --cache. (default: "~/.ncu-cache.json")`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--color"},
			Description: `Force color in terminal`,
		}, {
			Name:        []string{"--concurrency"},
			Description: `Max number of concurrent HTTP requests to registry. (default: 8)`,
			Args: []model.Arg{{
				Name: "n",
			}},
		}, {
			Name:        []string{"--configFileName"},
			Description: `Config file name. (default: .ncurc.{json,yml,js,cjs})`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "s",
			}},
		}, {
			Name:        []string{"--configFilePath"},
			Description: `Directory of .ncurc config file. (default: directory of packageFile)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--cwd"},
			Description: `Working directory in which npm will be executed`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--deep"},
			Description: `Run recursively in current working directory. Alias of (--packageFile '**/package.json')`,
		}, {
			Name:        []string{"--dep"},
			Description: `Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: ["prod","dev","optional"])`,
			Args: []model.Arg{{
				Name:        "value",
				Suggestions: []model.Suggestion{{Name: []string{`dev`}}, {Name: []string{`optional`}}, {Name: []string{`peer`}}, {Name: []string{`prod`}}, {Name: []string{`packageManager`}}},
			}},
		}, {
			Name:        []string{"--deprecated"},
			Description: `Include deprecated packages`,
		}, {
			Name:        []string{"--doctor", "-d"},
			Description: `Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires -u to execute. Run "ncu --help --doctor" for details`,
		}, {
			Name:        []string{"--doctorInstall"},
			Description: `Specifies the install script to use in doctor mode. (default: npm install/yarn)`,
			Args: []model.Arg{{
				Name: "command",
			}},
		}, {
			Name:        []string{"--doctorTest"},
			Description: `Specifies the test script to use in doctor mode. (default: npm test)`,
			Args: []model.Arg{{
				Name: "command",
			}},
		}, {
			Name:        []string{"--enginesNode"},
			Description: `Include only packages that satisfy engines.node as specified in the package file`,
		}, {
			Name:        []string{"--errorLevel", "-e"},
			Description: `Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)`,
			Args: []model.Arg{{
				Name: "n",
			}},
		}, {
			Name:        []string{"--filter", "-f"},
			Description: `Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function`,
			Args: []model.Arg{{
				Name: "p",
			}},
		}, {
			Name:        []string{"--filterResults"},
			Description: `Filters out upgrades based on a user provided function. Run "ncu --help --filterResults" for details`,
		}, {
			Name:        []string{"--filterVersion"},
			Description: `Filter on package version using comma-or-space-delimited list, /regex/, or predicate function`,
			Args: []model.Arg{{
				Name: "p",
			}},
		}, {
			Name:        []string{"--format"},
			Description: `Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines. Run "ncu --help --format" for details. (default: [])`,
			Args: []model.Arg{{
				Name:        "value",
				Suggestions: []model.Suggestion{{Name: []string{`group`}}, {Name: []string{`ownerChanged`}}, {Name: []string{`repo`}}, {Name: []string{`time`}}, {Name: []string{`lines`}}},
			}},
		}, {
			Name:        []string{"--global", "-g"},
			Description: `Check global packages instead of in the current project`,
		}, {
			Name:        []string{"--groupFunction"},
			Description: `Customize how packages are divided into groups when using --format group. Run "ncu --help --groupFunction" for details`,
		}, {
			Name:        []string{"--help", "-h"},
			Description: `Show help`,
		}, {
			Name:        []string{"--interactive", "-i"},
			Description: `Enable interactive prompts for each dependency; implies -u unless one of the json options are set`,
		}, {
			Name:        []string{"--jsonAll", "-j"},
			Description: `Output new package file instead of human-readable message`,
		}, {
			Name:        []string{"--jsonDeps"},
			Description: `Like jsonAll but only lists dependencies, devDependencies, optionalDependencies, etc of the new package data`,
		}, {
			Name:        []string{"--jsonUpgraded"},
			Description: `Output upgraded dependencies in json`,
		}, {
			Name:        []string{"--loglevel", "-l"},
			Description: `Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: "warn")`,
			Args: []model.Arg{{
				Name:        "n",
				Suggestions: []model.Suggestion{{Name: []string{`silent`}}, {Name: []string{`error`}}, {Name: []string{`minimal`}}, {Name: []string{`warn`}}, {Name: []string{`info`}}, {Name: []string{`verbose`}}, {Name: []string{`silly`}}},
			}},
		}, {
			Name:        []string{"--mergeConfig"},
			Description: `Merges nested configs with the root config file for --deep or --packageFile options. (default: false)`,
		}, {
			Name:        []string{"--minimal", "-m"},
			Description: `Do not upgrade newer versions that are already satisfied by the version range according to semver`,
		}, {
			Name:        []string{"--packageData"},
			Description: `Package file data (you can also use stdin)`,
			Args: []model.Arg{{
				Name: "value",
			}},
		}, {
			Name:        []string{"--packageFile"},
			Description: `Package file(s) location. (default: ./package.json)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path|glob",
			}},
		}, {
			Name:        []string{"--packageManager", "-p"},
			Description: `Npm, yarn, pnpm, deno, staticRegistry (default: npm). Run "ncu --help --packageManager" for details`,
			Args: []model.Arg{{
				Name:        "s",
				Suggestions: []model.Suggestion{{Name: []string{`npm`}}, {Name: []string{`yarn`}}, {Name: []string{`pnpm`}}, {Name: []string{`deno`}}, {Name: []string{`staticRegistry`}}},
			}},
		}, {
			Name:        []string{"--peer"},
			Description: `Check peer dependencies of installed packages and filter updates to compatible versions. Run "ncu --help --peer" for details`,
		}, {
			Name:        []string{"--pre"},
			Description: `Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when --target is newest or greatest, or when the current version is a prerelease. (default: 0)`,
			Args: []model.Arg{{
				Name: "n",
			}},
		}, {
			Name:        []string{"--prefix"},
			Description: `Current working directory of npm`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--registry", "-r"},
			Description: `Third-party npm registry. Run "ncu --help --registry" for details`,
			Args: []model.Arg{{
				Name: "uri",
			}},
		}, {
			Name:        []string{"--reject", "-x"},
			Description: `Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function`,
			Args: []model.Arg{{
				Name: "p",
			}},
		}, {
			Name:        []string{"--rejectVersion"},
			Description: `Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function`,
			Args: []model.Arg{{
				Name: "p",
			}},
		}, {
			Name:        []string{"--removeRange"},
			Description: `Remove version ranges from the final package version`,
		}, {
			Name:        []string{"--retry"},
			Description: `Number of times to retry failed requests for package info. (default: 3)`,
			Args: []model.Arg{{
				Name: "n",
			}},
		}, {
			Name:        []string{"--root"},
			Description: `Runs updates on the root project in addition to specified workspaces. Only allowed with --workspace or --workspaces. (default: false)`,
		}, {
			Name:        []string{"--silent", "-s"},
			Description: `Don't output anything. Alias for --loglevel silent`,
		}, {
			Name:        []string{"--stdin"},
			Description: `Read package.json from stdin`,
		}, {
			Name:        []string{"--target", "-t"},
			Description: `Determines the version to upgrade to: latest, newest, greatest, minor, patch, @[tag], or [function]. (default: latest) Run "ncu --help --target" for details`,
			Args: []model.Arg{{
				Name:        "value",
				Suggestions: []model.Suggestion{{Name: []string{`latest`}}, {Name: []string{`newest`}}, {Name: []string{`greatest`}}, {Name: []string{`minor`}}, {Name: []string{`patch`}}},
			}},
		}, {
			Name:        []string{"--timeout"},
			Description: `Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)`,
			Args: []model.Arg{{
				Name: "ms",
			}},
		}, {
			Name:        []string{"--upgrade", "-u"},
			Description: `Overwrite package file with upgraded versions instead of just outputting to console`,
		}, {
			Name:        []string{"--verbose"},
			Description: `Log additional information for debugging. Alias for --loglevel verbose`,
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Output the version number of npm-check-updates`,
		}, {
			Name:        []string{"--workspace", "-w"},
			Description: `Run on one or more specified workspaces. Add --root to also upgrade the root project. (default: [])`,
			Args: []model.Arg{{
				Name: "s",
			}},
		}, {
			Name:        []string{"--workspaces", "-ws"},
			Description: `Run on all workspaces. Add --root to also upgrade the root project`,
		}},
	}
}
