// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["gem"] = model.Subcommand{
		Name:        []string{"gem"},
		Description: `Ruby package manager`,
		Options: []model.Option{{
			Name:         []string{"--help", "-h"},
			Description:  `Show help for gem`,
			IsPersistent: true,
		}, {
			Name:         []string{"-V", "--verbose"},
			Description:  `Set the verbose level of output`,
			IsPersistent: true,
			ExclusiveOn:  []string{"--no-verbose"},
		}, {
			Name:         []string{"--no-verbose"},
			Description:  `Do not set the verbose level of output`,
			IsPersistent: true,
			ExclusiveOn:  []string{"--verbose"},
		}, {
			Name:         []string{"-q", "--quiet"},
			Description:  `Silence command progress meter`,
			IsPersistent: true,
		}, {
			Name:         []string{"--silent"},
			Description:  `Silence RubyGems output`,
			IsPersistent: true,
		}, {
			Name:        []string{"-config-file"},
			Description: `Use this config file instead of default`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "FILE",
				Description: `The config file`,
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--backtrace"},
			Description:  `Show stack backtrace on errors`,
			IsPersistent: true,
		}, {
			Name:         []string{"--debug"},
			Description:  `Turn on Ruby debugging`,
			IsPersistent: true,
		}, {
			Name:         []string{"--norc"},
			Description:  `Avoid loading any .gemrc file`,
			IsPersistent: true,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Show the gem version`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"help"},
			Description: `Help about any command`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateHelp},
				Name:       "command",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"install", "i"},
			Description: `Install a gem into the local repository`,
			Args: []model.Arg{{
				Name:      "GEMNAME",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--platform"},
				Description: `Specify the platform of gem to install`,
				Args: []model.Arg{{
					Name:        "PLATFORM",
					Description: `The platform of gem`,
				}},
			}},
		}, {
			Name:        []string{"cert"},
			Description: `Manage RubyGems certificates and signing settings`,
			Options: []model.Option{{
				Name:        []string{"-a", "--add"},
				Description: `Add a trusted certificate`,
				Args: []model.Arg{{
					Templates:   []model.Template{model.TemplateFilepaths},
					Name:        "CERT",
					Description: `The trusted certificate`,
				}},
			}, {
				Name:        []string{"-l", "--list"},
				Description: `List trusted certificates where the subject contains FILTER`,
				Args: []model.Arg{{
					Name:        "FILTER",
					Description: `The filter`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"-r", "--remove"},
				Description: `Remove trusted certificates where the subject contains FILTER`,
				Args: []model.Arg{{
					Name:        "FILTER",
					Description: `The filter`,
				}},
			}, {
				Name:        []string{"-b", "--build"},
				Description: `Build private key and self-signed certificate for EMAIL_ADDR`,
				Args: []model.Arg{{
					Name:        "EMAIL_ADDR",
					Description: `The email address`,
				}},
			}, {
				Name:        []string{"-C", "--certificate"},
				Description: `Signing certificate for --sign`,
				Args: []model.Arg{{
					Templates:   []model.Template{model.TemplateFilepaths},
					Name:        "CERT",
					Description: `The certificate`,
				}},
			}, {
				Name:        []string{"-K", "--private-key"},
				Description: `Key for --sign or --build`,
				Args: []model.Arg{{
					Templates:   []model.Template{model.TemplateFilepaths},
					Name:        "KEY",
					Description: `The key`,
				}},
			}, {
				Name:        []string{"-A", "--key-algorithm"},
				Description: `Select which key algorithm to use for --build`,
				Args: []model.Arg{{
					Name:        "ALGORITHM",
					Description: `The algorithm`,
				}},
			}, {
				Name:        []string{"-s", "--sign"},
				Description: `Signs CERT with the key from -K and the certificate from -C`,
				Args: []model.Arg{{
					Templates:   []model.Template{model.TemplateFilepaths},
					Name:        "CERT",
					Description: `The certificate`,
				}},
			}, {
				Name:        []string{"-d", "--days"},
				Description: `Days before the certificate expires`,
				Args: []model.Arg{{
					Name:        "NUMBER_OF_DAYS",
					Description: `The number of days`,
				}},
			}, {
				Name:        []string{"-R", "--re-sign"},
				Description: `Re-signs the certificate from -C with the key from -K`,
			}},
		}, {
			Name:        []string{"check"},
			Description: `Check a gem repository for added or missing files`,
			Args: []model.Arg{{
				Name:       "GEMNAME",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-a", "--alien"},
				Description: `Report 'unmanaged' or rogue files in the gem repository`,
				ExclusiveOn: []string{"--no-alien"},
			}, {
				Name:        []string{"--no-alien"},
				Description: `Report 'managed' or rogue files in the gem repository`,
				ExclusiveOn: []string{"--alien"},
			}, {
				Name:        []string{"--doctor"},
				Description: `Clean up uninstalled gems and broken specifications`,
				ExclusiveOn: []string{"--no-doctor"},
			}, {
				Name:        []string{"--no-doctor"},
				Description: `Do not clean up uninstalled gems and broken specifications`,
				ExclusiveOn: []string{"--doctor"},
			}, {
				Name:        []string{"--dry-run"},
				Description: `Do not remove files, only report what would be removed`,
				ExclusiveOn: []string{"--no-dry-run"},
			}, {
				Name:        []string{"--no-dry-run"},
				Description: `Remove files`,
				ExclusiveOn: []string{"--dry-run"},
			}, {
				Name:        []string{"--gems"},
				Description: `Check installed gems for problems`,
				ExclusiveOn: []string{"--no-gems"},
			}, {
				Name:        []string{"--no-gems"},
				Description: `Check not installed gems for problems`,
				ExclusiveOn: []string{"--gems"},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to check`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of the gem`,
				}},
			}},
		}, {
			Name:        []string{"cleanup"},
			Description: `Clean up old versions of installed gems`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `Name of gem to cleanup`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-n", "-d", "--dry-run"},
				Description: `Do not uninstall gems`,
			}, {
				Name:        []string{"-D", "--check-development"},
				Description: `Check development dependencies while uninstalling (default: true)`,
				ExclusiveOn: []string{"--no-check-development"},
			}, {
				Name:        []string{"--no-check-development"},
				Description: `Do not check development dependencies while uninstalling`,
				ExclusiveOn: []string{"--check-development"},
			}, {
				Name:        []string{"--user-install"},
				Description: `Cleanup in user’s home directory instead of GEM_HOME`,
				ExclusiveOn: []string{"--no-user-install"},
			}, {
				Name:        []string{"--no-user-install"},
				Description: `Cleanup in GEM_HOME instead of user’s home directory`,
				ExclusiveOn: []string{"--user-install"},
			}},
		}, {
			Name:        []string{"contents"},
			Description: `Display the contents of the installed gems`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `Name of gem to list contents for`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to contents`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of the gem`,
				}},
			}, {
				Name:        []string{"--all"},
				Description: `Contents for all gems`,
			}, {
				Name:        []string{"-s", "--spec-dir"},
				Description: `Search for gems under specific paths`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "DIR",
				}},
			}, {
				Name:        []string{"-l", "--lib-only"},
				Description: `Only return files in the Gem’s lib_dirs`,
				ExclusiveOn: []string{"--no-lib-only"},
			}, {
				Name:        []string{"--no-lib-only"},
				Description: `Not only return files in the Gem’s lib_dirs`,
				ExclusiveOn: []string{"--lib-only"},
			}, {
				Name:        []string{"--prefix"},
				Description: `Don’t include installed path prefix`,
				ExclusiveOn: []string{"--no-prefix"},
			}, {
				Name:        []string{"--no-prefix"},
				Description: `Include installed path prefix`,
				ExclusiveOn: []string{"--prefix"},
			}, {
				Name:        []string{"--show-install-dir"},
				Description: `Show only the gem install dir`,
				ExclusiveOn: []string{"--no-show-install-dir"},
			}, {
				Name:        []string{"--no-show-install-dir"},
				Description: `Do not show only the gem install dir`,
				ExclusiveOn: []string{"--show-install-dir"},
			}},
		}, {
			Name:        []string{"dependency"},
			Description: `Show the dependencies of an installed gem`,
			Args: []model.Arg{{
				Name:        "REGEXP",
				Description: `Show dependencies for gems whose names start with REGEXP`,
			}},
			Options: []model.Option{{
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to dependency`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of gem`,
				}},
			}, {
				Name:        []string{"--platform"},
				Description: `Specify the platform of gem to dependency`,
				Args: []model.Arg{{
					Name:        "PLATFORM",
					Description: `The platform of gem`,
				}},
			}, {
				Name:        []string{"--prerelease"},
				Description: `Allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--no-prerelease"},
			}, {
				Name:        []string{"--no-prerelease"},
				Description: `Do not allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--prerelease"},
			}, {
				Name:        []string{"-R", "--reverse-dependencies"},
				Description: `Include reverse dependencies in the output`,
				ExclusiveOn: []string{"--no-reverse-dependencies"},
			}, {
				Name:        []string{"--no-reverse-dependencies"},
				Description: `Do not include reverse dependencies in the output`,
				ExclusiveOn: []string{"--reverse-dependencies"},
			}, {
				Name:        []string{"--pipe"},
				Description: `Pipe Format (name --version ver)`,
			}, {
				Name:        []string{"-l", "--local"},
				Description: `Restrict operations to the LOCAL domain`,
				ExclusiveOn: []string{"--remote", "--both"},
			}, {
				Name:        []string{"-r", "--remote"},
				Description: `Restrict operations to the REMOTE domain`,
				ExclusiveOn: []string{"--local", "--both"},
			}, {
				Name:        []string{"-b", "--both"},
				Description: `Allow LOCAL and REMOTE operations`,
				ExclusiveOn: []string{"--remote", "--local"},
			}, {
				Name:        []string{"-B", "--bulk-threshold"},
				Description: `Threshold for switching to bulk synchronization (default 1000)`,
				Args: []model.Arg{{
					Name:        "COUNT",
					Description: `The threshold`,
				}},
			}, {
				Name:        []string{"--clear-sources"},
				Description: `Clear the gem sources`,
			}, {
				Name:        []string{"-s", "--source"},
				Description: `Append URL to list of remote gem sources`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
				}},
			}, {
				Name:        []string{"-p", "--http-proxy"},
				Description: `Use HTTP proxy for remote operations`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
					IsOptional:  true,
				}},
				ExclusiveOn: []string{"--no-http-proxy"},
			}, {
				Name:        []string{"--no-http-proxy"},
				Description: `Do not use HTTP proxy for remote operations`,
				ExclusiveOn: []string{"--http-proxy"},
			}},
		}, {
			Name:        []string{"environment"},
			Description: `Display information about the RubyGems environment`,
			Args: []model.Arg{{
				Suggestions: []model.Suggestion{{
					Name:        []string{`home`},
					Description: `Display the path where gems are installed. Aliases: gemhome, gemdir, GEM_HOME`,
				}, {
					Name:        []string{`path`},
					Description: `Display path used to search for gems. Aliases: gempath, GEM_PATH`,
				}, {
					Name:        []string{`user_gemhome`},
					Description: `Display the path where gems are installed when --user-install is given. Aliases: user_gemdir`,
				}, {
					Name:        []string{`version`},
					Description: `Display the gem format version`,
				}, {
					Name:        []string{`remotesources`},
					Description: `Display the remote gem servers`,
				}, {
					Name:        []string{`platform`},
					Description: `Display the supported gem platforms`,
				}},
				IsOptional: true,
			}},
		}, {
			Name:        []string{"fetch"},
			Description: `Download a gem and place it in the current directory`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `Name of gem to download`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to fetch`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of the gem`,
				}},
			}, {
				Name:        []string{"--platform"},
				Description: `Specify the platform of gem to fetch`,
				Args: []model.Arg{{
					Name:        "PLATFORM",
					Description: `The platform of gem`,
				}},
			}, {
				Name:        []string{"--prerelease"},
				Description: `Allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--no-prerelease"},
			}, {
				Name:        []string{"--no-prerelease"},
				Description: `Do not allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--prerelease"},
			}, {
				Name:        []string{"--suggestions"},
				Description: `Suggest alternates when gems are not found`,
				ExclusiveOn: []string{"--no-suggestions"},
			}, {
				Name:        []string{"--no-suggestions"},
				Description: `Do not suggest alternates when gems are not found`,
				ExclusiveOn: []string{"--suggestions"},
			}, {
				Name:        []string{"-B", "--bulk-threshold"},
				Description: `Threshold for switching to bulk synchronization (default 1000)`,
				Args: []model.Arg{{
					Name:        "COUNT",
					Description: `The threshold`,
				}},
			}, {
				Name:        []string{"-s", "--source"},
				Description: `Append URL to list of remote gem sources`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
				}},
			}, {
				Name:        []string{"--clear-sources"},
				Description: `Clear the gem sources`,
			}, {
				Name:        []string{"-p", "--http-proxy"},
				Description: `Use HTTP proxy for remote operations`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
					IsOptional:  true,
				}},
				ExclusiveOn: []string{"--no-http-proxy"},
			}, {
				Name:        []string{"--no-http-proxy"},
				Description: `Do not use HTTP proxy for remote operations`,
				ExclusiveOn: []string{"--http-proxy"},
			}},
		}, {
			Name:        []string{"generate_index"},
			Description: `Generates the index files for a gem server directory`,
			Options: []model.Option{{
				Name:        []string{"-d", "--directory"},
				Description: `Repository base dir containing gems subdir`,
				Args: []model.Arg{{
					Templates:      []model.Template{model.TemplateFolders},
					Name:           "DIRNAME",
					FilterStrategy: model.FilterStrategyFuzzy,
				}},
			}, {
				Name:        []string{"--modern"},
				Description: `Generate indexes for RubyGems (always true)`,
				ExclusiveOn: []string{"--no-modern"},
			}, {
				Name:        []string{"--no-modern"},
				Description: `Do not generate indexes for RubyGems`,
				ExclusiveOn: []string{"--modern"},
			}, {
				Name:        []string{"--update"},
				Description: `Update modern indexes with gems added since the last update`,
			}},
		}, {
			Name:        []string{"info"},
			Description: `Show information for the given gem`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `Name of the gem to print information about`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-I"},
				Description: `Equivalent to --no-installed`,
				ExclusiveOn: []string{"--installed"},
			}, {
				Name:        []string{"-a", "--all"},
				Description: `Display all gem versions`,
			}, {
				Name:        []string{"-e", "--exact"},
				Description: `Name of gem(s) to query on matches the provided STRING`,
			}, {
				Name:        []string{"--prerelease"},
				Description: `Allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--no-prerelease"},
			}, {
				Name:        []string{"--no-prerelease"},
				Description: `Do not allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--prerelease"},
			}, {
				Name:        []string{"-i", "--installed"},
				Description: `Check for installed gem`,
				ExclusiveOn: []string{"--no-installed"},
			}, {
				Name:        []string{"-I", "--no-installed"},
				Description: `Check for not installed gem`,
				ExclusiveOn: []string{"--installed"},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to list for use with --installed`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of gem`,
				}},
			}, {
				Name:        []string{"--versions"},
				Description: `Display only gem names`,
				ExclusiveOn: []string{"--no-versions"},
			}, {
				Name:        []string{"--no-versions"},
				Description: `Display not only gem names`,
				ExclusiveOn: []string{"--versions"},
			}},
		}, {
			Name:        []string{"lock"},
			Description: `Generate a lockdown list of gems`,
			Args: []model.Arg{{
				Name:        "GEMNAME-VERSION",
				Description: `Name and the version of gem to lock, ex: rails-1.0.0`,
			}},
			Options: []model.Option{{
				Name:        []string{"-s", "--strict"},
				Description: `Fail if unable to satisfy a dependency`,
				ExclusiveOn: []string{"--no-strict"},
			}, {
				Name:        []string{"--no-strict"},
				Description: `Do not fail if unable to satisfy a dependency`,
				ExclusiveOn: []string{"--strict"},
			}},
		}, {
			Name:        []string{"mirror"},
			Description: `Mirror all gem files (requires rubygems-mirror)`,
		}, {
			Name:        []string{"open"},
			Description: `Open gem sources in editor`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `Name of the gem to print information about`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-e", "--editor"},
				Description: `Prepends COMMAND to gem path. Could be used to specify editor`,
				Args: []model.Arg{{
					Name:        "COMMAND",
					Description: `The prepends command to gem path`,
				}},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Opens specific gem version`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The specify version of gem`,
				}},
			}},
		}, {
			Name:        []string{"pristine"},
			Description: `Restores installed gems to pristine condition from files located in the gem cache`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `Name of the gem to print information about`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Restore all installed gems to pristine condition`,
			}, {
				Name:        []string{"--skip"},
				Description: `Restore all installed gems to pristine condition`,
				Args: []model.Arg{{
					Name:        "GEMNAME",
					Description: `Name of the gem to print information about`,
					Generator:   nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--extensions"},
				Description: `Restore gems with extensions in addition to regular gems`,
				ExclusiveOn: []string{"--no-extensions"},
			}, {
				Name:        []string{"--no-extensions"},
				Description: `Do not restore gems with extensions in addition to regular gems`,
				ExclusiveOn: []string{"--extensions"},
			}, {
				Name:        []string{"--only-executables"},
				Description: `Only restore executables`,
			}, {
				Name:        []string{"--only-plugins"},
				Description: `Only restore plugins`,
			}, {
				Name:        []string{"-E", "--env-shebang"},
				Description: `Rewrite executables with a shebang of /usr/bin/env`,
				ExclusiveOn: []string{"--no-env-shebang"},
			}, {
				Name:        []string{"--no-env-shebang"},
				Description: `Do not rewrite executables with a shebang of /usr/bin/env`,
				ExclusiveOn: []string{"--env-shebang"},
			}, {
				Name:        []string{"-i", "--install-dir"},
				Description: `Gem repository to get binstubs and plugins installed`,
				Args: []model.Arg{{
					Templates:      []model.Template{model.TemplateFolders},
					Name:           "DIR",
					FilterStrategy: model.FilterStrategyFuzzy,
				}},
			}, {
				Name:        []string{"-n", "--bindir"},
				Description: `Directory where executables are located`,
				Args: []model.Arg{{
					Templates:      []model.Template{model.TemplateFolders},
					Name:           "DIR",
					FilterStrategy: model.FilterStrategyFuzzy,
				}},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to restore to pristine condition`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The specify version of gem`,
				}},
			}},
		}, {
			Name:        []string{"query"},
			Description: `Query gem information in local or remote repositories`,
			Options: []model.Option{{
				Name:        []string{"-n", "--name-matches"},
				Description: `Name of gem(s) to query on matches the provided REGEXP`,
				Args: []model.Arg{{
					Name:        "REGEXP",
					Description: `The rule of the regexp`,
				}},
			}, {
				Name:        []string{"-I"},
				Description: `Equivalent to --no-installed`,
				ExclusiveOn: []string{"--installed"},
			}, {
				Name:        []string{"-d", "--details"},
				Description: `Display detailed information of gem(s)`,
				ExclusiveOn: []string{"--no-details"},
			}, {
				Name:        []string{"--no-details"},
				Description: `Do not display detailed information of gem(s)`,
				ExclusiveOn: []string{"--details"},
			}, {
				Name:        []string{"-a", "--all"},
				Description: `Display all gem versions`,
			}, {
				Name:        []string{"-e", "--exact"},
				Description: `Name of gem(s) to query on matches the provided STRING`,
			}, {
				Name:        []string{"--prerelease"},
				Description: `Allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--no-prerelease"},
			}, {
				Name:        []string{"--no-prerelease"},
				Description: `Do not allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--prerelease"},
			}, {
				Name:        []string{"-i", "--installed"},
				Description: `Check for installed gem`,
				ExclusiveOn: []string{"--no-installed"},
			}, {
				Name:        []string{"-I", "--no-installed"},
				Description: `Check for not installed gem`,
				ExclusiveOn: []string{"--installed"},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to list for use with --installed`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of gem`,
				}},
			}, {
				Name:        []string{"--versions"},
				Description: `Display only gem names`,
				ExclusiveOn: []string{"--no-versions"},
			}, {
				Name:        []string{"--no-versions"},
				Description: `Display not only gem names`,
				ExclusiveOn: []string{"--versions"},
			}, {
				Name:        []string{"-l", "--local"},
				Description: `Restrict operations to the LOCAL domain`,
				ExclusiveOn: []string{"--remote", "--both"},
			}, {
				Name:        []string{"-r", "--remote"},
				Description: `Restrict operations to the REMOTE domain`,
				ExclusiveOn: []string{"--local", "--both"},
			}, {
				Name:        []string{"-b", "--both"},
				Description: `Allow LOCAL and REMOTE operations`,
				ExclusiveOn: []string{"--remote", "--local"},
			}, {
				Name:        []string{"-B", "--bulk-threshold"},
				Description: `Threshold for switching to bulk synchronization (default 1000)`,
				Args: []model.Arg{{
					Name:        "COUNT",
					Description: `The threshold`,
				}},
			}, {
				Name:        []string{"--clear-sources"},
				Description: `Clear the gem sources`,
			}, {
				Name:        []string{"-s", "--source"},
				Description: `Append URL to list of remote gem sources`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
				}},
			}, {
				Name:        []string{"-p", "--http-proxy"},
				Description: `Use HTTP proxy for remote operations`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
					IsOptional:  true,
				}},
				ExclusiveOn: []string{"--no-http-proxy"},
			}, {
				Name:        []string{"--no-http-proxy"},
				Description: `Do not use HTTP proxy for remote operations`,
				ExclusiveOn: []string{"--http-proxy"},
			}},
		}, {
			Name:        []string{"rdoc"},
			Description: `Generates RDoc for pre-installed gems`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `Gem to generate documentation for (unless –all)`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Generate RDoc/RI documentation for all installed gems`,
			}, {
				Name:        []string{"--rdoc"},
				Description: `Generate RDoc HTML`,
				ExclusiveOn: []string{"--no-rdoc"},
			}, {
				Name:        []string{"--no-rdoc"},
				Description: `Do not generate RDoc HTML`,
				ExclusiveOn: []string{"--rdoc"},
			}, {
				Name:        []string{"--ri"},
				Description: `Generate RI data`,
				ExclusiveOn: []string{"--no-ri"},
			}, {
				Name:        []string{"--no-ri"},
				Description: `Do not generate RI data`,
				ExclusiveOn: []string{"--ri"},
			}, {
				Name:        []string{"--overwrite"},
				Description: `Overwrite installed documents`,
				ExclusiveOn: []string{"--no-overwrite"},
			}, {
				Name:        []string{"--no-overwrite"},
				Description: `Do not overwrite installed documents`,
				ExclusiveOn: []string{"--overwrite"},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to rdoc`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The specify version of gem`,
				}},
			}},
		}, {
			Name:        []string{"search"},
			Description: `Display remote gems whose name matches REGEXP`,
			Args: []model.Arg{{
				Name:        "REGEXP",
				Description: `Regexp to look for in gem name`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-I"},
				Description: `Equivalent to --no-installed`,
				ExclusiveOn: []string{"--installed"},
			}, {
				Name:        []string{"-d", "--details"},
				Description: `Display detailed information of gem(s)`,
				ExclusiveOn: []string{"--no-details"},
			}, {
				Name:        []string{"--no-details"},
				Description: `Do not display detailed information of gem(s)`,
				ExclusiveOn: []string{"--details"},
			}, {
				Name:        []string{"-a", "--all"},
				Description: `Display all gem versions`,
			}, {
				Name:        []string{"-e", "--exact"},
				Description: `Name of gem(s) to query on matches the provided STRING`,
			}, {
				Name:        []string{"--prerelease"},
				Description: `Allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--no-prerelease"},
			}, {
				Name:        []string{"--no-prerelease"},
				Description: `Do not allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--prerelease"},
			}, {
				Name:        []string{"-i", "--installed"},
				Description: `Check for installed gem`,
				ExclusiveOn: []string{"--no-installed"},
			}, {
				Name:        []string{"-I", "--no-installed"},
				Description: `Check for not installed gem`,
				ExclusiveOn: []string{"--installed"},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to list for use with --installed`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of gem`,
				}},
			}, {
				Name:        []string{"--versions"},
				Description: `Display only gem names`,
				ExclusiveOn: []string{"--no-versions"},
			}, {
				Name:        []string{"--no-versions"},
				Description: `Display not only gem names`,
				ExclusiveOn: []string{"--versions"},
			}, {
				Name:        []string{"-l", "--local"},
				Description: `Restrict operations to the LOCAL domain`,
				ExclusiveOn: []string{"--remote", "--both"},
			}, {
				Name:        []string{"-r", "--remote"},
				Description: `Restrict operations to the REMOTE domain`,
				ExclusiveOn: []string{"--local", "--both"},
			}, {
				Name:        []string{"-b", "--both"},
				Description: `Allow LOCAL and REMOTE operations`,
				ExclusiveOn: []string{"--remote", "--local"},
			}, {
				Name:        []string{"-B", "--bulk-threshold"},
				Description: `Threshold for switching to bulk synchronization (default 1000)`,
				Args: []model.Arg{{
					Name:        "COUNT",
					Description: `The threshold`,
				}},
			}, {
				Name:        []string{"--clear-sources"},
				Description: `Clear the gem sources`,
			}, {
				Name:        []string{"-s", "--source"},
				Description: `Append URL to list of remote gem sources`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
				}},
			}, {
				Name:        []string{"-p", "--http-proxy"},
				Description: `Use HTTP proxy for remote operations`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
					IsOptional:  true,
				}},
				ExclusiveOn: []string{"--no-http-proxy"},
			}, {
				Name:        []string{"--no-http-proxy"},
				Description: `Do not use HTTP proxy for remote operations`,
				ExclusiveOn: []string{"--http-proxy"},
			}},
		}, {
			Name:        []string{"signin"},
			Description: `Sign in to any gemcutter-compatible host. It defaults to https://rubygems.org`,
			Options: []model.Option{{
				Name:        []string{"--host"},
				Description: `Use another gemcutter-compatible host (e.g. https://rubygems.org)`,
				Args: []model.Arg{{
					Name:        "HOST",
					Description: `The host`,
				}},
			}, {
				Name:        []string{"--otp"},
				Description: `Digit code for multifactor authentication You can also use the environment variable GEM_HOST_OTP_CODE`,
				Args: []model.Arg{{
					Name:        "CODE",
					Description: `The GEM host otp code`,
				}},
			}},
		}, {
			Name:        []string{"signout"},
			Description: `Sign out from all the current sessions`,
		}, {
			Name:        []string{"sources"},
			Description: `Manage the sources and cache file RubyGems uses to search for gems`,
			Options: []model.Option{{
				Name:        []string{"-a", "--add"},
				Description: `Add source`,
				Args: []model.Arg{{
					Name:        "SOURCE_URI",
					Description: `The source URI`,
				}},
			}, {
				Name:        []string{"-l", "--list"},
				Description: `List sources`,
			}, {
				Name:        []string{"-r", "--remove"},
				Description: `Remove source`,
				Args: []model.Arg{{
					Name:        "SOURCE_URI",
					Description: `The source URI`,
				}},
			}, {
				Name:        []string{"-c", "--clear-all"},
				Description: `Remove all sources (clear the cache)`,
			}, {
				Name:        []string{"-u", "--update"},
				Description: `Update source cache`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Do not show any confirmation prompts and behave as if 'yes' was always answered`,
				ExclusiveOn: []string{"--no-force"},
			}, {
				Name:        []string{"--no-force"},
				Description: `Show any confirmation prompts and behave as if 'yes' was always answered`,
				ExclusiveOn: []string{"--force"},
			}, {
				Name:        []string{"-p", "--http-proxy"},
				Description: `Use HTTP proxy for remote operations`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
					IsOptional:  true,
				}},
				ExclusiveOn: []string{"--no-http-proxy"},
			}, {
				Name:        []string{"--no-http-proxy"},
				Description: `Do not use HTTP proxy for remote operations`,
				ExclusiveOn: []string{"--http-proxy"},
			}},
		}, {
			Name:        []string{"specification"},
			Description: `Display gem specification (in yaml)`,
			Args: []model.Arg{{
				Name:        "GEMFILE",
				Description: `Name of gem to show the gemspec for`,
				Generator:   nil, // TODO: port over generator
			}, {
				Name:        "FIELD",
				Description: `Name of gemspec field to show`,
			}},
			Options: []model.Option{{
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to examine`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of gem`,
				}},
			}, {
				Name:        []string{"--platform"},
				Description: `Specify the platform of gem to specification`,
				Args: []model.Arg{{
					Name:        "PLATFORM",
					Description: `The platform of gem`,
				}},
			}, {
				Name:        []string{"--prerelease"},
				Description: `Allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--no-prerelease"},
			}, {
				Name:        []string{"--no-prerelease"},
				Description: `Do not allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--prerelease"},
			}, {
				Name:        []string{"--all"},
				Description: `Output specifications for all versions of the gem`,
			}, {
				Name:        []string{"--ruby"},
				Description: `Output ruby format`,
			}, {
				Name:        []string{"--yaml"},
				Description: `Output YAML format`,
			}, {
				Name:        []string{"--marshal"},
				Description: `Output Marshal format`,
			}},
		}, {
			Name:        []string{"stale"},
			Description: `List gems along with access times`,
		}, {
			Name:        []string{"unpack"},
			Description: `Unpack an installed gem to the current directory`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `Name of gem to unpack`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--target"},
				Description: `Target directory for unpacking`,
				Args: []model.Arg{{
					Templates:      []model.Template{model.TemplateFolders},
					Name:           "DIR",
					FilterStrategy: model.FilterStrategyFuzzy,
				}},
			}, {
				Name:        []string{"--spec"},
				Description: `Unpack the gem specification`,
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to unpack`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The specify version of gem`,
				}},
			}},
		}, {
			Name:        []string{"yank"},
			Description: `Remove a pushed gem from the index`,
			Args: []model.Arg{{
				Name:        "GEM",
				Description: `Name of gem`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to dependency`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of gem`,
				}},
			}, {
				Name:        []string{"--platform"},
				Description: `Specify the platform of gem to dependency`,
				Args: []model.Arg{{
					Name:        "PLATFORM",
					Description: `The platform of gem`,
				}},
			}, {
				Name:        []string{"--host"},
				Description: `Use another gemcutter-compatible host (e.g. https://rubygems.org)`,
				Args: []model.Arg{{
					Name:        "HOST",
					Description: `The host`,
				}},
			}, {
				Name:        []string{"-k", "--key"},
				Description: `Use the given API key`,
				Args: []model.Arg{{
					Name:        "KEYNAME",
					Description: `The API key`,
				}},
			}, {
				Name:        []string{"--otp"},
				Description: `Digit code for multifactor authentication You can also use the environment variable GEM_HOST_OTP_CODE`,
				Args: []model.Arg{{
					Name:        "CODE",
					Description: `The GEM host otp code`,
				}},
			}},
		}, {
			Name:        []string{"uninstall"},
			Description: `Uninstall gems from the local repository`,
			Args: []model.Arg{{
				Name:      "GEMNAME",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-a", "--all"},
				Description: `Uninstall all matching versions`,
			}, {
				Name:        []string{"-I", "--ignore-dependencies"},
				Description: `Ignore dependency requirements while uninstalling`,
			}, {
				Name:        []string{"-D", "--check-development"},
				Description: `Check development dependencies while uninstalling (default: false)`,
			}, {
				Name:        []string{"-x", "--executables"},
				Description: `Uninstall applicable executables without confirmation`,
			}, {
				Name:        []string{"-i", "--install-dir"},
				Description: `Directory to uninstall gem from`,
				Args: []model.Arg{{
					Templates:      []model.Template{model.TemplateFolders},
					Name:           "DIR",
					FilterStrategy: model.FilterStrategyFuzzy,
				}},
			}, {
				Name:        []string{"-n", "--bindir"},
				Description: `Directory to remove executables from`,
				Args: []model.Arg{{
					Templates:      []model.Template{model.TemplateFolders},
					Name:           "DIR",
					FilterStrategy: model.FilterStrategyFuzzy,
				}},
			}, {
				Name:        []string{"--user-install"},
				Description: `Uninstall from user’s home directory in addition to GEM_HOME`,
			}, {
				Name:        []string{"--format-executable"},
				Description: `Assume executable names match Ruby’s prefix and suffix`,
			}, {
				Name:        []string{"--force"},
				Description: `Uninstall all versions of the named gems ignoring dependencies`,
			}, {
				Name:        []string{"--abort-on-dependent"},
				Description: `Prevent uninstalling gems that are depended on by other gems`,
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to uninstall`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The specify version of gem`,
				}},
			}, {
				Name:        []string{"--platform"},
				Description: `Specify the platform of gem to uninstall`,
				Args: []model.Arg{{
					Name:        "PLATFORM",
					Description: `The platform of gem`,
				}},
			}, {
				Name:        []string{"--vendor"},
				Description: `Uninstall gem from the vendor directory. Only for use by gem repackagers`,
			}},
		}, {
			Name:        []string{"list"},
			Description: `Display local gems whose name matches REGEXP`,
			Args: []model.Arg{{
				Name:        "REGEXP",
				Description: `Regexp to look for in gem name`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--details"},
				Description: `Display detailed information of gem(s)`,
				ExclusiveOn: []string{"--no-details"},
			}, {
				Name:        []string{"--no-details"},
				Description: `Do not display detailed information of gem(s)`,
				ExclusiveOn: []string{"--details"},
			}, {
				Name:        []string{"-u", "--update-sources"},
				Description: `[Deprecated] Update local source cache`,
				ExclusiveOn: []string{"--no-update-sources"},
			}, {
				Name:        []string{"--no-update-sources"},
				Description: `[Deprecated] Do not update local source cache`,
				ExclusiveOn: []string{"--update-sources"},
			}, {
				Name:        []string{"-a", "--all"},
				Description: `Display all gem versions`,
			}, {
				Name:        []string{"-e", "--exact"},
				Description: `Name of gem(s) to query on matches the provided STRING`,
			}, {
				Name:        []string{"--prerelease"},
				Description: `Allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--no-prerelease"},
			}, {
				Name:        []string{"--no-prerelease"},
				Description: `Do not allow prerelease versions of a gem`,
				ExclusiveOn: []string{"--prerelease"},
			}, {
				Name:        []string{"-i", "--installed"},
				Description: `Check for installed gem`,
				ExclusiveOn: []string{"--no-installed"},
			}, {
				Name:        []string{"-I", "--no-installed"},
				Description: `Check for not installed gem`,
				ExclusiveOn: []string{"--installed"},
			}, {
				Name:        []string{"-v", "--version"},
				Description: `Specify version of gem to list for use with --installed`,
				Args: []model.Arg{{
					Name:        "VERSION",
					Description: `The version of gem`,
				}},
			}, {
				Name:        []string{"--versions"},
				Description: `Display only gem names`,
				ExclusiveOn: []string{"--no-versions"},
			}, {
				Name:        []string{"--no-versions"},
				Description: `Display not only gem names`,
				ExclusiveOn: []string{"--versions"},
			}, {
				Name:        []string{"-l", "--local"},
				Description: `Restrict operations to the LOCAL domain`,
				ExclusiveOn: []string{"--remote", "--both"},
			}, {
				Name:        []string{"-r", "--remote"},
				Description: `Restrict operations to the REMOTE domain`,
				ExclusiveOn: []string{"--local", "--both"},
			}, {
				Name:        []string{"-b", "--both"},
				Description: `Allow LOCAL and REMOTE operations`,
				ExclusiveOn: []string{"--remote", "--local"},
			}, {
				Name:        []string{"-B", "--bulk-threshold"},
				Description: `Threshold for switching to bulk synchronization (default 1000)`,
				Args: []model.Arg{{
					Name:        "COUNT",
					Description: `The threshold`,
				}},
			}, {
				Name:        []string{"--clear-sources"},
				Description: `Clear the gem sources`,
			}, {
				Name:        []string{"-s", "--source"},
				Description: `Append URL to list of remote gem sources`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
				}},
			}, {
				Name:        []string{"-p", "--http-proxy"},
				Description: `Use HTTP proxy for remote operations`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
					IsOptional:  true,
				}},
				ExclusiveOn: []string{"--no-http-proxy"},
			}, {
				Name:        []string{"--no-http-proxy"},
				Description: `Do not use HTTP proxy for remote operations`,
				ExclusiveOn: []string{"--http-proxy"},
			}},
		}, {
			Name:        []string{"build"},
			Description: `Build a gem from a gemspec`,
			Args: []model.Arg{{
				Name:        "GEMSPEC_FILE",
				Description: `Gemspec file name to build a gem for`,
			}},
			Options: []model.Option{{
				Name:        []string{"--platform"},
				Description: `Specify the platform of gem to build`,
				Args: []model.Arg{{
					Name:        "PLATFORM",
					Description: `The platform of gem`,
				}},
			}, {
				Name:        []string{"--force"},
				Description: `Skip validation of the spec`,
			}, {
				Name:        []string{"--strict"},
				Description: `Consider warnings as errors when validating the spec`,
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Output gem with the given filename`,
				Args: []model.Arg{{
					Name:        "FILE",
					Description: `The filename`,
				}},
			}, {
				Name:        []string{"-C"},
				Description: `Run as if gem build was started in <PATH> instead of the current working directory`,
				Args: []model.Arg{{
					Templates:   []model.Template{model.TemplateFolders},
					Name:        "PATH",
					Description: `The filename`,
				}},
			}},
		}, {
			Name:        []string{"push"},
			Description: `Push a gem up to the gem server`,
			Args: []model.Arg{{
				Name:        "GEM",
				Description: `Built gem to push up`,
			}},
			Options: []model.Option{{
				Name:        []string{"--host"},
				Description: `Use another gemcutter-compatible host (e.g. https://rubygems.org)`,
				Args: []model.Arg{{
					Name:        "HOST",
					Description: `The host`,
				}},
			}, {
				Name:        []string{"-k", "--key"},
				Description: `Use the given API key`,
				Args: []model.Arg{{
					Name:        "KEYNAME",
					Description: `The API key`,
				}},
			}, {
				Name:        []string{"--otp"},
				Description: `Digit code for multifactor authentication You can also use the environment variable GEM_HOST_OTP_CODE`,
				Args: []model.Arg{{
					Name:        "CODE",
					Description: `The GEM host otp code`,
				}},
			}, {
				Name:        []string{"-p", "--http-proxy"},
				Description: `Use HTTP proxy for remote operations`,
				Args: []model.Arg{{
					Name:        "URL",
					Description: `The URL`,
					IsOptional:  true,
				}},
				ExclusiveOn: []string{"--no-http-proxy"},
			}, {
				Name:        []string{"--no-http-proxy"},
				Description: `Do not use HTTP proxy for remote operations`,
				ExclusiveOn: []string{"--http-proxy"},
			}},
		}, {
			Name:        []string{"server"},
			Description: `Starts up a web server that hosts the RDoc (requires rubygems-server)`,
		}, {
			Name:        []string{"owner"},
			Description: `Manage gem owners of a gem on the push server`,
			Args: []model.Arg{{
				Name:      "GEMNAME",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-a", "--add"},
				Description: `Add an owner by user identifier`,
				Args: []model.Arg{{
					Name:        "NEW_OWNER",
					Description: `The new owner`,
				}},
			}, {
				Name:        []string{"-r", "--remove"},
				Description: `Remove an owner by user identifier`,
				Args: []model.Arg{{
					Name:        "OLD_OWNER",
					Description: `The old owner`,
				}},
			}, {
				Name:        []string{"--host"},
				Description: `Use another gemcutter-compatible host (e.g. https://rubygems.org)`,
				Args: []model.Arg{{
					Name:        "HOST",
					Description: `The host`,
				}},
			}, {
				Name:        []string{"-k", "--key"},
				Description: `Use the given API key`,
				Args: []model.Arg{{
					Name:        "KEYNAME",
					Description: `The API key`,
				}},
			}, {
				Name:        []string{"--otp"},
				Description: `Digit code for multifactor authentication You can also use the environment variable GEM_HOST_OTP_CODE`,
				Args: []model.Arg{{
					Name:        "CODE",
					Description: `The GEM host otp code`,
				}},
			}},
		}, {
			Name:        []string{"which"},
			Description: `Find the location of a library file you can require`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "FILE",
			}},
			Options: []model.Option{{
				Name:        []string{"-a", "--all"},
				Description: `Show all matching files`,
			}, {
				Name:        []string{"-g", "--gems-first"},
				Description: `Search gems before non-gems`,
			}},
		}, {
			Name:        []string{"outdated"},
			Description: `Display all gems that need updates`,
			Options: []model.Option{{
				Name:        []string{"--platform"},
				Description: `Specify the platform of gem to outdated`,
				Args: []model.Arg{{
					Name:       "PLATFORM",
					IsVariadic: true,
				}},
			}},
		}, {
			Name:        []string{"update"},
			Description: `Update installed gems to the latest version`,
			Args: []model.Arg{{
				Name:        "GEMNAME",
				Description: `The gem(s) you want to update`,
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--system"},
				Description: `Update the RubyGems system software`,
				Args: []model.Arg{{
					Name:       "VERSION",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"--platform"},
				Description: `Update the RubyGems system software`,
				Args: []model.Arg{{
					Name: "PLATFORM",
				}},
			}, {
				Name:        []string{"--prerelease"},
				Description: `Allow prerelease versions of a gem as update targets`,
			}, {
				Name:        []string{"--install-dir", "-i"},
				Description: `Gem repository directory to get installed gems`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "DIR",
				}},
			}, {
				Name:        []string{"--bindir", "-n"},
				Description: `Directory where executables will be placed when the gem is installed`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "DIR",
				}},
			}, {
				Name:        []string{"--document"},
				Description: `Generate documentation for installed gems`,
				Args: []model.Arg{{
					Name:        "TYPES",
					Suggestions: []model.Suggestion{{Name: []string{`rdoc`}}, {Name: []string{`ri`}}},
				}},
			}, {
				Name:        []string{"--build-root"},
				Description: `Temporary installation root. Useful for building packages. Do not use this when installing remote gems`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "DIR",
				}},
			}, {
				Name:        []string{"--vendor"},
				Description: `Install gem into the vendor directory. Only for use by gem repackagers`,
			}, {
				Name:        []string{"--no-document", "-N"},
				Description: `Disable documentation generation`,
			}, {
				Name:        []string{"--env-shebang", "-E"},
				Description: `Rewrite the shebang line on installed scripts to use /usr/bin/env`,
			}, {
				Name:        []string{"--force", "-f"},
				Description: `Force gem to install, bypassing dependency checks`,
			}, {
				Name:        []string{"--wrappers", "-w"},
				Description: `Use bin wrappers for executables. Not available on dosish platforms`,
			}, {
				Name:        []string{"--trust-policy", "-P"},
				Description: `Specify gem trust policy`,
				Args: []model.Arg{{
					Name: "POLICY",
				}},
			}, {
				Name:        []string{"--ignore-dependencies"},
				Description: `Do not install any required dependent gems`,
			}, {
				Name:        []string{"--format-executable"},
				Description: `Make installed executable names match Ruby`,
			}, {
				Name:        []string{"--user-install"},
				Description: `Install in user's home directory instead of GEM_HOME`,
			}, {
				Name:        []string{"--development"},
				Description: `Install additional development dependencies`,
			}, {
				Name:        []string{"--development-all"},
				Description: `Install development dependencies for all gems (including dev deps themselves)`,
			}, {
				Name:        []string{"--conservative"},
				Description: `Don't attempt to upgrade gems already meeting version requirement`,
			}, {
				Name:        []string{"--minimal-deps"},
				Description: `Don't upgrade any dependencies that already meet version requirements`,
			}, {
				Name:        []string{"--post-install-message"},
				Description: `Print post install message`,
			}, {
				Name:        []string{"--file", "-g"},
				Description: `Read from a gem dependencies API file and install the listed gems`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "FILE",
				}},
			}, {
				Name:        []string{"--without"},
				Description: `Omit the named groups (comma separated) when installing from a gem dependencies file`,
				Args: []model.Arg{{
					Name: "GROUPS",
				}},
			}, {
				Name:        []string{"--default"},
				Description: `Add the gem's full specification to specifications/default and extract only its bin`,
			}, {
				Name:        []string{"--explain"},
				Description: `Rather than install the gems, indicate which would be installed`,
			}, {
				Name:        []string{"--lock"},
				Description: `Create a lock file (when used with -g/--file)`,
			}, {
				Name:        []string{"--suggestions"},
				Description: `Suggest alternates when gems are not found`,
				ExclusiveOn: []string{"--no-suggestions"},
			}},
		}},
	}
}
