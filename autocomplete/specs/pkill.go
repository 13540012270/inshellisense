// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["pkill"] = model.Subcommand{
		Name:        []string{"pkill"},
		Description: `Send  the  specified  signal  (by default SIGTERM) to each specified process`,
		Args: []model.Arg{{
			Name:        "pattern",
			Description: `Specifies an Extended Regular Expression for matching against the process names or command lines`,
		}},
		Options: []model.Option{{
			Name:        []string{"--signal"},
			Description: `Signal to send (either number or name)`,
			Args: []model.Arg{{
				Name:        "signal",
				Description: `Signal to send`,
				Suggestions: []model.Suggestion{{Name: []string{`SIGABRT`}}, {Name: []string{`SIGALRM`}}, {Name: []string{`SIGBUS`}}, {Name: []string{`SIGCHLD`}}, {Name: []string{`SIGCLD`}}, {Name: []string{`SIGCONT`}}, {Name: []string{`SIGEMT`}}, {Name: []string{`SIGFPE`}}, {Name: []string{`SIGHUP`}}, {Name: []string{`SIGILL`}}, {Name: []string{`SIGINFO`}}, {Name: []string{`SIGINT`}}, {Name: []string{`SIGIO`}}, {Name: []string{`SIGIOT`}}, {Name: []string{`SIGKILL`}}, {Name: []string{`SIGLOST`}}, {Name: []string{`SIGPIPE`}}, {Name: []string{`SIGPOLL`}}, {Name: []string{`SIGPROF`}}, {Name: []string{`SIGPWR`}}, {Name: []string{`SIGQUIT`}}, {Name: []string{`SIGSEGV`}}, {Name: []string{`SIGSTKFLT`}}, {Name: []string{`SIGSTOP`}}, {Name: []string{`SIGTSTP`}}, {Name: []string{`SIGSYS`}}, {Name: []string{`SIGTERM`}}, {Name: []string{`SIGTRAP`}}, {Name: []string{`SIGTTIN`}}, {Name: []string{`SIGTTOU`}}, {Name: []string{`SIGUNUSED`}}, {Name: []string{`SIGURG`}}, {Name: []string{`SIGUSR1`}}, {Name: []string{`SIGUSR2`}}, {Name: []string{`SIGVTALRM`}}, {Name: []string{`SIGXCPU`}}, {Name: []string{`SIGXFSZ`}}, {Name: []string{`SIGWINCH`}}},
			}},
		}, {
			Name:        []string{"-q", "--queue"},
			Description: `Integer value to be sent with the signal`,
			Args: []model.Arg{{
				Name: "value",
			}},
		}, {
			Name:        []string{"-e", "--echo"},
			Description: `Display what is killed`,
		}, {
			Name:        []string{"-f", "--full"},
			Description: `Use full process name to match`,
		}, {
			Name:        []string{"-g", "--pgroup"},
			Description: `Match listed process group IDs`,
			Args: []model.Arg{{
				Name:       "PGID",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-G", "--group"},
			Description: `Match real group IDs`,
			Args: []model.Arg{{
				Name:       "GID",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-i", "--ignore-case"},
			Description: `Match case insensitively`,
		}, {
			Name:        []string{"-n", "--newest"},
			Description: `Select most recently started`,
		}, {
			Name:        []string{"-o", "--oldest"},
			Description: `Select least recently started`,
		}, {
			Name:        []string{"-O", "--older"},
			Description: `Select where older than seconds`,
			Args: []model.Arg{{
				Name: "seconds",
			}},
		}, {
			Name:        []string{"-P", "--parent"},
			Description: `Match only child processes of the given parent`,
			Args: []model.Arg{{
				Name:       "PPID",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-s", "--session"},
			Description: `Match session IDs`,
			Args: []model.Arg{{
				Name:       "SID",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-t", "--terminal"},
			Description: `Match by controlling terminal`,
			Args: []model.Arg{{
				Name:       "tty",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-u", "--euid"},
			Description: `Match by effective IDs`,
			Args: []model.Arg{{
				Name:       "ID",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-U", "--uid"},
			Description: `Match by real IDs`,
			Args: []model.Arg{{
				Name:       "ID",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-x", "--exact"},
			Description: `Match exactly with the command name`,
		}, {
			Name:        []string{"-F", "--pidfile"},
			Description: `Read PIDs from file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"-L", "logpidfile"},
			Description: `Fail if PID file is not locked`,
		}, {
			Name:        []string{"-r", "--runstates"},
			Description: `Match runstates`,
			Args: []model.Arg{{
				Name: "state",
			}},
		}, {
			Name:        []string{"--ns"},
			Description: `Match the processes that belong to a specified PID`,
			Args: []model.Arg{{
				Name: "PID",
			}},
		}, {
			Name:        []string{"--nslist"},
			Description: `List which namespaces will be considered for the --ns option`,
			Args: []model.Arg{{
				Name:        "ns",
				Suggestions: []model.Suggestion{{Name: []string{`ipc`}}, {Name: []string{`mnt`}}, {Name: []string{`net`}}, {Name: []string{`pid`}}, {Name: []string{`user`}}, {Name: []string{`uts`}}},
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Output help message and exit`,
		}, {
			Name:        []string{"-V", "--version"},
			Description: `Output version information and exit`,
		}},
	}
}
