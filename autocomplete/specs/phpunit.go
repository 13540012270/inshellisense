// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["phpunit"] = model.Subcommand{
		Name:        []string{"phpunit"},
		Description: `The PHPUnit is a command-line test runner that can be invoked through the phpunit command`,
		Options: []model.Option{{
			Name:        []string{"--coverage-clover"},
			Description: `Generate code coverage report in Clover XML format,`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--coverage-crap4j"},
			Description: `Generate code coverage report in Crap4J XML format`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--coverage-html"},
			Description: `Generate code coverage report in HTML format`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "dir",
			}},
		}, {
			Name:        []string{"--coverage-php"},
			Description: `Export PHP_CodeCoverage object to file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--coverage-text"},
			Description: `Generate code coverage report in text format [default: standard output]`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--coverage-xml"},
			Description: `Generate code coverage report in PHPUnit XML format`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "dir",
			}},
		}, {
			Name:        []string{"--coverage-cache"},
			Description: `Cache static analysis results`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "dir",
			}},
		}, {
			Name:        []string{"--warm-coverage-cache"},
			Description: `Warm static analysis cache`,
		}, {
			Name:        []string{"--coverage-filter"},
			Description: `Include <dir> in code coverage analysis`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "dir",
			}},
		}, {
			Name:        []string{"--path-coverage"},
			Description: `Perform path coverage analysis`,
		}, {
			Name:        []string{"--disable-coverage-ignore"},
			Description: `Disable annotations for ignoring code coverage`,
		}, {
			Name:        []string{"--no-coverage"},
			Description: `Ignore code coverage configuration`,
		}, {
			Name:        []string{"--dont-report-useless-tests"},
			Description: `Do not report tests that do not test anything`,
		}, {
			Name:        []string{"--strict-coverage"},
			Description: `Be strict about @covers annotation usage`,
		}, {
			Name:        []string{"--strict-global-state"},
			Description: `Be strict about changes to global state`,
		}, {
			Name:        []string{"--disallow-test-output"},
			Description: `Be strict about output during tests`,
		}, {
			Name:        []string{"--disallow-resource-usage"},
			Description: `Be strict about resource usage during small tests`,
		}, {
			Name:        []string{"--enforce-time-limit"},
			Description: `Enforce time limit based on test size`,
		}, {
			Name:        []string{"--default-time-limit"},
			Description: `Timeout in seconds for tests without @small, @medium or @large`,
			Args: []model.Arg{{
				Name: "seconds",
			}},
		}, {
			Name:        []string{"--disallow-todo-tests"},
			Description: `Disallow @todo-annotated tests`,
		}, {
			Name:        []string{"--log-junit"},
			Description: `Log test execution in JUnit XML format to file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--log-teamcity"},
			Description: `Log test execution in TeamCity format to file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--testdox-html"},
			Description: `Write agile documentation in HTML format to file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--testdox-text"},
			Description: `Write agile documentation in Text format to file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--testdox-xml"},
			Description: `Write agile documentation in HTML format to file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--reverse-list"},
			Description: `Print defects in reverse order`,
		}, {
			Name:        []string{"--no-logging"},
			Description: `Ignore logging configuration`,
		}, {
			Name:        []string{"--prepend"},
			Description: `A PHP script that is included as early as possible`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--bootstrap"},
			Description: `A PHP script that is included before the tests run`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"-c", "--configuration"},
			Description: `Read configuration from XML file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--no-configuration"},
			Description: `Ignore default configuration file (phpunit.xml)`,
		}, {
			Name:        []string{"--extensions"},
			Description: `A comma separated list of PHPUnit extensions to load`,
			Args: []model.Arg{{
				Name: "extensions",
			}},
		}, {
			Name:        []string{"--no-extensions"},
			Description: `Do not load PHPUnit extensions`,
		}, {
			Name:        []string{"--include-path"},
			Description: `Prepend PHP's include_path with given path(s)`,
			Args: []model.Arg{{
				Name: "path(s)",
			}},
		}, {
			Name:        []string{"-d"},
			Description: `Sets a php.ini value`,
			Args: []model.Arg{{
				Name: "key[=value]",
			}},
		}, {
			Name:        []string{"--cache-result-file"},
			Description: `Specify result cache path and filename`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--generate-configuration"},
			Description: `Generate configuration file with suggested settings`,
		}, {
			Name:        []string{"--migrate-configuration"},
			Description: `Migrate configuration file to current format`,
		}},
	}
}
