// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["checkov"] = model.Subcommand{
		Name:        []string{"checkov"},
		Description: `Checkov scans cloud infrastructure configurations to find misconfigurations before they're deployed`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for checkov`,
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Show the version of checkov`,
		}, {
			Name:        []string{"--quiet"},
			Description: `CLI output, display only failed checks`,
		}, {
			Name:        []string{"--compact"},
			Description: `CLI output, do not display code blocks`,
		}, {
			Name:        []string{"--list", "-l"},
			Description: `List checks`,
		}, {
			Name:        []string{"--no-guide"},
			Description: `Do not fetch Bridgecrew platform IDs and guidelines for the checkov output report. Note: this prevents Bridgecrew platform check IDs from being used anywhere in the CLI`,
		}, {
			Name:        []string{"--output-bc-ids"},
			Description: `Print Bridgecrew platform IDs (BC...) instead of Checkov IDs (CKV...), if the check exists in the platform`,
			ExclusiveOn: []string{"--no-guide"},
		}, {
			Name:        []string{"--directory", "-d"},
			Description: `IaC root directory (can not be used together with --file)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "Directory",
			}},
			ExclusiveOn: []string{"--file"},
		}, {
			Name:        []string{"--output", "-o"},
			Description: `Report output format. Add multiple outputs by using the flag multiple times (-o sarif -o cli)`,
			Args: []model.Arg{{
				Name:        "FORMAT",
				Suggestions: []model.Suggestion{{Name: []string{`cli`}}, {Name: []string{`cyclonedx`}}, {Name: []string{`json`}}, {Name: []string{`junitxml`}}, {Name: []string{`github_failed_only`}}, {Name: []string{`sarif`}}},
			}},
		}, {
			Name:        []string{"--framework"},
			Description: `IaC frameworks to include checks for`,
			Args: []model.Arg{{
				Name:        "FRAMEWORKS",
				Suggestions: []model.Suggestion{{Name: []string{`arm`}}, {Name: []string{`cloudformation`}}, {Name: []string{`dockerfile`}}, {Name: []string{`github_configuration`}}, {Name: []string{`gitlab_configuration`}}, {Name: []string{`helm`}}, {Name: []string{`json`}}, {Name: []string{`kubernetes`}}, {Name: []string{`kustomize`}}, {Name: []string{`sca_package`}}, {Name: []string{`secrets`}}, {Name: []string{`serverless`}}, {Name: []string{`terraform`}}, {Name: []string{`terraform_plan`}}, {Name: []string{`all`}}},
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"--skip-framework"},
			Description: `IaC frameworks to exclude checks for`,
			Args: []model.Arg{{
				Name:        "FRAMEWORKS",
				Suggestions: []model.Suggestion{{Name: []string{`arm`}}, {Name: []string{`cloudformation`}}, {Name: []string{`dockerfile`}}, {Name: []string{`github_configuration`}}, {Name: []string{`gitlab_configuration`}}, {Name: []string{`helm`}}, {Name: []string{`json`}}, {Name: []string{`kubernetes`}}, {Name: []string{`kustomize`}}, {Name: []string{`sca_package`}}, {Name: []string{`secrets`}}, {Name: []string{`serverless`}}, {Name: []string{`terraform`}}, {Name: []string{`terraform_plan`}}, {Name: []string{`all`}}},
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"--add-check"},
			Description: `Generate a new check via CLI prompt`,
		}, {
			Name:        []string{"--file", "-f"},
			Description: `IaC file(can not be used together with --directory)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "FILE",
			}},
			ExclusiveOn: []string{"--directory"},
		}, {
			Name:        []string{"--skip-path"},
			Description: `Path (file or directory) to skip, using regular expression logic, relative to current working directory. Word boundaries are not implicit; i.e., specifying 'dir1' will skip any directory or subdirectory named 'dir1'. Ignored with -f. Can be specified multiple times`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "SKIP_PATH",
			}},
			ExclusiveOn: []string{"--file"},
		}, {
			Name:        []string{"--check", "-c"},
			Description: `Filter scan to run only on a specific check identifier (allowlist). You can specify multiple checks separated by comma delimiter. You may also use the environment variable: CKV_CHECK`,
			Args: []model.Arg{{
				Name: "CHECKS",
			}},
		}, {
			Name:        []string{"--skip-check"},
			Description: `Filter scan to run all check except a specific check identifier (denylist). You can specify multiple checks separated by comma delimiter. You may also use the environment variable: CKV_SKIP_CHECK`,
			Args: []model.Arg{{
				Name: "CHECKS",
			}},
		}, {
			Name:        []string{"--run-all-external-checks"},
			Description: `Run all external checks (loaded via --external-checks options) even if the checks are not present in the --check list. This allows you to always ensure that new checks present in the external source are used. If an external check is included in --skip-check, it will still be skipped`,
		}, {
			Name:        []string{"--external-checks-dir"},
			Description: `Directory for custom checks to be loaded. Can be repeated`,
			Args: []model.Arg{{
				Name: "EXTERNAL_CHECKS_DIR",
			}},
		}, {
			Name:        []string{"--bc-api-key"},
			Description: `Bridgecrew API key. You may also use the environment variable: BC_API_KEY`,
			Args: []model.Arg{{
				Name: "BC_API_KEY",
			}},
		}, {
			Name:        []string{"--docker-image"},
			Description: `Scan docker images by name or ID. Only works with --bc-api-key flag`,
			Args: []model.Arg{{
				Name: "DOCKER_IMAGE",
			}},
		}, {
			Name:        []string{"--dockerfile-path"},
			Description: `Path to the Dockerfile of the scanned docker image`,
			Args: []model.Arg{{
				Name: "DOCKERFILE_PATH",
			}},
		}, {
			Name:        []string{"--repo-id"},
			Description: `Identity string of the repository, with form <repo_owner>/<repo_name>`,
			Args: []model.Arg{{
				Name: "REPO_ID",
			}},
		}, {
			Name:        []string{"--branch", "-b"},
			Description: `Selected branch of the persisted repository. Only has effect when using the --bc-api-key flag`,
			Args: []model.Arg{{
				Name:      "BRANCH",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--skip-fixes"},
			Description: `Do not download fixed resource templates from Bridgecrew. Only has an effect when using the --bc-api-key flag`,
		}, {
			Name:        []string{"--skip-suppressions"},
			Description: `Do not download preconfigured suppressions from the Bridgecrew platform. Code comment suppressions will still be honored. Only has an effect when using the --bc-api-key flag`,
		}, {
			Name:        []string{"--skip-policy-download"},
			Description: `Do not download custom policies configured in the Bridgecrew platform. Only has an effect when using the --bc-api-key flag`,
		}, {
			Name:        []string{"--download-external-modules"},
			Description: `Download external terraform modules from public git repositories and terraform registry. You may also use the environment variable: DOWNLOAD_EXTERNAL_MODULES]`,
			Args: []model.Arg{{
				Name: "DOWNLOAD_EXTERNAL_MODULES",
			}},
		}, {
			Name:        []string{"--var-file"},
			Description: `Variable files to load in addition to the default files (see https://www.terraform.io/docs/language/values/variables.html#variable-definitions-tfvars-files). Currently only supported for source Terraform (.tf file), and Helm chart scans. Requires using --directory, NOT --file`,
			Args: []model.Arg{{
				Name: "VAR_FILE",
			}},
			ExclusiveOn: []string{"--file"},
		}, {
			Name:        []string{"--external-modules-download-path"},
			Description: `Set the path for the download external terraform modules. You may also use the environment variable: EXTERNAL_MODULES_DIR`,
			Args: []model.Arg{{
				Name: "EXTERNAL_MODULES_DIR",
			}},
		}, {
			Name:        []string{"--evaluate-variables"},
			Description: `Evaluate the values of variables and locals`,
			Args: []model.Arg{{
				Name: "EVALUATE_VARIABLES",
			}},
		}, {
			Name:        []string{"--ca-certificate", "-ca"},
			Description: `Custom CA (bundle) fila. You may also use the environment variablee: CA_CERTIFICATE`,
			Args: []model.Arg{{
				Name: "CA_CERTIFICATE",
			}},
		}, {
			Name:        []string{"--repo-root-for-plan-enrichment"},
			Description: `Directory containing the hcl code used to generate a given plan file. Use with -f FILE`,
			Args: []model.Arg{{
				Name: "REPO_ROOT_FOR_PLAN_ENRICHMENT",
			}},
		}, {
			Name:        []string{"--config-file"},
			Description: `Path to the Checkov configuration YAML file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "CONFIG_FILE",
			}},
		}, {
			Name:        []string{"--create-config"},
			Description: `Takes the current command line args and writes them out to a config file at the given path`,
			Args: []model.Arg{{
				Name: "CONFIG_FILE",
			}},
		}, {
			Name:        []string{"--show-config"},
			Description: `Prints all arguments and config settings and where they came from (eg. commandline, config file, environment variable or default)`,
		}, {
			Name:        []string{"--create-baseline"},
			Description: `Save all current results to a '.checkov.baseline' file so future runs will only flag new findings. Works only with "--directory" flag`,
		}, {
			Name:        []string{"--baseline"},
			Description: `Use a '.checkov.baseline' file to compare current results with a known baseline. Report will include only failed checks that are newwith respect to the provided baseline. See --create-baseline`,
			Args: []model.Arg{{
				Name: "BASELINE",
			}},
		}, {
			Name:        []string{"--soft-fail", "-s"},
			Description: `Runs checks but suppresses the error code`,
		}, {
			Name:        []string{"--soft-fail-on"},
			Description: `Exits with a 0 exit code for specified checks. You can specify multiple checks separated by comma delimiter`,
			Args: []model.Arg{{
				Name: "CHECKS",
			}},
		}, {
			Name:        []string{"--hard-fail-on"},
			Description: `Exits with a non-zero exit code for specified checks. You can specify multiple checks separated by comma delimiter`,
			Args: []model.Arg{{
				Name: "CHECKS",
			}},
		}, {
			Name:        []string{"--min-cve-severity"},
			Description: `Set minimum severity to return a non-zero exit code`,
			Args: []model.Arg{{
				Name:        "MIN_SEVERITY",
				Suggestions: []model.Suggestion{{Name: []string{`critical`}}, {Name: []string{`high`}}, {Name: []string{`medium`}}, {Name: []string{`low`}}, {Name: []string{`none`}}},
			}},
		}, {
			Name:        []string{"--skip-cve-package"},
			Description: `Ignore specific open source package when SCA scanning for CVEs in package dependencies. Can be used multiple times to skip multiple packages`,
			Args: []model.Arg{{
				Name: "SKIP_CVE_PACKAGE",
			}},
		}, {
			Name:        []string{"--use-enforcement-rules"},
			Description: `Use the Enforcement rules configured in the platform for hard / soft fail logic`,
			Args: []model.Arg{{
				Name: "USE_ENFORCEMENT_RULES",
			}},
		}, {
			Name:        []string{"--support"},
			Description: `Enable debug logs and upload the logs to the server`,
			Args: []model.Arg{{
				Name: "SUPPORT",
			}},
		}, {
			Name:        []string{"--summary-position"},
			Description: `Chose whether the summary will be appended on top or on bottom`,
			Args: []model.Arg{{
				Name:        "SUMMARY_POSITION",
				Suggestions: []model.Suggestion{{Name: []string{`top`}}, {Name: []string{`bottom`}}},
			}},
		}, {
			Name:        []string{"--skip-resources-without-violations"},
			Description: `Exclude extra resources (resources without violations)`,
			Args: []model.Arg{{
				Name: "SKIP_RESOURCES_WITHOUT_VIOLATIONS",
			}},
		}, {
			Name:        []string{"--skip-download"},
			Description: `Do not download any data from Prisma Cloud`,
			Args: []model.Arg{{
				Name: "SKIP_DOWNLOAD",
			}},
		}, {
			Name:        []string{"--secrets-history-timeout"},
			Description: `Maximum time to run the history scan`,
			Args: []model.Arg{{
				Name: "SECRETS_HISTORY_TIMEOUT",
			}},
		}, {
			Name:        []string{"--scan-secrets-history"},
			Description: `Will scan the history of commits for secrets`,
			Args: []model.Arg{{
				Name: "SCAN_SECRETS_HISTORY",
			}},
		}, {
			Name:        []string{"--prisma-api-url"},
			Description: `The Prisma Cloud API URL`,
			Args: []model.Arg{{
				Name: "PRISMA_API_URL",
			}},
		}, {
			Name:        []string{"--policy-metadata-filter"},
			Description: `Comma separated key:value string to filter policies based on Prisma Cloud policy metadata`,
			Args: []model.Arg{{
				Name: "POLICY_METADATA_FILTER",
			}},
		}, {
			Name:        []string{"--output-file-path"},
			Description: `Name of the output folder to save the chosen output formats`,
			Args: []model.Arg{{
				Name: "OUTPUT_FILE_PATH",
			}},
		}, {
			Name:        []string{"--output-baseline-as-skipped"},
			Description: `Output checks that are skipped due to baseline file presence`,
			Args: []model.Arg{{
				Name: "OUTPUT_BASELINE_AS_SKIPPED",
			}},
		}, {
			Name:        []string{"--openai-api-key"},
			Description: `Add an OpenAI API key to enhance finding guidelines. This will send Code to OpenAI`,
			Args: []model.Arg{{
				Name: "OPENAI_API_KEY",
			}},
		}, {
			Name:        []string{"--no-fail-on-crash"},
			Description: `Return exit code 0 instead of 2`,
			Args: []model.Arg{{
				Name: "NO_FAIL_ON_CRASH",
			}},
		}, {
			Name:        []string{"--mask"},
			Description: `Each entry in the list will be used for masking the desired attribute`,
			Args: []model.Arg{{
				Name: "MASK",
			}},
		}, {
			Name:        []string{"--include-all-checkov-policies"},
			Description: `When running with an API key, Checkov will omit any policies that do not exist in the Bridgecrew or Prisma Cloud platform`,
			Args: []model.Arg{{
				Name: "INCLUDE_ALL_CHECKOV_POLICIES",
			}},
		}, {
			Name:        []string{"--external-checks-git"},
			Description: `GitHub URL of external checks to be added`,
			Args: []model.Arg{{
				Name: "EXTERNAL_CHECKS_GIT",
			}},
		}, {
			Name:        []string{"--enable-secret-scan-all-files"},
			Description: `Enable secret scan for all files`,
			Args: []model.Arg{{
				Name: "ENABLE_SECRET_SCAN_ALL_FILES",
			}},
		}, {
			Name:        []string{"--deep-analysis"},
			Description: `Enable combine TF graph and TF Plan graph`,
			Args: []model.Arg{{
				Name: "DEEP_ANALYSIS",
			}},
		}, {
			Name:        []string{"--block-list-secret-scan"},
			Description: `List of files to filter out from the secret scanner`,
			Args: []model.Arg{{
				Name: "BLOCK_LIST_SECRET_SCAN",
			}},
		}},
	}
}
