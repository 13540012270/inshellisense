// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["flyctl"] = model.Subcommand{
		Name:        []string{"flyctl"},
		Description: `The flyctl is a command-line interface for fly.io`,
		Options: []model.Option{{
			Name:        []string{"--access-token", "-t"},
			Description: `Fly API Access Token`,
			Args: []model.Arg{{
				Name: "access-token",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--builtinsfile"},
			Description: `Load builtins from named file`,
			Args: []model.Arg{{
				Name: "builtinsfile",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--json", "-j"},
			Description:  `Json output`,
			IsPersistent: true,
		}, {
			Name:         []string{"--verbose"},
			Description:  `Verbose output`,
			IsPersistent: true,
		}, {
			Name:         []string{"--help", "-h"},
			Description:  `Display help`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"agent"},
			Description: `Commands that manage the Fly agent, a background process that manages flyctl wireguard connections`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"ping"},
				Description: `Ping the Fly agent`,
			}, {
				Name:        []string{"restart"},
				Description: `Restart the Fly agent`,
			}, {
				Name:        []string{"daemon-start", "run"},
				Description: `Run the Fly agent in the foreground`,
			}, {
				Name:        []string{"start"},
				Description: `Start the Fly agent`,
			}, {
				Name:        []string{"stop"},
				Description: `Stop the Fly agent`,
			}},
		}, {
			Name:        []string{"apps"},
			Description: `Manage apps`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Create a new application`,
				Options: []model.Option{{
					Name:        []string{"--generate-name"},
					Description: `Generate a name for the app`,
				}, {
					Name:        []string{"--name"},
					Description: `The app name to use`,
					Args: []model.Arg{{
						Name: "name",
					}},
				}, {
					Name:        []string{"--network"},
					Description: `Specify custom network id`,
					Args: []model.Arg{{
						Name: "network",
					}},
				}, {
					Name:        []string{"--org", "-o"},
					Description: `The organization to operate on`,
					Args: []model.Arg{{
						Name:      "org",
						Generator: nil, // TODO: port over generator
					}},
				}},
			}, {
				Name:        []string{"destroy"},
				Description: `Permanently destroys an app`,
				Options: []model.Option{{
					Name:        []string{"--yes", "-y"},
					Description: `Accept all confirmations`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List applications`,
			}, {
				Name:        []string{"move"},
				Description: `Move an app to another organization`,
				Options: []model.Option{{
					Name:        []string{"--org", "-o"},
					Description: `The organization to operate on`,
					Args: []model.Arg{{
						Name:      "org",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--yes", "-y"},
					Description: `Accept all confirmations`,
				}},
			}, {
				Name:        []string{"open"},
				Description: `Open browser to current deployed application`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"releases"},
				Description: `List app releases`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--image"},
					Description: `Display the Docker image reference of the release`,
				}},
			}, {
				Name:        []string{"restart"},
				Description: `Restart an application`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
				Options: []model.Option{{
					Name:        []string{"-f", "--force"},
					Description: `Will issue a restart against each Machine even if there are errors. ( Machines only )`,
				}, {
					Name:        []string{"--skip-health-checks"},
					Description: `Restarts app without waiting for health checks. ( Machines only )`,
				}},
			}},
		}, {
			Name:        []string{"auth"},
			Description: `Manage authentication`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"docker"},
				Description: `Authenticate docker`,
			}, {
				Name:        []string{"login"},
				Description: `Log in a user`,
				Options: []model.Option{{
					Name:        []string{"--email"},
					Description: `Login email`,
					Args: []model.Arg{{
						Name: "email",
					}},
				}, {
					Name:        []string{"--interactive", "-i"},
					Description: `Log in with an email and password interactively`,
				}, {
					Name:        []string{"--otp"},
					Description: `One time password`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}, {
					Name:        []string{"--password"},
					Description: `Login password`,
					Args: []model.Arg{{
						Name: "password",
					}},
				}},
			}, {
				Name:        []string{"logout"},
				Description: `Logs out the currently logged in user`,
			}, {
				Name:        []string{"signup"},
				Description: `Create a new fly account`,
			}, {
				Name:        []string{"token"},
				Description: `Show the current auth token`,
			}, {
				Name:        []string{"whoami"},
				Description: `Displays the users email address/service identity currently authenticated and in use`,
			}},
		}, {
			Name:        []string{"autoscale"},
			Description: `Autoscaling app resources`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"balanced"},
				Description: `Configure a traffic balanced app with params (min=int max=int)`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"disable"},
				Description: `Disable autoscaling`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"set"},
				Description: `Set current models autoscaling parameters`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"show"},
				Description: `Show current autoscaling configuration`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"standard"},
				Description: `Configure a standard balanced app with params (min=int max=int)`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"builds"},
			Description: `Manage application builds`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"list"},
				Description: `List builds`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"certs"},
			Description: `Manage certificates`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"create", "add"},
				Description: `Add a certificate for an app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"check"},
				Description: `Checks DNS configuration`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List certificates for an app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"delete", "remove"},
				Description: `Removes a certificate from an app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--yes", "-y"},
					Description: `Accept all confirmations`,
				}},
			}, {
				Name:        []string{"show"},
				Description: `Shows certificate information`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"checks"},
			Description: `Manage health checks`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"handlers"},
				Description: `Manage health check handlers`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"create"},
					Description: `Create a health check handler`,
					Options: []model.Option{{
						Name:        []string{"--organization", "-o"},
						Description: `The organization to add the handler to`,
						Args: []model.Arg{{
							Name: "organization",
						}},
					}, {
						Name:        []string{"--type"},
						Description: `The type of handler to create, can be slack or pagerduty`,
						Args: []model.Arg{{
							Name: "type",
						}},
					}},
				}, {
					Name:        []string{"delete"},
					Description: `Delete a health check handler`,
				}, {
					Name:        []string{"list"},
					Description: `List health check handlers`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List app health checks`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--check-name"},
					Description: `Filter checks by name`,
					Args: []model.Arg{{
						Name: "check-name",
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"completion"},
			Description: `Generate the autocompletion script for the specified shell`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"bash"},
				Description: `Generate the autocompletion script for bash`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"fish"},
				Description: `Generate the autocompletion script for fish`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"powershell"},
				Description: `Generate the autocompletion script for powershell`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"zsh"},
				Description: `Generate the autocompletion script for zsh`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}},
		}, {
			Name:        []string{"config"},
			Description: `Manage an app's configuration`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"display"},
				Description: `Display an app's configuration`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"env"},
				Description: `Display an app's runtime environment variables`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"save"},
				Description: `Save an app's config file`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"validate"},
				Description: `Validate an app's config file`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"create"},
			Description: `Create a new application`,
			Options: []model.Option{{
				Name:        []string{"--generate-name"},
				Description: `Generate a name for the app`,
			}, {
				Name:        []string{"--name"},
				Description: `The app name to use`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Specify custom network id`,
				Args: []model.Arg{{
					Name: "network",
				}},
			}, {
				Name:        []string{"--org", "-o"},
				Description: `The organization to operate on`,
				Args: []model.Arg{{
					Name:      "org",
					Generator: nil, // TODO: port over generator
				}},
			}},
		}, {
			Name:        []string{"curl"},
			Description: `Run a performance test against a URL`,
		}, {
			Name:        []string{"dash", "dashboard"},
			Description: `Open web browser on Fly Web UI for this app`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"metrics"},
				Description: `Open web browser on Fly Web UI for this app's metrics`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"deploy"},
			Description: `Deploy Fly applications`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--build-arg"},
				Description: `Set of build time variables in the form of NAME=VALUE pairs. Can be specified multiple times`,
				Args: []model.Arg{{
					Name: "build-arg",
				}},
			}, {
				Name:        []string{"--build-only"},
				Description: `Build but do not deploy`,
			}, {
				Name:        []string{"--build-target"},
				Description: `Set the target build stage to build if the Dockerfile has more than one stage`,
				Args: []model.Arg{{
					Name: "build-target",
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--detach"},
				Description: `Return immediately instead of monitoring deployment progress`,
			}, {
				Name:        []string{"--dockerfile"},
				Description: `Path to a Dockerfile. Defaults to the Dockerfile in the working directory`,
				Args: []model.Arg{{
					Name: "dockerfile",
				}},
			}, {
				Name:        []string{"--env", "-e"},
				Description: `Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times`,
				Args: []model.Arg{{
					Name: "env",
				}},
			}, {
				Name:        []string{"--image", "-i"},
				Description: `The image tag or ID to deploy`,
				Args: []model.Arg{{
					Name: "image",
				}},
			}, {
				Name:        []string{"--image-label"},
				Description: `Image label to use when tagging and pushing to the fly registry. Defaults to "deployment-{timestamp}"`,
				Args: []model.Arg{{
					Name: "image-label",
				}},
			}, {
				Name:        []string{"--local-only"},
				Description: `Only perform builds locally using the local docker daemon`,
			}, {
				Name:        []string{"--nix"},
				Description: `Build with Nix`,
			}, {
				Name:        []string{"--no-cache"},
				Description: `Do not use the build cache when building the image`,
			}, {
				Name:        []string{"--now"},
				Description: `Deploy now without confirmation`,
			}, {
				Name:        []string{"--push"},
				Description: `Push image to registry after build is complete`,
			}, {
				Name:        []string{"--region", "-r"},
				Description: `The region to operate on`,
				Args: []model.Arg{{
					Name: "region",
				}},
			}, {
				Name:        []string{"--remote-only"},
				Description: `Perform builds on a remote builder instance instead of using the local docker daemon`,
			}, {
				Name:        []string{"--strategy"},
				Description: `The strategy for replacing running instances. Options are canary, rolling, bluegreen, or immediate. Default is canary, or rolling when max-per-region is set`,
				Args: []model.Arg{{
					Name: "strategy",
				}},
			}},
		}, {
			Name:        []string{"destroy"},
			Description: `Permanently destroys an app`,
			Options: []model.Option{{
				Name:        []string{"--yes", "-y"},
				Description: `Accept all confirmations`,
			}},
		}, {
			Name:        []string{"dig"},
			Description: `Make DNS requests against Fly.io's internal DNS server`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--org", "-o"},
				Description: `The organization to operate on`,
				Args: []model.Arg{{
					Name:      "org",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--short", "-s"},
				Description: `Just print the answers, not DNS record details`,
			}},
		}, {
			Name:        []string{"dns-records"},
			Description: `Manage DNS records`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"export"},
				Description: `Export DNS records`,
				Options: []model.Option{{
					Name:        []string{"--overwrite"},
					Description: ``,
				}},
			}, {
				Name:        []string{"import"},
				Description: `Import DNS records`,
			}, {
				Name:        []string{"list"},
				Description: `List DNS records`,
			}},
		}, {
			Name:        []string{"docs"},
			Description: `View Fly documentation`,
		}, {
			Name:        []string{"doctor"},
			Description: `The DOCTOR command allows you to debug your Fly environment`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"diag"},
				Description: `Send diagnostic information about your applications back to Fly.io`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--force"},
					Description: `Send diagnostics even if we can't find your local Fly.io app`,
				}},
			}},
		}, {
			Name:        []string{"domains"},
			Description: `Manage domains`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"add"},
				Description: `Add a domain`,
			}, {
				Name:        []string{"list"},
				Description: `List domains`,
			}, {
				Name:        []string{"register"},
				Description: `Register a domain`,
			}, {
				Name:        []string{"show"},
				Description: `Show domain`,
			}},
		}, {
			Name:        []string{"history"},
			Description: `List an app's change history`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
		}, {
			Name:        []string{"img", "image"},
			Description: `Manage app image`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"show"},
				Description: `Show image details`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"update"},
				Description: `Updates the app's image to the latest available version. (Fly Postgres only)`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--detach"},
					Description: `Return immediately instead of monitoring update progress`,
				}, {
					Name:        []string{"--yes", "-y"},
					Description: `Accept all confirmations`,
				}},
			}},
		}, {
			Name:        []string{"info"},
			Description: `Show detailed app information`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--host"},
				Description: `Returns just the hostname`,
			}, {
				Name:        []string{"--name", "-n"},
				Description: `Returns just the appname`,
			}},
		}, {
			Name:        []string{"ips"},
			Description: `Manage IP addresses for apps`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"allocate-v4"},
				Description: `Allocate an IPv4 address`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--region"},
					Description: `The region where the address should be allocated`,
					Args: []model.Arg{{
						Name: "region",
					}},
				}},
			}, {
				Name:        []string{"allocate-v6"},
				Description: `Allocate an IPv6 address`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--region"},
					Description: `The region where the address should be allocated`,
					Args: []model.Arg{{
						Name: "region",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List allocated IP addresses`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"private"},
				Description: `List instances private IP addresses`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"release"},
				Description: `Release an IP address`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"launch"},
			Description: `Launch a new app`,
			Options: []model.Option{{
				Name:        []string{"--copy-config"},
				Description: `Use the configuration file if present without prompting`,
			}, {
				Name:        []string{"--dockerfile"},
				Description: `Path to a Dockerfile. Defaults to the Dockerfile in the working directory`,
				Args: []model.Arg{{
					Name: "dockerfile",
				}},
			}, {
				Name:        []string{"--generate-name"},
				Description: `Always generate a name for the app`,
			}, {
				Name:        []string{"--image"},
				Description: `The image to launch`,
				Args: []model.Arg{{
					Name: "image",
				}},
			}, {
				Name:        []string{"--name"},
				Description: `The name of the new app`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"--no-deploy"},
				Description: `Do not prompt for deployment`,
			}, {
				Name:        []string{"--now"},
				Description: `Deploy now without confirmation`,
			}, {
				Name:        []string{"--org"},
				Description: `The organization that will own the app`,
				Args: []model.Arg{{
					Name:      "org",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--path"},
				Description: `Path to app code and where a fly.toml file will be saved`,
				Args: []model.Arg{{
					Name: "path",
				}},
			}, {
				Name:        []string{"--region"},
				Description: `The region to launch the new app in`,
				Args: []model.Arg{{
					Name: "region",
				}},
			}, {
				Name:        []string{"--remote-only"},
				Description: `Perform builds remotely without using the local docker daemon`,
			}},
		}, {
			Name:        []string{"logs"},
			Description: `View app logs`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--instance", "-i"},
				Description: `Filter by instance ID`,
				Args: []model.Arg{{
					Name: "instance",
				}},
			}, {
				Name:        []string{"--region", "-r"},
				Description: `The region to operate on`,
				Args: []model.Arg{{
					Name: "region",
				}},
			}},
		}, {
			Name:        []string{"machines", "m", "machine"},
			Description: `Commands that manage machines`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"clone"},
				Description: `Clones a Fly Machine`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--detach", "-d"},
					Description: `Detach from the machine's logs`,
				}, {
					Name:        []string{"--name", "-n"},
					Description: `The name of the new machine`,
					Args: []model.Arg{{
						Name: "name",
					}},
				}, {
					Name:        []string{"--org", "-o"},
					Description: `The organization to operate on`,
					Args: []model.Arg{{
						Name:      "org",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--region", "-r"},
					Description: `The region to operate on`,
					Args: []model.Arg{{
						Name: "region",
					}},
				}},
			}, {
				Name:        []string{"kill"},
				Description: `Kill (SIGKILL) a Fly machine`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List Fly machines`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--quiet", "-q"},
					Description: `Only list machine ids`,
				}},
			}, {
				Name:        []string{"rm", "remove"},
				Description: `Remove a Fly machine`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--force", "-f"},
					Description: `Force kill machine if it's running`,
				}},
			}, {
				Name:        []string{"run"},
				Description: `Run a machine`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--build-arg"},
					Description: `Set of build time variables in the form of NAME=VALUE pairs. Can be specified multiple times`,
					Args: []model.Arg{{
						Name: "build-arg",
					}},
				}, {
					Name:        []string{"--build-local-only"},
					Description: `Only perform builds locally using the local docker daemon`,
				}, {
					Name:        []string{"--build-only"},
					Description: ``,
				}, {
					Name:        []string{"--build-remote-only"},
					Description: `Perform builds remotely without using the local docker daemon`,
				}, {
					Name:        []string{"--build-target"},
					Description: `Set the target build stage to build if the Dockerfile has more than one stage`,
					Args: []model.Arg{{
						Name: "build-target",
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--cpu-kind"},
					Description: `Kind of CPU to use (shared, dedicated)`,
					Args: []model.Arg{{
						Name: "cpu-kind",
					}},
				}, {
					Name:        []string{"--cpus"},
					Description: `Number of CPUs`,
					Args: []model.Arg{{
						Name: "cpus",
					}},
				}, {
					Name:        []string{"--detach", "-d"},
					Description: `Detach from the machine's logs`,
				}, {
					Name:        []string{"--dockerfile"},
					Description: `Path to a Dockerfile. Defaults to the Dockerfile in the working directory`,
					Args: []model.Arg{{
						Name: "dockerfile",
					}},
				}, {
					Name:        []string{"--entrypoint"},
					Description: `ENTRYPOINT replacement`,
					Args: []model.Arg{{
						Name: "entrypoint",
					}},
				}, {
					Name:        []string{"--env", "-e"},
					Description: `Set of environment variables in the form of NAME=VALUE pairs. Can be specified multiple times`,
					Args: []model.Arg{{
						Name: "env",
					}},
				}, {
					Name:        []string{"--id"},
					Description: `Machine ID, if previously known`,
					Args: []model.Arg{{
						Name: "id",
					}},
				}, {
					Name:        []string{"--image-label"},
					Description: `Image label to use when tagging and pushing to the fly registry. Defaults to "deployment-{timestamp}"`,
					Args: []model.Arg{{
						Name: "image-label",
					}},
				}, {
					Name:        []string{"--memory"},
					Description: `Memory (in megabytes) to attribute to the machine`,
					Args: []model.Arg{{
						Name: "memory",
					}},
				}, {
					Name:        []string{"--name", "-n"},
					Description: `Machine name, will be generated if missing`,
					Args: []model.Arg{{
						Name: "name",
					}},
				}, {
					Name:        []string{"--no-build-cache"},
					Description: `Do not use the cache when building the image`,
				}, {
					Name:        []string{"--org"},
					Description: `The organization that will own the app`,
					Args: []model.Arg{{
						Name:      "org",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--port", "-p"},
					Description: `Exposed port mappings (format: edgePort[:machinePort]/[protocol[:handler]])`,
					Args: []model.Arg{{
						Name: "port",
					}},
				}, {
					Name:        []string{"--region", "-r"},
					Description: `The region to operate on`,
					Args: []model.Arg{{
						Name: "region",
					}},
				}, {
					Name:        []string{"--size", "-s"},
					Description: `Preset guest cpu and memory for a machine`,
					Args: []model.Arg{{
						Name: "size",
					}},
				}, {
					Name:        []string{"--volume", "-v"},
					Description: `Volumes to mount in the form of <volume_id_or_name>:/path/inside/machine[:<options>]`,
					Args: []model.Arg{{
						Name: "volume",
					}},
				}},
			}, {
				Name:        []string{"start"},
				Description: `Start a Fly machine`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"status"},
				Description: `Show current status of a running machine`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"stop"},
				Description: `Stop a Fly machine`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--signal", "-s"},
					Description: `Signal to stop the machine with (default: SIGINT)`,
					Args: []model.Arg{{
						Name: "signal",
					}},
				}, {
					Name:        []string{"--time"},
					Description: `Seconds to wait before killing the machine`,
					Args: []model.Arg{{
						Name: "time",
					}},
				}},
			}},
		}, {
			Name:        []string{"monitor"},
			Description: `Monitor currently running application deployments`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
		}, {
			Name:        []string{"move"},
			Description: `Move an app to another organization`,
			Options: []model.Option{{
				Name:        []string{"--org", "-o"},
				Description: `The organization to operate on`,
				Args: []model.Arg{{
					Name:      "org",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--yes", "-y"},
				Description: `Accept all confirmations`,
			}},
		}, {
			Name:        []string{"open"},
			Description: `Open browser to current deployed application`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
		}, {
			Name:        []string{"orgs"},
			Description: `Commands for managing Fly organizations`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"builder"},
				Description: `Manage remote builder`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"show"},
					Description: `Show details about an organization's remote builder image`,
				}, {
					Name:        []string{"update"},
					Description: `Update an organization's remote builder image`,
				}},
			}, {
				Name:        []string{"create"},
				Description: `Create an organization`,
			}, {
				Name:        []string{"delete"},
				Description: `Delete an organization`,
				Options: []model.Option{{
					Name:        []string{"--yes", "-y"},
					Description: `Accept all confirmations`,
				}},
			}, {
				Name:        []string{"invite"},
				Description: `Invite user (by email) to organization`,
			}, {
				Name:        []string{"list"},
				Description: `Lists organizations for current user`,
			}, {
				Name:        []string{"remove"},
				Description: `Remove a user from an organization`,
			}, {
				Name:        []string{"show"},
				Description: `Show information about an organization`,
			}},
		}, {
			Name:        []string{"ping"},
			Description: `Test connectivity with ICMP ping messages`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--count", "-n"},
				Description: `Number of probes to send (0=indefinite)`,
				Args: []model.Arg{{
					Name: "count",
				}},
			}, {
				Name:        []string{"--interval", "-i"},
				Description: `Interval between ping probes`,
				Args: []model.Arg{{
					Name: "interval",
				}},
			}, {
				Name:        []string{"--org", "-o"},
				Description: `The organization to operate on`,
				Args: []model.Arg{{
					Name:      "org",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--size", "-s"},
				Description: `Size of probe to send (not including headers)`,
				Args: []model.Arg{{
					Name: "size",
				}},
			}},
		}, {
			Name:        []string{"platform"},
			Description: `Fly platform information`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"regions"},
				Description: `List regions`,
			}, {
				Name:        []string{"status"},
				Description: `Show current platform status`,
			}, {
				Name:        []string{"vm-sizes"},
				Description: `List VM Sizes`,
			}},
		}, {
			Name:        []string{"pg", "postgres"},
			Description: `Manage postgres clusters`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"attach"},
				Description: `Attach a postgres cluster to an app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--database-name"},
					Description: `Database to use, defaults to a new database with the same name as the app`,
					Args: []model.Arg{{
						Name: "database-name",
					}},
				}, {
					Name:        []string{"--database-user"},
					Description: `The database user to create, defaults to creating a user with the same name as the consuming app`,
					Args: []model.Arg{{
						Name: "database-user",
					}},
				}, {
					Name:        []string{"--postgres-app"},
					Description: `The postgres cluster to attach to the app`,
					Args: []model.Arg{{
						Name: "postgres-app",
					}},
				}, {
					Name:        []string{"--variable-name"},
					Description: `The env variable name that will be added to the app. Defaults to DATABASE_URL`,
					Args: []model.Arg{{
						Name: "variable-name",
					}},
				}},
			}, {
				Name:        []string{"connect"},
				Description: `Connect to the Postgres console`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--database"},
					Description: `The postgres database to connect to`,
					Args: []model.Arg{{
						Name: "database",
					}},
				}, {
					Name:        []string{"--password"},
					Description: `The postgres user password`,
					Args: []model.Arg{{
						Name: "password",
					}},
				}, {
					Name:        []string{"--user"},
					Description: `The postgres user to connect with`,
					Args: []model.Arg{{
						Name: "user",
					}},
				}},
			}, {
				Name:        []string{"create"},
				Description: `Create a postgres cluster`,
				Options: []model.Option{{
					Name:        []string{"--image-ref"},
					Description: ``,
					Args: []model.Arg{{
						Name: "image-ref",
					}},
				}, {
					Name:        []string{"--initial-cluster-size"},
					Description: `The size of the initial postgres cluster`,
					Args: []model.Arg{{
						Name: "initial-cluster-size",
					}},
				}, {
					Name:        []string{"--name"},
					Description: `The name of the new app`,
					Args: []model.Arg{{
						Name: "name",
					}},
				}, {
					Name:        []string{"--organization"},
					Description: `The organization that will own the app`,
					Args: []model.Arg{{
						Name: "organization",
					}},
				}, {
					Name:        []string{"--password"},
					Description: `The superuser password. one will be generated for you if you leave this blank`,
					Args: []model.Arg{{
						Name: "password",
					}},
				}, {
					Name:        []string{"--region"},
					Description: `The region to launch the new app in`,
					Args: []model.Arg{{
						Name: "region",
					}},
				}, {
					Name:        []string{"--snapshot-id"},
					Description: `Creates the volume with the contents of the snapshot`,
					Args: []model.Arg{{
						Name: "snapshot-id",
					}},
				}, {
					Name:        []string{"--vm-size"},
					Description: `The size of the VM`,
					Args: []model.Arg{{
						Name: "vm-size",
					}},
				}, {
					Name:        []string{"--volume-size"},
					Description: `The size in GB for volumes`,
					Args: []model.Arg{{
						Name: "volume-size",
					}},
				}},
			}, {
				Name:        []string{"db"},
				Description: `Manage databases in a cluster`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"list"},
					Description: `List databases in a cluster`,
					Options: []model.Option{{
						Name:        []string{"--app", "-a"},
						Description: `App name to operate on`,
						Args: []model.Arg{{
							Name:      "app",
							Generator: nil, // TODO: port over generator
						}},
					}, {
						Name:        []string{"--config", "-c"},
						Description: `Path to an app config file or directory containing one`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "config",
						}},
					}},
				}},
			}, {
				Name:        []string{"detach"},
				Description: `Detach a postgres cluster from an app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--postgres-app"},
					Description: `The postgres cluster to detach from the app`,
					Args: []model.Arg{{
						Name: "postgres-app",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List postgres clusters`,
			}, {
				Name:        []string{"users"},
				Description: `Manage users in a cluster`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"list"},
					Description: `List users in a cluster`,
					Options: []model.Option{{
						Name:        []string{"--app", "-a"},
						Description: `App name to operate on`,
						Args: []model.Arg{{
							Name:      "app",
							Generator: nil, // TODO: port over generator
						}},
					}, {
						Name:        []string{"--config", "-c"},
						Description: `Path to an app config file or directory containing one`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "config",
						}},
					}},
				}},
			}},
		}, {
			Name:        []string{"proxy"},
			Description: `Proxies connections to a fly VM`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--org", "-o"},
				Description: `The organization to operate on`,
				Args: []model.Arg{{
					Name:      "org",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--select", "-s"},
				Description: `Prompt to select from available instances from the current application`,
			}},
		}, {
			Name:        []string{"regions"},
			Description: `Manage regions`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"add"},
				Description: `Allow the app to run in the provided regions`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--group"},
					Description: `The process group to add the region to`,
					Args: []model.Arg{{
						Name: "group",
					}},
				}},
			}, {
				Name:        []string{"backup"},
				Description: `Sets the backup region pool with provided regions`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `Shows the list of regions the app is allowed to run in`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"remove"},
				Description: `Prevent the app from running in the provided regions`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--group"},
					Description: `The process group to remove the region from`,
					Args: []model.Arg{{
						Name: "group",
					}},
				}},
			}, {
				Name:        []string{"set"},
				Description: `Sets the region pool with provided regions`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--group"},
					Description: `The process group to set regions for`,
					Args: []model.Arg{{
						Name: "group",
					}},
				}},
			}},
		}, {
			Name:        []string{"releases"},
			Description: `List app releases`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--image"},
				Description: `Display the Docker image reference of the release`,
			}},
		}, {
			Name:        []string{"restart"},
			Description: `Restart an application`,
		}, {
			Name:        []string{"resume"},
			Description: `Resume an application`,
		}, {
			Name:        []string{"scale"},
			Description: `Scale app resources`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"count"},
				Description: `Change an app's VM count to the given value`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--max-per-region"},
					Description: `Max number of VMs per region`,
					Args: []model.Arg{{
						Name: "max-per-region",
					}},
				}},
			}, {
				Name:        []string{"memory"},
				Description: `Set VM memory`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--group"},
					Description: `The process group to apply the memory size to`,
					Args: []model.Arg{{
						Name: "group",
					}},
				}},
			}, {
				Name:        []string{"show"},
				Description: `Show current resources`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"vm"},
				Description: `Change an app's VM to a named size (eg. shared-cpu-1x, dedicated-cpu-1x, dedicated-cpu-2x...)`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--group"},
					Description: `The process group to apply the VM size to`,
					Args: []model.Arg{{
						Name: "group",
					}},
				}, {
					Name:        []string{"--memory"},
					Description: `Memory in MB for the VM`,
					Args: []model.Arg{{
						Name: "memory",
					}},
				}},
			}},
		}, {
			Name:        []string{"secrets"},
			Description: `Manage app secrets`,
			Options: []model.Option{{
				Name:        []string{"--app", "-a"},
				Description: `App name to operate on`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to an app config file or directory containing one`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"import"},
				Description: `Read secrets in name=value from stdin`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--detach"},
					Description: `Return immediately instead of monitoring deployment progress`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `Lists the secrets available to the app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"set"},
				Description: `Set one or more encrypted secrets for an app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--detach"},
					Description: `Return immediately instead of monitoring deployment progress`,
				}},
			}, {
				Name:        []string{"unset"},
				Description: `Remove encrypted secrets from an app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--detach"},
					Description: `Return immediately instead of monitoring deployment progress`,
				}},
			}},
		}, {
			Name:        []string{"ssh"},
			Description: `Commands that manage SSH credentials`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"console"},
				Description: `Connect to a running instance of the current app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--command", "-C"},
					Description: `Command to run on SSH session`,
					Args: []model.Arg{{
						Name: "command",
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--probe", "-p"},
					Description: `Test WireGuard connection after establishing`,
				}, {
					Name:        []string{"--region", "-r"},
					Description: `Region to create WireGuard connection in`,
					Args: []model.Arg{{
						Name: "region",
					}},
				}, {
					Name:        []string{"--select", "-s"},
					Description: `Select available instances`,
				}},
			}, {
				Name:        []string{"establish"},
				Description: `Create a root SSH certificate for your organization`,
			}, {
				Name:        []string{"issue"},
				Description: `Issue a new SSH credential`,
				Options: []model.Option{{
					Name:        []string{"--agent"},
					Description: `Add key to SSH agent`,
				}, {
					Name:        []string{"--dotssh", "-d"},
					Description: `Store keys in ~/.ssh, like normal keys`,
				}, {
					Name:        []string{"--hours"},
					Description: `Expiration, in hours (<72)`,
					Args: []model.Arg{{
						Name: "hours",
					}},
				}, {
					Name:        []string{"--overwrite", "-o"},
					Description: `Overwrite existing SSH keys in same location, if we generated them`,
				}, {
					Name:        []string{"--username", "-u"},
					Description: `Unix username for SSH cert`,
					Args: []model.Arg{{
						Name: "username",
					}},
				}},
			}, {
				Name:        []string{"log"},
				Description: `Log of all issued certs`,
			}},
		}, {
			Name:        []string{"status"},
			Description: `Show app status`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Show completed instances`,
			}, {
				Name:        []string{"--app", "-a"},
				Description: `Application name`,
				Args: []model.Arg{{
					Name:      "app",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--config", "-c"},
				Description: `Path to application configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--deployment"},
				Description: `Always show deployment status`,
			}, {
				Name:        []string{"--rate"},
				Description: `Refresh Rate for --watch`,
				Args: []model.Arg{{
					Name: "rate",
				}},
			}, {
				Name:        []string{"--watch"},
				Description: `Refresh details`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"instance"},
				Description: `Show instance status`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"suspend"},
			Description: `Suspend an application`,
		}, {
			Name:        []string{"turboku"},
			Description: `Launches heroku apps`,
			Options: []model.Option{{
				Name:        []string{"--heroku-token"},
				Description: `Heroku API token`,
				Args: []model.Arg{{
					Name: "heroku-token",
				}},
			}, {
				Name:        []string{"--keep"},
				Description: `Keep the app directory after deployment`,
			}, {
				Name:        []string{"--name"},
				Description: `The name of the new app`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"--now"},
				Description: `Deploy now without confirmation`,
			}, {
				Name:        []string{"--org"},
				Description: `The organization that will own the app`,
				Args: []model.Arg{{
					Name:      "org",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--region"},
				Description: `The region to launch the new app in`,
				Args: []model.Arg{{
					Name: "region",
				}},
			}},
		}, {
			Name:        []string{"version"},
			Description: `Show version information for the flyctl command`,
			Options: []model.Option{{
				Name:        []string{"--saveinstall", "-s"},
				Description: `Save parameter in config`,
				Args: []model.Arg{{
					Name: "saveinstall",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"update"},
				Description: `Checks for available updates and automatically updates`,
			}},
		}, {
			Name:        []string{"vm"},
			Description: `Commands that manage VM instances`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"restart"},
				Description: `Restart a VM`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"status"},
				Description: `Show a VM's status`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"stop"},
				Description: `Stop a VM`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `App name to operate on`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to an app config file or directory containing one`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}},
		}, {
			Name:        []string{"vol", "volumes"},
			Description: `Volume management commands`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Create new volume for app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}, {
					Name:        []string{"--no-encryption"},
					Description: `Do not encrypt the volume contents`,
				}, {
					Name:        []string{"--region", "-r"},
					Description: `The region to operate on`,
					Args: []model.Arg{{
						Name: "region",
					}},
				}, {
					Name:        []string{"--require-unique-zone"},
					Description: `Require volume to be placed in separate hardware zone from existing volumes`,
				}, {
					Name:        []string{"--size", "-s"},
					Description: `Size of volume in gigabytes`,
					Args: []model.Arg{{
						Name: "size",
					}},
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Delete a volume from the app`,
				Options: []model.Option{{
					Name:        []string{"--yes", "-y"},
					Description: `Accept all confirmations`,
				}},
			}, {
				Name:        []string{"list"},
				Description: `List the volumes for app`,
				Options: []model.Option{{
					Name:        []string{"--app", "-a"},
					Description: `Application name`,
					Args: []model.Arg{{
						Name:      "app",
						Generator: nil, // TODO: port over generator
					}},
				}, {
					Name:        []string{"--config", "-c"},
					Description: `Path to application configuration file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "config",
					}},
				}},
			}, {
				Name:        []string{"show"},
				Description: `Show details of an app's volume`,
			}, {
				Name:        []string{"snaps", "snapshots"},
				Description: `Manage volume snapshots`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"list"},
					Description: `List snapshots`,
				}},
			}},
		}, {
			Name:        []string{"wg", "wireguard"},
			Description: `Commands that manage WireGuard peer connections`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"create"},
				Description: `Add a WireGuard peer connection`,
			}, {
				Name:        []string{"list"},
				Description: `List all WireGuard peer connections`,
			}, {
				Name:        []string{"remove"},
				Description: `Remove a WireGuard peer connection`,
			}, {
				Name:        []string{"reset"},
				Description: `Reset WireGuard peer connection for an organization`,
			}, {
				Name:        []string{"status"},
				Description: `Get status a WireGuard peer connection`,
			}, {
				Name:        []string{"token"},
				Description: `Commands that managed WireGuard delegated access tokens`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"create"},
					Description: `Create a new WireGuard token`,
				}, {
					Name:        []string{"delete"},
					Description: `Delete a WireGuard token; token is name:<name> or token:<token>`,
				}, {
					Name:        []string{"list"},
					Description: `List all WireGuard tokens`,
				}, {
					Name:        []string{"start"},
					Description: `Start a new WireGuard peer connection associated with a token (set FLY_WIREGUARD_TOKEN)`,
				}, {
					Name:        []string{"update"},
					Description: `Rekey a WireGuard peer connection associated with a token (set FLY_WIREGUARD_TOKEN)`,
				}},
			}, {
				Name:        []string{"websockets"},
				Description: `Enable or disable WireGuard tunneling over WebSockets`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Help about any command`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"Use"},
				Description: `Short`,
			}, {
				Name:        []string{"agent"},
				Description: `Commands that manage the Fly agent, a background process that manages flyctl wireguard connections`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"ping"},
					Description: `Ping the Fly agent`,
				}, {
					Name:        []string{"restart"},
					Description: `Restart the Fly agent`,
				}, {
					Name:        []string{"daemon-start", "run"},
					Description: `Run the Fly agent in the foreground`,
				}, {
					Name:        []string{"start"},
					Description: `Start the Fly agent`,
				}, {
					Name:        []string{"stop"},
					Description: `Stop the Fly agent`,
				}},
			}, {
				Name:        []string{"apps"},
				Description: `Manage apps`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"create"},
					Description: `Create a new application`,
				}, {
					Name:        []string{"destroy"},
					Description: `Permanently destroys an app`,
				}, {
					Name:        []string{"list"},
					Description: `List applications`,
				}, {
					Name:        []string{"move"},
					Description: `Move an app to another organization`,
				}, {
					Name:        []string{"open"},
					Description: `Open browser to current deployed application`,
				}, {
					Name:        []string{"releases"},
					Description: `List app releases`,
				}, {
					Name:        []string{"restart"},
					Description: `Restart an application`,
				}},
			}, {
				Name:        []string{"auth"},
				Description: `Manage authentication`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"docker"},
					Description: `Authenticate docker`,
				}, {
					Name:        []string{"login"},
					Description: `Log in a user`,
				}, {
					Name:        []string{"logout"},
					Description: `Logs out the currently logged in user`,
				}, {
					Name:        []string{"signup"},
					Description: `Create a new fly account`,
				}, {
					Name:        []string{"token"},
					Description: `Show the current auth token`,
				}, {
					Name:        []string{"whoami"},
					Description: `Displays the users email address/service identity currently authenticated and in use`,
				}},
			}, {
				Name:        []string{"autoscale"},
				Description: `Autoscaling app resources`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"balanced"},
					Description: `Configure a traffic balanced app with params (min=int max=int)`,
				}, {
					Name:        []string{"disable"},
					Description: `Disable autoscaling`,
				}, {
					Name:        []string{"set"},
					Description: `Set current models autoscaling parameters`,
				}, {
					Name:        []string{"show"},
					Description: `Show current autoscaling configuration`,
				}, {
					Name:        []string{"standard"},
					Description: `Configure a standard balanced app with params (min=int max=int)`,
				}},
			}, {
				Name:        []string{"builds"},
				Description: `Manage application builds`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"list"},
					Description: `List builds`,
				}},
			}, {
				Name:        []string{"certs"},
				Description: `Manage certificates`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"create", "add"},
					Description: `Add a certificate for an app`,
				}, {
					Name:        []string{"check"},
					Description: `Checks DNS configuration`,
				}, {
					Name:        []string{"list"},
					Description: `List certificates for an app`,
				}, {
					Name:        []string{"delete", "remove"},
					Description: `Removes a certificate from an app`,
				}, {
					Name:        []string{"show"},
					Description: `Shows certificate information`,
				}},
			}, {
				Name:        []string{"checks"},
				Description: `Manage health checks`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"handlers"},
					Description: `Manage health check handlers`,
					Subcommands: []model.Subcommand{{
						Name:        []string{"create"},
						Description: `Create a health check handler`,
					}, {
						Name:        []string{"delete"},
						Description: `Delete a health check handler`,
					}, {
						Name:        []string{"list"},
						Description: `List health check handlers`,
					}},
				}, {
					Name:        []string{"list"},
					Description: `List app health checks`,
				}},
			}, {
				Name:        []string{"completion"},
				Description: `Generate the autocompletion script for the specified shell`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"bash"},
					Description: `Generate the autocompletion script for bash`,
				}, {
					Name:        []string{"fish"},
					Description: `Generate the autocompletion script for fish`,
				}, {
					Name:        []string{"powershell"},
					Description: `Generate the autocompletion script for powershell`,
				}, {
					Name:        []string{"zsh"},
					Description: `Generate the autocompletion script for zsh`,
				}},
			}, {
				Name:        []string{"config"},
				Description: `Manage an app's configuration`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"display"},
					Description: `Display an app's configuration`,
				}, {
					Name:        []string{"env"},
					Description: `Display an app's runtime environment variables`,
				}, {
					Name:        []string{"save"},
					Description: `Save an app's config file`,
				}, {
					Name:        []string{"validate"},
					Description: `Validate an app's config file`,
				}},
			}, {
				Name:        []string{"create"},
				Description: `Create a new application`,
			}, {
				Name:        []string{"curl"},
				Description: `Run a performance test against a URL`,
			}, {
				Name:        []string{"dash", "dashboard"},
				Description: `Open web browser on Fly Web UI for this app`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"metrics"},
					Description: `Open web browser on Fly Web UI for this app's metrics`,
				}},
			}, {
				Name:        []string{"deploy"},
				Description: `Deploy Fly applications`,
			}, {
				Name:        []string{"destroy"},
				Description: `Permanently destroys an app`,
			}, {
				Name:        []string{"dig"},
				Description: `Make DNS requests against Fly.io's internal DNS server`,
			}, {
				Name:        []string{"dns-records"},
				Description: `Manage DNS records`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"export"},
					Description: `Export DNS records`,
				}, {
					Name:        []string{"import"},
					Description: `Import DNS records`,
				}, {
					Name:        []string{"list"},
					Description: `List DNS records`,
				}},
			}, {
				Name:        []string{"docs"},
				Description: `View Fly documentation`,
			}, {
				Name:        []string{"doctor"},
				Description: `The DOCTOR command allows you to debug your Fly environment`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"diag"},
					Description: `Send diagnostic information about your applications back to Fly.io`,
				}},
			}, {
				Name:        []string{"domains"},
				Description: `Manage domains`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"add"},
					Description: `Add a domain`,
				}, {
					Name:        []string{"list"},
					Description: `List domains`,
				}, {
					Name:        []string{"register"},
					Description: `Register a domain`,
				}, {
					Name:        []string{"show"},
					Description: `Show domain`,
				}},
			}, {
				Name:        []string{"history"},
				Description: `List an app's change history`,
			}, {
				Name:        []string{"img", "image"},
				Description: `Manage app image`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"show"},
					Description: `Show image details`,
				}, {
					Name:        []string{"update"},
					Description: `Updates the app's image to the latest available version. (Fly Postgres only)`,
				}},
			}, {
				Name:        []string{"info"},
				Description: `Show detailed app information`,
			}, {
				Name:        []string{"ips"},
				Description: `Manage IP addresses for apps`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"allocate-v4"},
					Description: `Allocate an IPv4 address`,
				}, {
					Name:        []string{"allocate-v6"},
					Description: `Allocate an IPv6 address`,
				}, {
					Name:        []string{"list"},
					Description: `List allocated IP addresses`,
				}, {
					Name:        []string{"private"},
					Description: `List instances private IP addresses`,
				}, {
					Name:        []string{"release"},
					Description: `Release an IP address`,
				}},
			}, {
				Name:        []string{"launch"},
				Description: `Launch a new app`,
			}, {
				Name:        []string{"ls", "list"},
				Description: `Lists your Fly resources`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"apps"},
					Description: `Lists all your apps`,
				}, {
					Name:        []string{"orgs"},
					Description: `List all your organizations`,
				}},
			}, {
				Name:        []string{"logs"},
				Description: `View app logs`,
			}, {
				Name:        []string{"machines", "m", "machine"},
				Description: `Commands that manage machines`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"clone"},
					Description: `Clones a Fly Machine`,
				}, {
					Name:        []string{"kill"},
					Description: `Kill (SIGKILL) a Fly machine`,
				}, {
					Name:        []string{"list"},
					Description: `List Fly machines`,
				}, {
					Name:        []string{"rm", "remove"},
					Description: `Remove a Fly machine`,
				}, {
					Name:        []string{"run"},
					Description: `Run a machine`,
				}, {
					Name:        []string{"start"},
					Description: `Start a Fly machine`,
				}, {
					Name:        []string{"status"},
					Description: `Show current status of a running machine`,
				}, {
					Name:        []string{"stop"},
					Description: `Stop a Fly machine`,
				}},
			}, {
				Name:        []string{"monitor"},
				Description: `Monitor currently running application deployments`,
			}, {
				Name:        []string{"move"},
				Description: `Move an app to another organization`,
			}, {
				Name:        []string{"open"},
				Description: `Open browser to current deployed application`,
			}, {
				Name:        []string{"orgs"},
				Description: `Commands for managing Fly organizations`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"builder"},
					Description: `Manage remote builder`,
					Subcommands: []model.Subcommand{{
						Name:        []string{"show"},
						Description: `Show details about an organization's remote builder image`,
					}, {
						Name:        []string{"update"},
						Description: `Update an organization's remote builder image`,
					}},
				}, {
					Name:        []string{"create"},
					Description: `Create an organization`,
				}, {
					Name:        []string{"delete"},
					Description: `Delete an organization`,
				}, {
					Name:        []string{"invite"},
					Description: `Invite user (by email) to organization`,
				}, {
					Name:        []string{"list"},
					Description: `Lists organizations for current user`,
				}, {
					Name:        []string{"remove"},
					Description: `Remove a user from an organization`,
				}, {
					Name:        []string{"show"},
					Description: `Show information about an organization`,
				}},
			}, {
				Name:        []string{"ping"},
				Description: `Test connectivity with ICMP ping messages`,
			}, {
				Name:        []string{"platform"},
				Description: `Fly platform information`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"regions"},
					Description: `List regions`,
				}, {
					Name:        []string{"status"},
					Description: `Show current platform status`,
				}, {
					Name:        []string{"vm-sizes"},
					Description: `List VM Sizes`,
				}},
			}, {
				Name:        []string{"pg", "postgres"},
				Description: `Manage postgres clusters`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"attach"},
					Description: `Attach a postgres cluster to an app`,
				}, {
					Name:        []string{"connect"},
					Description: `Connect to the Postgres console`,
				}, {
					Name:        []string{"create"},
					Description: `Create a postgres cluster`,
				}, {
					Name:        []string{"db"},
					Description: `Manage databases in a cluster`,
					Subcommands: []model.Subcommand{{
						Name:        []string{"list"},
						Description: `List databases in a cluster`,
					}},
				}, {
					Name:        []string{"detach"},
					Description: `Detach a postgres cluster from an app`,
				}, {
					Name:        []string{"list"},
					Description: `List postgres clusters`,
				}, {
					Name:        []string{"users"},
					Description: `Manage users in a cluster`,
					Subcommands: []model.Subcommand{{
						Name:        []string{"list"},
						Description: `List users in a cluster`,
					}},
				}},
			}, {
				Name:        []string{"proxy"},
				Description: `Proxies connections to a fly VM`,
			}, {
				Name:        []string{"regions"},
				Description: `Manage regions`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"add"},
					Description: `Allow the app to run in the provided regions`,
				}, {
					Name:        []string{"backup"},
					Description: `Sets the backup region pool with provided regions`,
				}, {
					Name:        []string{"list"},
					Description: `Shows the list of regions the app is allowed to run in`,
				}, {
					Name:        []string{"remove"},
					Description: `Prevent the app from running in the provided regions`,
				}, {
					Name:        []string{"set"},
					Description: `Sets the region pool with provided regions`,
				}},
			}, {
				Name:        []string{"releases"},
				Description: `List app releases`,
			}, {
				Name:        []string{"restart"},
				Description: `Restart an application`,
			}, {
				Name:        []string{"resume"},
				Description: `Resume an application`,
			}, {
				Name:        []string{"scale"},
				Description: `Scale app resources`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"count"},
					Description: `Change an app's VM count to the given value`,
				}, {
					Name:        []string{"memory"},
					Description: `Set VM memory`,
				}, {
					Name:        []string{"show"},
					Description: `Show current resources`,
				}, {
					Name:        []string{"vm"},
					Description: `Change an app's VM to a named size (eg. shared-cpu-1x, dedicated-cpu-1x, dedicated-cpu-2x...)`,
				}},
			}, {
				Name:        []string{"secrets"},
				Description: `Manage app secrets`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"import"},
					Description: `Read secrets in name=value from stdin`,
				}, {
					Name:        []string{"list"},
					Description: `Lists the secrets available to the app`,
				}, {
					Name:        []string{"set"},
					Description: `Set one or more encrypted secrets for an app`,
				}, {
					Name:        []string{"unset"},
					Description: `Remove encrypted secrets from an app`,
				}},
			}, {
				Name:        []string{"ssh"},
				Description: `Commands that manage SSH credentials`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"console"},
					Description: `Connect to a running instance of the current app`,
				}, {
					Name:        []string{"establish"},
					Description: `Create a root SSH certificate for your organization`,
				}, {
					Name:        []string{"issue"},
					Description: `Issue a new SSH credential`,
				}, {
					Name:        []string{"log"},
					Description: `Log of all issued certs`,
				}},
			}, {
				Name:        []string{"status"},
				Description: `Show app status`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"instance"},
					Description: `Show instance status`,
				}},
			}, {
				Name:        []string{"suspend"},
				Description: `Suspend an application`,
			}, {
				Name:        []string{"turboku"},
				Description: `Launches heroku apps`,
			}, {
				Name:        []string{"version"},
				Description: `Show version information for the flyctl command`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"update"},
					Description: `Checks for available updates and automatically updates`,
				}},
			}, {
				Name:        []string{"vm"},
				Description: `Commands that manage VM instances`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"restart"},
					Description: `Restart a VM`,
				}, {
					Name:        []string{"status"},
					Description: `Show a VM's status`,
				}, {
					Name:        []string{"stop"},
					Description: `Stop a VM`,
				}},
			}, {
				Name:        []string{"vol", "volumes"},
				Description: `Volume management commands`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"create"},
					Description: `Create new volume for app`,
				}, {
					Name:        []string{"delete"},
					Description: `Delete a volume from the app`,
				}, {
					Name:        []string{"list"},
					Description: `List the volumes for app`,
				}, {
					Name:        []string{"show"},
					Description: `Show details of an app's volume`,
				}, {
					Name:        []string{"snaps", "snapshots"},
					Description: `Manage volume snapshots`,
					Subcommands: []model.Subcommand{{
						Name:        []string{"list"},
						Description: `List snapshots`,
					}},
				}},
			}, {
				Name:        []string{"wg", "wireguard"},
				Description: `Commands that manage WireGuard peer connections`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"create"},
					Description: `Add a WireGuard peer connection`,
				}, {
					Name:        []string{"list"},
					Description: `List all WireGuard peer connections`,
				}, {
					Name:        []string{"remove"},
					Description: `Remove a WireGuard peer connection`,
				}, {
					Name:        []string{"reset"},
					Description: `Reset WireGuard peer connection for an organization`,
				}, {
					Name:        []string{"status"},
					Description: `Get status a WireGuard peer connection`,
				}, {
					Name:        []string{"token"},
					Description: `Commands that managed WireGuard delegated access tokens`,
					Subcommands: []model.Subcommand{{
						Name:        []string{"create"},
						Description: `Create a new WireGuard token`,
					}, {
						Name:        []string{"delete"},
						Description: `Delete a WireGuard token; token is name:<name> or token:<token>`,
					}, {
						Name:        []string{"list"},
						Description: `List all WireGuard tokens`,
					}, {
						Name:        []string{"start"},
						Description: `Start a new WireGuard peer connection associated with a token (set FLY_WIREGUARD_TOKEN)`,
					}, {
						Name:        []string{"update"},
						Description: `Rekey a WireGuard peer connection associated with a token (set FLY_WIREGUARD_TOKEN)`,
					}},
				}, {
					Name:        []string{"websockets"},
					Description: `Enable or disable WireGuard tunneling over WebSockets`,
				}},
			}},
		}},
	}
}
