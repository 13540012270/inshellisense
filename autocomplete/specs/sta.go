// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["sta"] = model.Subcommand{
		Name:        []string{"swagger-typescript-api"},
		Description: `Generate api via swagger scheme`,
		Options: []model.Option{{
			Name:        []string{"--version", "-v"},
			Description: `Output the current version`,
		}, {
			Name:        []string{"--path", "-p"},
			Description: `Path/url to swagger scheme`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "Path",
			}},
		}, {
			Name:        []string{"--output", "-o"},
			Description: `Output path of typescript api file (default: "./")`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "Path",
			}},
		}, {
			Name:        []string{"--name", "-n"},
			Description: `Name of output typescript api file (default: "Api.ts")`,
			Args: []model.Arg{{
				Name: "Name",
			}},
		}, {
			Name:        []string{"--templates", "-t"},
			Description: `Path to folder containing templates`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "Path",
			}},
		}, {
			Name:        []string{"--default-as-success", "-d"},
			Description: `Use "default" response status code as success response too`,
		}, {
			Name:        []string{"--responses", "-r"},
			Description: `Generate additional information about request responses`,
		}, {
			Name:        []string{"--union-enums"},
			Description: `Generate all "enum" types as union types (T1 | T2 | TN)`,
		}, {
			Name:        []string{"--add-readonly"},
			Description: `Generate readonly properties`,
		}, {
			Name:        []string{"--route-types"},
			Description: `Generate type definitions for API routes`,
		}, {
			Name:        []string{"--no-client"},
			Description: `Do not generate an API class`,
		}, {
			Name:        []string{"--enum-names-as-values"},
			Description: `Use values in 'x-enumNames' as enum values (not only as keys)`,
		}, {
			Name:        []string{"--extract-request-params"},
			Description: `Extract request params to data contract`,
		}, {
			Name:        []string{"--extract-request-body"},
			Description: `Extract request body type to data contract`,
		}, {
			Name:        []string{"--extract-response-body"},
			Description: `Extract response body type to data contract`,
		}, {
			Name:        []string{"--extract-response-error"},
			Description: `Extract response error type to data contract`,
		}, {
			Name:        []string{"--modular"},
			Description: `Generate separated files for http client, data contracts, and routes`,
		}, {
			Name:        []string{"--js"},
			Description: `Generate js api module with declaration file`,
		}, {
			Name:        []string{"--module-name-index"},
			Description: `Determines which path index should be used for routes separation`,
			Args: []model.Arg{{
				Name: "Index",
			}},
		}, {
			Name:        []string{"--module-name-first-tag"},
			Description: `Splits routes based on the first tag`,
		}, {
			Name:        []string{"--disableStrictSSL"},
			Description: `Disabled strict SSL`,
		}, {
			Name:        []string{"--disableProxy"},
			Description: `Disabled proxy`,
		}, {
			Name:        []string{"--axios"},
			Description: `Generate axios http client`,
		}, {
			Name:        []string{"--unwrap-response-data"},
			Description: `Unwrap the data item from the response`,
		}, {
			Name:        []string{"--disable-throw-on-error"},
			Description: `Do not throw an error when response.ok is not true (default: false)`,
		}, {
			Name:        []string{"--single-http-client"},
			Description: `Ability to send HttpClient instance to Api constructor (default: false)`,
		}, {
			Name:         []string{"--silent"},
			Description:  `Output only errors to console`,
			IsPersistent: true,
		}, {
			Name:        []string{"--default-response"},
			Description: `Default type for empty response schema`,
			Args: []model.Arg{{
				Name: "Type",
			}},
		}, {
			Name:        []string{"--type-prefix"},
			Description: `Data contract name prefix`,
			Args: []model.Arg{{
				Name: "Prefix",
			}},
		}, {
			Name:        []string{"--type-suffix"},
			Description: `Data contract name suffix`,
			Args: []model.Arg{{
				Name: "Suffix",
			}},
		}, {
			Name:        []string{"--clean-output"},
			Description: `Clean output folder before generate api. WARNING: May cause data loss (default: false)`,
		}, {
			Name:        []string{"--api-class-name"},
			Description: `Name of the api class`,
			Args: []model.Arg{{
				Name: "Name",
			}},
		}, {
			Name:        []string{"--patch"},
			Description: `Fix up small errors in the swagger source definition (default: false)`,
		}, {
			Name:        []string{"--debug"},
			Description: `Additional information about processes inside this tool (default: false)`,
		}, {
			Name:        []string{"--another-array-type"},
			Description: `Generate array types as Array<Type> (by default Type[]) (default: false)`,
		}, {
			Name:        []string{"--sort-types"},
			Description: `Sort fields and types (default: false)`,
		}, {
			Name:        []string{"--extract-enums"},
			Description: `Extract all enums from inline interface	ype content to typescript enum construction (default: false)`,
		}, {
			Name:         []string{"--help", "-h"},
			Description:  `Show help for swagger-typescript-api`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"generate-templates"},
			Description: `Generate ".ejs" templates needed for generate api`,
			Options: []model.Option{{
				Name:        []string{"--output", "-o"},
				Description: `Output path of generated templates`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "Path",
				}},
			}, {
				Name:        []string{"--modular", "-m"},
				Description: `Generate templates needed to separate files for http client, data contracts, and routes`,
			}, {
				Name:        []string{"--http-client"},
				Description: `Http client type`,
				Args: []model.Arg{{
					Name:        "Http client",
					Suggestions: []model.Suggestion{{Name: []string{`fetch`}}, {Name: []string{`axios`}}},
				}},
			}, {
				Name:        []string{"--clean-output", "-c"},
				Description: `Clean output folder before generate template`,
			}, {
				Name:        []string{"--rewrite", "-r"},
				Description: `Rewrite content in existing templates`,
			}},
		}},
	}
}
