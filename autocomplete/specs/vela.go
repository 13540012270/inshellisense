// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["vela"] = model.Subcommand{
		Name:        []string{"vela"},
		Description: `A Highly Extensible Platform Engine based on Kubernetes and Open Application Model`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for vela`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"show"},
			Description: `Show the reference doc for component, trait or workflow types`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateHistory},
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-e", "--env"},
				Description: `Specify environment name for application`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--help", "-h"},
				Description: `Help for show command`,
			}, {
				Name:        []string{"-n", "--namespace"},
				Description: `Specify the Kubernetes namespace to use`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"env"},
			Description: `Manage environments for vela applications to run`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"delete"},
				Description: `Delete an environment`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateHistory},
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"init"},
				Description: `Delete an environment`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateHistory},
					IsVariadic: true,
				}},
				Options: []model.Option{{
					Name:        []string{"--namespace"},
					Description: `Specify K8s namespace for env`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"ls", "list"},
				Description: `List all environments for vela applications to run`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateHistory},
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"set", "sw"},
				Description: `Set an environment as the default one for running vela applications`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateHistory},
					IsVariadic: true,
				}},
			}},
		}, {
			Name:        []string{"init"},
			Description: `Create scaffold for vela application`,
			Options: []model.Option{{
				Name:        []string{"--env", "-e"},
				Description: `Specify environment name for application`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--namespace", "-n"},
				Description: `Specify the Kubernetes namespace to use`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--render-only"},
				Description: `Rendering vela.yaml in current dir and do not deploy`,
			}},
		}, {
			Name:        []string{"up"},
			Description: `Deploy one application`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateHistory},
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--env", "-e"},
				Description: `The environment name for the CLI request`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--file", "-f"},
				Description: `The file path for appfile or application. It could be a remote url`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--namespace", "-n"},
				Description: `If present, the namespace scope for this CLI request`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--publish-version", "-v"},
				Description: `The publish version for deploying application`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--revision", "-r"},
				Description: `The revision to use for deploying the application, if empty, the current application configuration will be used`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"cluster"},
			Description: `Manage Kubernetes Clusters for Continuous Delivery`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"alias"},
				Description: `Alias a named cluster`,
			}, {
				Name:        []string{"detach"},
				Description: `Detach managed cluster`,
				Options: []model.Option{{
					Name:        []string{"--kubeconfig-path", "-p"},
					Description: `Specify the kubeconfig path of managed cluster. If you use ocm to manage your cluster, you must set the kubeconfig-path`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "path",
					}},
				}},
			}, {
				Name:        []string{"join"},
				Description: `Join managed cluster by kubeconfig`,
				Options: []model.Option{{
					Name:        []string{"--create-namespace"},
					Description: `Specifies the namespace need to create in managedCluster (default "vela-system")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--name", "-n"},
					Description: `Specify the cluster name. If empty, it will use the cluster name in config file. Default to be empty`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"labels"},
				Description: `Manage Kubernetes Cluster Labels`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"add"},
					Description: `Add labels to managed cluster`,
				}, {
					Name:        []string{"del"},
					Description: `Delete labels for managed cluster`,
				}},
			}, {
				Name:        []string{"list", "ls"},
				Description: `List managed clusters`,
			}, {
				Name:        []string{"probe"},
				Description: `Health probe managed cluster`,
			}, {
				Name:        []string{"rename"},
				Description: `Rename managed cluster`,
			}},
		}, {
			Name:        []string{"workflow"},
			Description: `Operate the Workflow during Application Delivery`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"restart"},
				Description: `Restart an application workflow`,
				Options: []model.Option{{
					Name:        []string{"--env", "-e"},
					Description: `Specify environment name for application`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--namespace", "-n"},
					Description: `Specify the Kubernetes namespace to use`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"resume"},
				Description: `Resume a suspend application workflow`,
				Options: []model.Option{{
					Name:        []string{"--env", "-e"},
					Description: `Specify environment name for application`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--namespace", "-n"},
					Description: `Specify the Kubernetes namespace to use`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"rollback"},
				Description: `Rollback an application workflow to the latest revision`,
				Options: []model.Option{{
					Name:        []string{"--env", "-e"},
					Description: `Specify environment name for application`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--namespace", "-n"},
					Description: `Specify the Kubernetes namespace to use`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"suspend"},
				Description: `Suspend an application workflow`,
				Options: []model.Option{{
					Name:        []string{"--env", "-e"},
					Description: `Specify environment name for application`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--namespace", "-n"},
					Description: `Specify the Kubernetes namespace to use`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"terminate"},
				Description: `Terminate an application workflow`,
				Options: []model.Option{{
					Name:        []string{"--env", "-e"},
					Description: `Specify environment name for application`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--namespace", "-n"},
					Description: `Specify the Kubernetes namespace to use`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}},
		}, {
			Name:        []string{"addon"},
			Description: `Manage addons for extension`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"disable"},
				Description: `Disable an addon`,
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Skip checking if applications are still using this addon`,
				}},
			}, {
				Name:        []string{"enable"},
				Description: `Enable an addon`,
				Options: []model.Option{{
					Name:        []string{"--clusters", "-c"},
					Description: `Specify the runtime-clusters to enable`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List addons`,
			}, {
				Name:        []string{"registry"},
				Description: `Manage addon registry`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"add"},
					Description: `Add an addon registry`,
					Options: []model.Option{{
						Name:        []string{"--bucket"},
						Description: `Specify the OSS bucket name`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}, {
						Name:        []string{"--endpoint"},
						Description: `Specify the addon registry endpoint`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}, {
						Name:        []string{"--gitToken"},
						Description: `Specify the github repo token`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}, {
						Name:        []string{"--path"},
						Description: `Specify the addon registry OSS path`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}, {
						Name:        []string{"--type"},
						Description: `Specify the addon registry type`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}},
				}, {
					Name:        []string{"delete"},
					Description: `Delete an addon registry`,
				}, {
					Name:        []string{"get"},
					Description: `Get an addon registry`,
				}, {
					Name:        []string{"list"},
					Description: `List addon registries`,
				}, {
					Name:        []string{"update"},
					Description: `Update an addon registry`,
					Options: []model.Option{{
						Name:        []string{"--bucket"},
						Description: `Specify the OSS bucket name`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}, {
						Name:        []string{"--endpoint"},
						Description: `Specify the addon registry endpoint`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}, {
						Name:        []string{"--gitToken"},
						Description: `Specify the github repo token`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}, {
						Name:        []string{"--path"},
						Description: `Specify the addon registry OSS path`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}, {
						Name:        []string{"--type"},
						Description: `Specify the addon registry type`,
						Args: []model.Arg{{
							Name: "string",
						}},
					}},
				}},
			}, {
				Name:        []string{"status"},
				Description: `Get addon status`,
			}, {
				Name:        []string{"upgrade"},
				Description: `Upgrade an addon`,
			}},
		}, {
			Name:        []string{"uischema", "ui"},
			Description: `Manage UI schema for addons`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"apply"},
				Description: `Apply UI schema from a file or dir`,
			}},
		}, {
			Name:        []string{"def"},
			Description: `Manage X-Definition for addons`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"apply"},
				Description: `Apply X-Definition`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					IsVariadic: true,
				}},
				Options: []model.Option{{
					Name:        []string{"--dry-run"},
					Description: `Only build definition from CUE into CRB object without applying it to kubernetes clusters`,
				}, {
					Name:        []string{"--namespace", "-n"},
					Description: `Specify which namespace to apply. (default "vela-system")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"del"},
				Description: `Delete X-Definition`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					IsVariadic: true,
				}},
				Options: []model.Option{{
					Name:        []string{"--namespace", "-n"},
					Description: `Specify which namespace to apply. (default "vela-system")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--type", "-t"},
					Description: `Specify the definition type of target. Valid types: workflow-step, component, trait, policy, workload, scope`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"doc-gen"},
				Description: `Generate documentation of definitions (Only Terraform typed definitions are supported)`,
				Options: []model.Option{{
					Name:        []string{"--type", "-t"},
					Description: `Specify the definition type of target. Valid types: workflow-step, component, trait, policy, workload, scope`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"edit"},
				Description: `Edit X-Definition`,
				Options: []model.Option{{
					Name:        []string{"--namespace", "-n"},
					Description: `Specify which namespace to apply. (default "vela-system")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--type", "-t"},
					Description: `Specify the definition type of target. Valid types: workflow-step, component, trait, policy, workload, scope`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get X-Definition`,
				Options: []model.Option{{
					Name:        []string{"--namespace", "-n"},
					Description: `Specify which namespace to apply. (default "vela-system")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--type", "-t"},
					Description: `Specify the definition type of target. Valid types: workflow-step, component, trait, policy, workload, scope`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"init"},
				Description: `Init a new definition`,
				Options: []model.Option{{
					Name:        []string{"--desc", "-d"},
					Description: `Specify the description of the new definition`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--interactive", "-i"},
					Description: `Specify whether use interactive process to help generate definitions`,
				}, {
					Name:        []string{"--git"},
					Description: `Specify which git repository the configuration(HCL) is stored in. Valid when --provider/-p is set`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--local"},
					Description: `Specify the local path of the configuration(HCL) file. Valid when --provider/-p is set`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Specify the output path of the generated definition. If empty, the definition will be printed in the console`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--path"},
					Description: `Specify which path the configuration(HCL) is stored in the Git repository. Valid when --git is set`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--provider", "-p"},
					Description: `Specify which provider the cloud resource definition belongs to. Only alibaba, "aws", "azure" are supported`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--template-yaml", "-f"},
					Description: `Specify the template yaml file that definition will use to build the schema. If empty, a default template for the given definition type will be used`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--type", "-t"},
					Description: `Specify the type of the new definition. Valid types: scope, workflow-step, component, trait, policy, workload`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"list"},
				Description: `List X-Definition`,
				Options: []model.Option{{
					Name:        []string{"--namespace", "-n"},
					Description: `Specify which namespace to apply. (default "vela-system")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--type", "-t"},
					Description: `Specify the definition type of target. Valid types: workflow-step, component, trait, policy, workload, scope`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"render"},
				Description: `Render X-Definition`,
				Options: []model.Option{{
					Name:        []string{"--message"},
					Description: `Specify the header message of the generated YAML file. For example, declaring author information`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--output", "-o"},
					Description: `Specify the output path of the rendered definition YAML. If empty, the definition will be printed in the console. If input is a directory, the output path is expected to be a directory as well`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}},
			}, {
				Name:        []string{"vet"},
				Description: `Validate X-Definition`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					IsVariadic: true,
				}},
			}},
		}, {
			Name:        []string{"registry"},
			Description: `Manage Registry of X-Definitions for extension`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"config"},
				Description: `Configure (add if not exist) a registry, default is local (built-in capabilities)`,
				Options: []model.Option{{
					Name:        []string{"--token", "-t"},
					Description: `Github Repo token`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}, {
				Name:        []string{"ls"},
				Description: `List all configured registry`,
			}, {
				Name:        []string{"remove", "rm"},
				Description: `Remove specified registry`,
			}},
		}, {
			Name:        []string{"component", "comp", "components"},
			Description: `List component types installed and discover more registry`,
			Options: []model.Option{{
				Name:        []string{"--discover"},
				Description: `Discover more registry`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--label"},
				Description: `A label to filter components, the format is --label type=terraform`,
				Args: []model.Arg{{
					Name: "key=value",
				}},
			}, {
				Name:        []string{"--registry"},
				Description: `Specify the registry name (default "default")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--token"},
				Description: `Specify token when using --url to specify registry url`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--url"},
				Description: `Specify the registry url`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"get"},
				Description: `Get component from type`,
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `Specify the registry name (default "default")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--token"},
					Description: `Specify token when using --url to specify registry url`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--url"},
					Description: `Specify the registry url`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}},
		}, {
			Name:        []string{"trait", "traits"},
			Description: `List trait types installed and discover more in registry`,
			Options: []model.Option{{
				Name:        []string{"--discover"},
				Description: `Discover traits in registries`,
			}, {
				Name:        []string{"--registry"},
				Description: `Specify the registry name (default "default")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--token"},
				Description: `Specify token when using --url to specify registry url`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--url"},
				Description: `Specify the registry url`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"get"},
				Description: `Get trait from registry`,
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `Specify the registry name (default "default")`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--token"},
					Description: `Specify token when using --url to specify registry url`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}, {
					Name:        []string{"--url"},
					Description: `Specify the registry url`,
					Args: []model.Arg{{
						Name: "string",
					}},
				}},
			}},
		}, {
			Name:        []string{"uninstall"},
			Description: `Uninstalls KubeVela from a Kubernetes cluster`,
			Options: []model.Option{{
				Name:        []string{"--force", "-f"},
				Description: `Force uninstall whole vela include all addons`,
			}, {
				Name:        []string{"--detail", "-d"},
				Description: `Show detail log of uninstall information`,
			}, {
				Name:        []string{"--namespace", "-n"},
				Description: `Namespace scope for installing KubeVela Core. (default "vela-system")`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"install"},
			Description: `Installs KubeVela into a Kubernetes cluster`,
			Options: []model.Option{{
				Name:        []string{"--file", "-f"},
				Description: `Custom the chart path of KubeVela control plane`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--detail", "-d"},
				Description: `Show detail log of install information`,
			}, {
				Name:        []string{"--namespace", "-n"},
				Description: `Namespace scope for installing KubeVela Core`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--reuse", "-r"},
				Description: `Will re-use the user's last supplied values. (default true)`,
				Args: []model.Arg{{
					Name: "bool",
				}},
			}, {
				Name:        []string{"--version", "-v"},
				Description: `Specify the version of KubeVela to install`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"completion"},
			Description: `Output shell completion code for the specified shell (bash or zsh). The shell code must be evaluated to provide interactive completion of vela commands`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"bash"},
				Description: `Output bash completion code`,
			}, {
				Name:        []string{"zsh"},
				Description: `Output zsh completion code`,
			}},
		}, {
			Name:        []string{"export"},
			Description: `Export deploy manifests from appfile or application`,
			Options: []model.Option{{
				Name:        []string{"--file", "-f"},
				Description: `Specify the appfile path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--env", "-e"},
				Description: `Specify environment name for application`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}, {
				Name:        []string{"--namespace", "-n"},
				Description: `Specify the Kubernetes namespace to use`,
				Args: []model.Arg{{
					Name: "string",
				}},
			}},
		}, {
			Name:        []string{"version"},
			Description: `Prints the version`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"list"},
				Description: `List all available versions`,
			}},
		}},
	}
}
