// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["streamlit"] = model.Subcommand{
		Name:        []string{"streamlit"},
		Description: `Streamlit`,
		Options: []model.Option{{
			Name:        []string{"--log_level"},
			Description: `Set the log level`,
			Args: []model.Arg{{
				Suggestions: []model.Suggestion{{
					Name: []string{`error`},
				}, {
					Name: []string{`warning`},
				}, {
					Name: []string{`info`},
				}, {
					Name: []string{`debug`},
				}},
			}},
		}, {
			Name:        []string{"--help"},
			Description: `Show a help message and exit`,
		}, {
			Name:        []string{"--version"},
			Description: `Show the version and exit`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"activate"},
			Description: `Activate Streamlit by entering your email`,
		}, {
			Name:        []string{"cache"},
			Description: `Manage the Streamlit cache`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"clear"},
				Description: `Clear st.cache, st.memo, and st.singleton caches`,
			}},
		}, {
			Name:        []string{"config"},
			Description: `Manage Streamlit's config settings`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"show"},
				Description: `Show all of Streamlit's config settings`,
			}},
		}, {
			Name:        []string{"docs"},
			Description: `Show help in browser`,
		}, {
			Name:        []string{"hello"},
			Description: `Runs the Hello World script`,
		}, {
			Name:        []string{"help"},
			Description: `Print the help message`,
		}, {
			Name:        []string{"run"},
			Description: `Run a Python script, piping stderr to Streamlit`,
			Args: []model.Arg{{
				Name:        "file",
				Description: `The Python script to run`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"version"},
			Description: `Print Streamlit's version number`,
		}},
	}
}
