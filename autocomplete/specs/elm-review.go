// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["elm-review"] = model.Subcommand{
		Name:        []string{"elm-review"},
		Description: ``,
		Args: []model.Arg{{
			Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
			Name:       "files or directories to review",
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for elm-review`,
		}, {
			Name:        []string{"--unsuppress"},
			Description: `Include suppressed errors in the error report for all rules`,
		}, {
			Name:        []string{"--rules"},
			Description: `Run with a subsection of the rules in the configuration. Specify them by their name, and separate them by commas`,
			Args: []model.Arg{{
				Name:        "<rule1,rule2,...>",
				Description: `Run with a subsection of the rules in the configuration`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"--watch"},
			Description: `Re-run elm-review automatically when your project or configuration changes`,
		}, {
			Name:        []string{"--watch-code"},
			Description: `Re-run elm-review automatically when your project changes`,
		}, {
			Name:        []string{"--elmjson"},
			Description: `Specify the path to the elm.json file of the project`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "<path-to-elm.json>",
			}},
		}, {
			Name:        []string{"--config"},
			Description: `Use the review configuration in the specified directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "<path-to-review-directory>",
			}},
		}, {
			Name:        []string{"--template"},
			Description: `Use the review configuration from a GitHub repository`,
			Args: []model.Arg{{
				Name: "<author>/<repo>[/path-to-the-config-folder][#branch-or-commit]",
			}},
		}, {
			Name:        []string{"--compiler"},
			Description: `Specify the path to the elm compiler`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "<path-to-elm>",
			}},
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Print the version of the elm-review CLI`,
		}, {
			Name:        []string{"--debug"},
			Description: `Add helpful information to debug your configuration or rules`,
		}, {
			Name:        []string{"--report"},
			Description: `Error reports will be in JSON format`,
			Args: []model.Arg{{
				Name:      "json or ndjson",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--no-details"},
			Description: `Hide the details from error reports for a more compact view`,
		}, {
			Name:        []string{"--ignore-dirs"},
			Description: `Ignore the reports of all rules for the specified directories`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "<dir1,dir2,...>",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--ignore-files"},
			Description: `Ignore the reports of all rules for the specified files`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "<file1,file2,...>",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--fix"},
			Description: `Elm Review will present fixes for the errors that offer an automatic fix, which you can then accept or refuse one by one`,
		}, {
			Name:        []string{"--fix-all"},
			Description: `Elm Review will present a single fix containing the application of all available automatic fixes, which you can then accept or refuse`,
		}, {
			Name:        []string{"--elm-format-path"},
			Description: `Specify the path to elm-format`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "<path-to-elm-format>",
			}},
		}, {
			Name:        []string{"--fix-limit"},
			Description: `Limit the number of fixes applied in a single batch to N`,
			Args: []model.Arg{{
				Name:        "N",
				Description: `The number of fixes to apply before prompting the user`,
			}},
		}, {
			Name:        []string{"--extract"},
			Description: `Enable extracting data from the project for the rules that have a data extractor. Requires running with --report=json. Learn more by reading the section about "Extracting information" at https://bit.ly/3UmNr0V`,
		}, {
			Name:        []string{"--benchmark-info"},
			Description: `Print out how much time it took for rules and phases of the process to run. This is meant for benchmarking purposes`,
		}, {
			Name:        []string{"--no-color"},
			Description: `Disable colors in the output`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"init"},
			Description: `Initialize Elm Review in this directory`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for elm-review init`,
			}, {
				Name:        []string{"--config"},
				Description: `Create the configuration files in the specified directory instead of in the review/ directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "<path-to-review-directory>",
				}},
			}, {
				Name:        []string{"--template"},
				Description: `Copy the review configuration from a GitHub repository, at the root or in a folder`,
				Args: []model.Arg{{
					Name: "<author>/<repo>[/path-to-the-config-folder][#branch-or-commit]",
				}},
			}, {
				Name:        []string{"--compiler"},
				Description: `Specify the path to the elm compiler`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "<path-to-elm>",
				}},
			}},
		}, {
			Name:        []string{"suppress"},
			Description: `Generate suppression files for rules that report many errors`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for elm-review suppress`,
			}, {
				Name:        []string{"--check-after-tests"},
				Description: `Checks whether there are uncommitted suppression files`,
			}, {
				Name:        []string{"--unsuppress"},
				Description: `Include suppressed errors in the error report for all rules`,
			}, {
				Name:        []string{"--unsuppress-rules"},
				Description: `Include suppressed errors in the error report for all rules`,
				Args: []model.Arg{{
					Name:       "<rule1,rule2,...>",
					IsVariadic: true,
				}},
			}},
		}, {
			Name:        []string{"new-package"},
			Description: `Creates an new project aimed to contain rules and to be published later`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for elm-review new-package`,
			}, {
				Name:        []string{"--compiler"},
				Description: `Specify the path to the elm compiler`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "<path-to-elm>",
				}},
			}},
		}, {
			Name:        []string{"new-rule"},
			Description: `Adds a new rule to your review configuration or review package`,
			Args: []model.Arg{{
				Name:        "rule name",
				Description: `Add a rule file in src/ and a corresponding test file in tests/. Should be formatted just like an Elm module name, such as NoDoingThis or No.Doing.This`,
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for elm-review new-package`,
			}},
		}},
	}
}
