// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["npm"] = model.Subcommand{
		Name:        []string{"npm"},
		Description: `Node package manager`,
		Subcommands: []model.Subcommand{{
			Name:        []string{"install", "i", "add"},
			Description: `Install a package and its dependencies`,
			Args: []model.Arg{{
				Name:       "package",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-P", "--save-prod"},
				Description: `Package will appear in your "dependencies". This is the default unless "-D" or "-O" are present`,
			}, {
				Name:        []string{"-D", "--save-dev"},
				Description: `Package will appear in your "devDependencies"`,
			}, {
				Name:        []string{"-O", "--save-optional"},
				Description: `Package will appear in your "optionalDependencies"`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Prevents saving to "dependencies"`,
			}, {
				Name:        []string{"-E", "--save-exact"},
				Description: `Saved dependencies will be configured with an exact version rather than using npm's default semver range operator`,
			}, {
				Name:        []string{"-B", "--save-bundle"},
				Description: `Saved dependencies will also be added to your bundleDependencies list`,
			}, {
				Name:        []string{"-g", "--global"},
				Description: `Operates in 'global' mode, so that packages are installed into the prefix folder instead of the current working directory`,
			}, {
				Name:        []string{"--global-style"},
				Description: `Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder`,
			}, {
				Name:        []string{"--legacy-bundling"},
				Description: `Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package`,
			}, {
				Name:        []string{"--legacy-peer-deps"},
				Description: `Bypass peerDependency auto-installation. Emulate install behavior of NPM v4 through v6`,
			}, {
				Name:        []string{"--strict-peer-deps"},
				Description: `If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure`,
			}, {
				Name:        []string{"--no-package-lock"},
				Description: `Ignores package-lock.json files when installing`,
			}, {
				Name:        []string{"--omit"},
				Description: `Dependency types to omit from the installation tree on disk`,
				Args: []model.Arg{{
					Name:        "Package type",
					Suggestions: []model.Suggestion{{Name: []string{`dev`}}, {Name: []string{`optional`}}, {Name: []string{`peer`}}},
				}},
			}, {
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--no-audit"},
				Description: `Submit audit reports alongside the current npm command to the default registry and all registries configured for scopes`,
			}, {
				Name:        []string{"--no-bin-links"},
				Description: `Tells npm to not create symlinks (or .cmd shims on Windows) for package executables`,
			}, {
				Name:        []string{"--no-fund"},
				Description: `Hides the message at the end of each npm install acknowledging the number of dependencies looking for funding`,
			}, {
				Name:        []string{"--dry-run"},
				Description: `Indicates that you don't want npm to make any changes and that it should only report what it would have done`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"run", "run-script"},
			Description: `Run arbitrary package scripts`,
			Args: []model.Arg{{
				Name:           "script",
				Description:    `Script to run from your package.json`,
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--if-present"},
				Description: `Npm will not exit with an error code when run-script is invoked for a script that isn't defined in the scripts section of package.json`,
			}, {
				Name:        []string{"--silent"},
				Description: ``,
			}, {
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--script-shell"},
				Description: `The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands`,
				Args: []model.Arg{{
					Name: "script-shell",
				}},
			}, {
				Name: []string{"--"},
				Args: []model.Arg{{
					Name:       "args",
					IsVariadic: true,
				}},
			}},
		}, {
			Name:        []string{"init"},
			Description: `Trigger the initialization`,
			Options: []model.Option{{
				Name:        []string{"-y", "--yes"},
				Description: `Automatically answer 'yes' to any prompts that npm might print on the command line`,
			}, {
				Name:        []string{"-w"},
				Description: `Create the folders and boilerplate expected while also adding a reference to your project workspaces property`,
				Args: []model.Arg{{
					Name: "dir",
				}},
			}},
		}, {
			Name:        []string{"access"},
			Description: `Set access controls on private packages`,
		}, {
			Name:        []string{"adduser", "login"},
			Description: `Add a registry user account`,
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}, {
				Name:        []string{"--scope"},
				Description: `Associate an operation with a scope for a scoped registry`,
				Args: []model.Arg{{
					Name:        "scope",
					Description: `Scope name`,
				}},
			}},
		}, {
			Name:        []string{"audit"},
			Description: `Run a security audit`,
			Options: []model.Option{{
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--audit-level"},
				Description: `The minimum level of vulnerability for npm audit to exit with a non-zero exit code`,
				Args: []model.Arg{{
					Name:        "audit",
					Suggestions: []model.Suggestion{{Name: []string{`info`}}, {Name: []string{`low`}}, {Name: []string{`moderate`}}, {Name: []string{`high`}}, {Name: []string{`critical`}}, {Name: []string{`none`}}},
				}},
			}, {
				Name:        []string{"--package-lock-only"},
				Description: `Current operation will only use the package-lock.json, ignoring node_modules`,
			}, {
				Name:        []string{"--json"},
				Description: `Show output in json format`,
			}, {
				Name:        []string{"--omit"},
				Description: `Dependency types to omit from the installation tree on disk`,
				Args: []model.Arg{{
					Name:        "Package type",
					Suggestions: []model.Suggestion{{Name: []string{`dev`}}, {Name: []string{`optional`}}, {Name: []string{`peer`}}},
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"fix"},
				Description: `If the fix argument is provided, then remediations will be applied to the package tree`,
				Options: []model.Option{{
					Name:        []string{"--dry-run"},
					Description: `Indicates that you don't want npm to make any changes and that it should only report what it would have done`,
				}, {
					Name:        []string{"-f", "--force"},
					Description: `Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input`,
				}, {
					Name:        []string{"-w", "--workspace"},
					Description: `Enable running a command in the context of the configured workspaces of the current project`,
					Args: []model.Arg{{
						Name:       "workspace",
						Generator:  nil, // TODO: port over generator
						IsVariadic: true,
					}},
				}, {
					Name:        []string{"-ws", "--workspaces"},
					Description: `Enable running a command in the context of all the configured workspaces`,
				}},
			}},
		}, {
			Name:        []string{"bin"},
			Description: `Print the folder where npm will install executables`,
			Options: []model.Option{{
				Name:        []string{"-g", "--global"},
				Description: `Operates in 'global' mode, so that packages are installed into the prefix folder instead of the current working directory`,
			}},
		}, {
			Name:        []string{"bugs", "issues"},
			Description: `Report bugs for a package in a web browser`,
			Args: []model.Arg{{
				Name:       "package",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--no-browser"},
				Description: `Display in command line instead of browser`,
				ExclusiveOn: []string{"--browser"},
			}, {
				Name:        []string{"--browser"},
				Description: `The browser that is called by the npm bugs command to open websites`,
				Args: []model.Arg{{
					Name: "browser",
				}},
				ExclusiveOn: []string{"--no-browser"},
			}, {
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}},
		}, {
			Name:        []string{"cache"},
			Description: `Manipulates packages cache`,
			Options: []model.Option{{
				Name:        []string{"--cache"},
				Description: `The location of npm's cache directory`,
				Args: []model.Arg{{
					Name: "cache",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"add"},
				Description: `Add the specified packages to the local cache`,
			}, {
				Name:        []string{"clean"},
				Description: `Delete all data out of the cache folder`,
			}, {
				Name:        []string{"verify"},
				Description: `Verify the contents of the cache folder, garbage collecting any unneeded data, and verifying the integrity of the cache index and all cached data`,
			}},
		}, {
			Name:        []string{"ci", "clean-install", "install-clean"},
			Description: `Install a project with a clean slate`,
			Options: []model.Option{{
				Name:        []string{"--audit"},
				Description: `When "true" submit audit reports alongside the current npm command to the default registry and all registries configured for scopes`,
				Args: []model.Arg{{
					Name:        "audit",
					Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				}},
				ExclusiveOn: []string{"--no-audit"},
			}, {
				Name:        []string{"--no-audit"},
				Description: `Do not submit audit reports alongside the current npm command`,
				ExclusiveOn: []string{"--audit"},
			}, {
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--script-shell"},
				Description: `The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands`,
				Args: []model.Arg{{
					Name: "script-shell",
				}},
			}},
		}, {
			Name:        []string{"cit"},
			Description: `Install a project with a clean slate and run tests`,
		}, {
			Name:        []string{"clean-install-test"},
			Description: `Install a project with a clean slate and run tests`,
		}, {
			Name:        []string{"completion"},
			Description: `Tab completion for npm`,
		}, {
			Name:        []string{"config", "c"},
			Description: `Manage the npm configuration files`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"set"},
				Description: `Sets the config key to the value`,
				Args: []model.Arg{{
					Name: "key",
				}, {
					Name: "value",
				}},
				Options: []model.Option{{
					Name:        []string{"-g", "--global"},
					Description: `Sets it globally`,
				}},
			}, {
				Name:        []string{"get"},
				Description: `Echo the config value to stdout`,
				Args: []model.Arg{{
					Name: "key",
				}},
			}, {
				Name:        []string{"list"},
				Description: `Show all the config settings`,
				Options: []model.Option{{
					Name:        []string{"-g"},
					Description: `Lists globally installed packages`,
				}, {
					Name:        []string{"-l"},
					Description: `Also shows defaults`,
				}, {
					Name:        []string{"--json"},
					Description: `Show output in json format`,
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Deletes the key from all configuration files`,
				Args: []model.Arg{{
					Name: "key",
				}},
			}, {
				Name:        []string{"edit"},
				Description: `Opens the config file in an editor`,
				Options: []model.Option{{
					Name:        []string{"--global"},
					Description: `Edits the global config`,
				}},
			}},
		}, {
			Name:        []string{"create"},
			Description: `Create a package.json file`,
		}, {
			Name:        []string{"dedupe", "ddp"},
			Description: `Reduce duplication in the package tree`,
		}, {
			Name:        []string{"deprecate"},
			Description: `Deprecate a version of a package`,
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}},
		}, {
			Name:        []string{"dist-tag"},
			Description: `Modify package distribution tags`,
		}, {
			Name:        []string{"docs", "home"},
			Description: `Open documentation for a package in a web browser`,
			Args: []model.Arg{{
				Name:       "package",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}, {
				Name:        []string{"--no-browser"},
				Description: `Display in command line instead of browser`,
				ExclusiveOn: []string{"--browser"},
			}, {
				Name:        []string{"--browser"},
				Description: `The browser that is called by the npm docs command to open websites`,
				Args: []model.Arg{{
					Name: "browser",
				}},
				ExclusiveOn: []string{"--no-browser"},
			}},
		}, {
			Name:        []string{"doctor"},
			Description: `Check your npm environment`,
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}},
		}, {
			Name:        []string{"edit"},
			Description: `Edit an installed package`,
			Options: []model.Option{{
				Name:        []string{"--editor"},
				Description: `The command to run for npm edit or npm config edit`,
			}},
		}, {
			Name:        []string{"explore"},
			Description: `Browse an installed package`,
			Args: []model.Arg{{
				Name:           "package",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"fund"},
			Description: `Retrieve funding information`,
		}, {
			Name:        []string{"get"},
			Description: `Echo the config value to stdout`,
		}, {
			Name:        []string{"help"},
			Description: `Get help on npm`,
			Args: []model.Arg{{
				Name:        "term",
				Description: `Terms to search for`,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--viewer"},
				Description: `The program to use to view help content`,
				Args: []model.Arg{{
					Name: "viewer",
				}},
			}},
		}, {
			Name:        []string{"help-search"},
			Description: `Search npm help documentation`,
			Args: []model.Arg{{
				Name:        "text",
				Description: `Text to search for`,
			}},
			Options: []model.Option{{
				Name:        []string{"-l", "--long"},
				Description: `Show extended information`,
			}},
		}, {
			Name:        []string{"hook"},
			Description: `Manage registry hooks`,
		}, {
			Name:        []string{"install-ci-test"},
			Description: `Install a project with a clean slate and run tests`,
		}, {
			Name:        []string{"install-test"},
			Description: `Install package(s) and run tests`,
		}, {
			Name:        []string{"it"},
			Description: `Install package(s) and run tests`,
		}, {
			Name:        []string{"link"},
			Description: `Symlink a package folder`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"ln"},
			Description: `Symlink a package folder`,
		}, {
			Name:        []string{"logout"},
			Description: `Log out of the registry`,
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}, {
				Name:        []string{"--scope"},
				Description: `Associate an operation with a scope for a scoped registry`,
				Args: []model.Arg{{
					Name:        "scope",
					Description: `Scope name`,
				}},
			}},
		}, {
			Name:        []string{"ls", "list"},
			Description: `List installed packages`,
			Args: []model.Arg{{
				Name:       "[@scope]/pkg",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-a", "-all"},
				Description: `Show all outdated or installed packages`,
			}, {
				Name:        []string{"--json"},
				Description: `Show output in json format`,
			}, {
				Name:        []string{"-l", "--long"},
				Description: `Show extended information`,
			}, {
				Name:        []string{"-p", "--parseable"},
				Description: `Output parseable results from commands that write to standard output`,
			}, {
				Name:        []string{"--depth"},
				Description: `The depth to go when recursing packages`,
				Args: []model.Arg{{
					Name: "depth",
				}},
			}, {
				Name:        []string{"--link"},
				Description: `Limits output to only those packages that are linked`,
			}, {
				Name:        []string{"--package-lock-only"},
				Description: `Current operation will only use the package-lock.json, ignoring node_modules`,
			}, {
				Name:        []string{"--no-unicode"},
				Description: `Uses unicode characters in the tree output`,
			}, {
				Name:        []string{"-g", "--global"},
				Description: `Operates in 'global' mode, so that packages are installed into the prefix folder instead of the current working directory`,
			}, {
				Name:        []string{"--omit"},
				Description: `Dependency types to omit from the installation tree on disk`,
				Args: []model.Arg{{
					Name:        "Package type",
					Suggestions: []model.Suggestion{{Name: []string{`dev`}}, {Name: []string{`optional`}}, {Name: []string{`peer`}}},
				}},
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"org"},
			Description: `Manage orgs`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"set"},
				Description: `Add a user to an org or manage roles`,
				Args: []model.Arg{{
					Name:        "orgname",
					Description: `Organization name`,
				}, {
					Name:        "username",
					Description: `User name`,
				}, {
					Name:        "role",
					Suggestions: []model.Suggestion{{Name: []string{`developer`}}, {Name: []string{`admin`}}, {Name: []string{`owner`}}},
					IsOptional:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name:        []string{"rm"},
				Description: `Remove a user from an org`,
				Args: []model.Arg{{
					Name:        "orgname",
					Description: `Organization name`,
				}, {
					Name:        "username",
					Description: `User name`,
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name:        []string{"ls"},
				Description: `List users in an org or see what roles a particular user has in an org`,
				Args: []model.Arg{{
					Name:        "orgname",
					Description: `Organization name`,
				}, {
					Name:        "username",
					Description: `User name`,
					IsOptional:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}, {
					Name:        []string{"--json"},
					Description: `Show output in json format`,
				}, {
					Name:        []string{"-p", "--parseable"},
					Description: `Output parseable results from commands that write to standard output`,
				}},
			}},
		}, {
			Name:        []string{"outdated"},
			Description: `Check for outdated packages`,
			Args: []model.Arg{{
				Name:       "[<@scope>/]<pkg>",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-a", "-all"},
				Description: `Show all outdated or installed packages`,
			}, {
				Name:        []string{"--json"},
				Description: `Show output in json format`,
			}, {
				Name:        []string{"-l", "--long"},
				Description: `Show extended information`,
			}, {
				Name:        []string{"-p", "--parseable"},
				Description: `Output parseable results from commands that write to standard output`,
			}, {
				Name:        []string{"-g"},
				Description: `Checks globally`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"owner", "author"},
			Description: `Manage package owners`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"ls"},
				Description: `List all the users who have access to modify a package and push new versions. Handy when you need to know who to bug for help`,
				Args: []model.Arg{{
					Name: "[@scope/]pkg",
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}},
			}, {
				Name:        []string{"add"},
				Description: `Add a new user as a maintainer of a package. This user is enabled to modify metadata, publish new versions, and add other owners`,
				Args: []model.Arg{{
					Name: "user",
				}, {
					Name: "[@scope/]pkg",
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name:        []string{"rm"},
				Description: `Remove a user from the package owner list. This immediately revokes their privileges`,
				Args: []model.Arg{{
					Name: "user",
				}, {
					Name: "[@scope/]pkg",
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}},
		}, {
			Name:        []string{"pack"},
			Description: `Create a tarball from a package`,
			Args: []model.Arg{{
				Name: "[<@scope>/]<pkg>",
			}},
			Options: []model.Option{{
				Name:        []string{"--json"},
				Description: `Show output in json format`,
			}, {
				Name:        []string{"--dry-run"},
				Description: `Indicates that you don't want npm to make any changes and that it should only report what it would have done`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--pack-destination"},
				Description: `Directory in which npm pack will save tarballs`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "pack-destination",
				}},
			}},
		}, {
			Name:        []string{"ping"},
			Description: `Ping npm registry`,
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}},
		}, {
			Name:        []string{"pkg"},
			Description: `Manages your package.json`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"get"},
				Description: `Retrieves a value key, defined in your package.json file. It is possible to get multiple values and values for child fields`,
				Args: []model.Arg{{
					Name:        "field",
					Description: `Name of the field to get. You can view child fields by separating them with a period`,
					IsVariadic:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"--json"},
					Description: `Show output in json format`,
				}, {
					Name:        []string{"-w", "--workspace"},
					Description: `Enable running a command in the context of the configured workspaces of the current project`,
					Args: []model.Arg{{
						Name:       "workspace",
						Generator:  nil, // TODO: port over generator
						IsVariadic: true,
					}},
				}, {
					Name:        []string{"-ws", "--workspaces"},
					Description: `Enable running a command in the context of all the configured workspaces`,
				}},
			}, {
				Name:        []string{"set"},
				Description: `Sets a value in your package.json based on the field value. It is possible to set multiple values and values for child fields`,
				Args: []model.Arg{{
					Name:        "field",
					Description: `Name of the field to set. You can set child fields by separating them with a period`,
					IsVariadic:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"--json"},
					Description: `Show output in json format`,
				}, {
					Name:        []string{"-w", "--workspace"},
					Description: `Enable running a command in the context of the configured workspaces of the current project`,
					Args: []model.Arg{{
						Name:       "workspace",
						Generator:  nil, // TODO: port over generator
						IsVariadic: true,
					}},
				}, {
					Name:        []string{"-ws", "--workspaces"},
					Description: `Enable running a command in the context of all the configured workspaces`,
				}, {
					Name:        []string{"-f", "--force"},
					Description: `Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input. Allow clobbering existing values in npm pkg`,
				}},
			}, {
				Name:        []string{"delete"},
				Description: `Deletes a key from your package.json`,
				Args: []model.Arg{{
					Name:        "key",
					Description: `Name of the key to delete. You can delete child fields by separating them with a period`,
					IsVariadic:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"-w", "--workspace"},
					Description: `Enable running a command in the context of the configured workspaces of the current project`,
					Args: []model.Arg{{
						Name:       "workspace",
						Generator:  nil, // TODO: port over generator
						IsVariadic: true,
					}},
				}, {
					Name:        []string{"-ws", "--workspaces"},
					Description: `Enable running a command in the context of all the configured workspaces`,
				}, {
					Name:        []string{"-f", "--force"},
					Description: `Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input. Allow clobbering existing values in npm pkg`,
				}},
			}},
		}, {
			Name:        []string{"prefix"},
			Description: `Display prefix`,
			Options: []model.Option{{
				Name:        []string{"-g", "--global"},
				Description: `Print the global prefix to standard out`,
			}},
		}, {
			Name:        []string{"profile"},
			Description: `Change settings on your registry profile`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"get"},
				Description: `Display all of the properties of your profile, or one or more specific properties`,
				Args: []model.Arg{{
					Name:        "property",
					Description: `Property name`,
					IsOptional:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--json"},
					Description: `Show output in json format`,
				}, {
					Name:        []string{"-p", "--parseable"},
					Description: `Output parseable results from commands that write to standard output`,
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name:        []string{"set"},
				Description: `Set the value of a profile property`,
				Args: []model.Arg{{
					Name:        "property",
					Description: `Property name`,
					Suggestions: []model.Suggestion{{Name: []string{`email`}}, {Name: []string{`fullname`}}, {Name: []string{`homepage`}}, {Name: []string{`freenode`}}, {Name: []string{`twitter`}}, {Name: []string{`github`}}},
				}, {
					Name:        "value",
					Description: `Property value`,
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--json"},
					Description: `Show output in json format`,
				}, {
					Name:        []string{"-p", "--parseable"},
					Description: `Output parseable results from commands that write to standard output`,
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
				Subcommands: []model.Subcommand{{
					Name:        []string{"password"},
					Description: `Change your password. This is interactive, you'll be prompted for your current password and a new password`,
				}},
			}, {
				Name:        []string{"enable-2fa"},
				Description: `Enables two-factor authentication`,
				Args: []model.Arg{{
					Name:        "mode",
					Description: `Mode for two-factor authentication. Defaults to auth-and-writes mode`,
					Suggestions: []model.Suggestion{{
						Name:        []string{`auth-only`},
						Description: `Require an OTP when logging in or making changes to your account's authentication`,
					}, {
						Name:        []string{`auth-and-writes`},
						Description: `Requires an OTP at all the times auth-only does, and also requires one when publishing a module, setting the latest dist-tag, or changing access via npm access and npm owner`,
					}},
					IsOptional: true,
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name:        []string{"disable-2fa"},
				Description: `Disables two-factor authentication`,
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}},
		}, {
			Name:        []string{"prune"},
			Description: `Remove extraneous packages`,
			Args: []model.Arg{{
				Name:       "[<@scope>/]<pkg>",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--omit"},
				Description: `Dependency types to omit from the installation tree on disk`,
				Args: []model.Arg{{
					Name:        "Package type",
					Suggestions: []model.Suggestion{{Name: []string{`dev`}}, {Name: []string{`optional`}}, {Name: []string{`peer`}}},
				}},
			}, {
				Name:        []string{"--dry-run"},
				Description: `Indicates that you don't want npm to make any changes and that it should only report what it would have done`,
			}, {
				Name:        []string{"--json"},
				Description: `Show output in json format`,
			}, {
				Name:        []string{"--production"},
				Description: `Remove the packages specified in your devDependencies`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"publish"},
			Description: `Publish a package`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "tarball|folder",
				Description: `A url or file path to a gzipped tar archive containing a single folder with a package.json file inside | A folder containing a package.json file`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--tag"},
				Description: `Registers the published package with the given tag`,
				Args: []model.Arg{{
					Name: "tag",
				}},
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--access"},
				Description: `Sets scoped package to be publicly viewable if set to 'public'`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{Name: []string{`restricted`}}, {Name: []string{`public`}}},
				}},
			}, {
				Name:        []string{"--dry-run"},
				Description: `Indicates that you don't want npm to make any changes and that it should only report what it would have done`,
			}, {
				Name:        []string{"--otp"},
				Description: `One-time password from a two-factor authenticator`,
				Args: []model.Arg{{
					Name: "otp",
				}},
			}},
		}, {
			Name:        []string{"rebuild", "rb"},
			Description: `Rebuild a package`,
			Args: []model.Arg{{
				Name: "[<@scope>/]<pkg>[@<version>]",
			}},
			Options: []model.Option{{
				Name:        []string{"-g", "--global"},
				Description: `Operates in 'global' mode, so that packages are installed into the prefix folder instead of the current working directory`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--no-bin-links"},
				Description: `Tells npm to not create symlinks (or .cmd shims on Windows) for package executables`,
			}},
		}, {
			Name:        []string{"repo"},
			Description: `Open package repository page in the browser`,
			Args: []model.Arg{{
				Name:       "package",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--no-browser"},
				Description: `Display in command line instead of browser`,
				ExclusiveOn: []string{"--browser"},
			}, {
				Name:        []string{"--browser"},
				Description: `The browser that is called by the npm repo command to open websites`,
				Args: []model.Arg{{
					Name: "browser",
				}},
				ExclusiveOn: []string{"--no-browser"},
			}},
		}, {
			Name:        []string{"restart"},
			Description: `Restart a package`,
			Options: []model.Option{{
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--script-shell"},
				Description: `The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands`,
				Args: []model.Arg{{
					Name: "script-shell",
				}},
			}, {
				Name: []string{"--"},
				Args: []model.Arg{{
					Name:        "arg",
					Description: `Arguments to be passed to the restart script`,
				}},
			}},
		}, {
			Name:        []string{"root"},
			Description: `Display npm root`,
			Options: []model.Option{{
				Name:        []string{"-g", "--global"},
				Description: `Print the effective global node_modules folder to standard out`,
			}},
		}, {
			Name:        []string{"search", "s", "se", "find"},
			Description: `Search for packages`,
			Args: []model.Arg{{
				Name:       "search terms",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-l", "--long"},
				Description: `Show extended information`,
			}, {
				Name:        []string{"--json"},
				Description: `Show output in json format`,
			}, {
				Name:        []string{"--color"},
				Description: `Show colors`,
				Args: []model.Arg{{
					Name:        "always",
					Description: `Always show colors`,
					Suggestions: []model.Suggestion{{Name: []string{`always`}}},
				}},
				ExclusiveOn: []string{"--no-color"},
			}, {
				Name:        []string{"--no-color"},
				Description: `Do not show colors`,
				ExclusiveOn: []string{"--color"},
			}, {
				Name:        []string{"-p", "--parseable"},
				Description: `Output parseable results from commands that write to standard output`,
			}, {
				Name:        []string{"--no-description"},
				Description: `Do not show descriptions`,
			}, {
				Name:        []string{"--searchopts"},
				Description: `Space-separated options that are always passed to search`,
				Args: []model.Arg{{
					Name: "searchopts",
				}},
			}, {
				Name:        []string{"--searchexclude"},
				Description: `Space-separated options that limit the results from search`,
				Args: []model.Arg{{
					Name: "searchexclude",
				}},
			}, {
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}, {
				Name:        []string{"--prefer-online"},
				Description: `If true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data`,
				ExclusiveOn: []string{"--prefer-offline", "--offline"},
			}, {
				Name:        []string{"--prefer-offline"},
				Description: `If true, staleness checks for cached data will be bypassed, but missing data will be requested from the server`,
				ExclusiveOn: []string{"--prefer-online", "--offline"},
			}, {
				Name:        []string{"--offline"},
				Description: `Force offline mode: no network requests will be done during install`,
				ExclusiveOn: []string{"--prefer-online", "--prefer-offline"},
			}},
		}, {
			Name:        []string{"set"},
			Description: `Sets the config key to the value`,
		}, {
			Name:        []string{"set-script"},
			Description: `Set tasks in the scripts section of package.json`,
			Args: []model.Arg{{
				Name:        "script",
				Description: `Name of the task to be added to the scripts section of package.json`,
			}, {
				Name:        "command",
				Description: `Command to run when script is called`,
			}},
			Options: []model.Option{{
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"shrinkwrap"},
			Description: `Lock down dependency versions for publication`,
		}, {
			Name:        []string{"star"},
			Description: `Mark your favorite packages`,
			Args: []model.Arg{{
				Name:        "pkg",
				Description: `Package to mark as favorite`,
			}},
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}, {
				Name:        []string{"--no-unicode"},
				Description: `Do not use unicode characters in the tree output`,
			}},
		}, {
			Name:        []string{"stars"},
			Description: `View packages marked as favorites`,
			Args: []model.Arg{{
				Name:        "user",
				Description: `View packages marked as favorites by <user>`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}},
		}, {
			Name:        []string{"start"},
			Description: `Start a package`,
			Options: []model.Option{{
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--script-shell"},
				Description: `The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands`,
				Args: []model.Arg{{
					Name: "script-shell",
				}},
			}, {
				Name: []string{"--"},
				Args: []model.Arg{{
					Name:        "arg",
					Description: `Arguments to be passed to the start script`,
				}},
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stop a package`,
			Options: []model.Option{{
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--script-shell"},
				Description: `The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands`,
				Args: []model.Arg{{
					Name: "script-shell",
				}},
			}, {
				Name: []string{"--"},
				Args: []model.Arg{{
					Name:        "arg",
					Description: `Arguments to be passed to the stop script`,
				}},
			}},
		}, {
			Name:        []string{"team"},
			Description: `Manage organization teams and team memberships`,
			Subcommands: []model.Subcommand{{
				Name: []string{"create"},
				Args: []model.Arg{{
					Name: "scope:team",
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name: []string{"destroy"},
				Args: []model.Arg{{
					Name: "scope:team",
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name: []string{"add"},
				Args: []model.Arg{{
					Name: "scope:team",
				}, {
					Name: "user",
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name: []string{"rm"},
				Args: []model.Arg{{
					Name: "scope:team",
				}, {
					Name: "user",
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--otp"},
					Description: `One-time password from a two-factor authenticator`,
					Args: []model.Arg{{
						Name: "otp",
					}},
				}},
			}, {
				Name: []string{"ls"},
				Args: []model.Arg{{
					Name: "scope|scope:team",
				}},
				Options: []model.Option{{
					Name:        []string{"--registry"},
					Description: `The base URL of the npm registry`,
					Args: []model.Arg{{
						Name: "registry",
					}},
				}, {
					Name:        []string{"--json"},
					Description: `Show output in json format`,
				}, {
					Name:        []string{"-p", "--parseable"},
					Description: `Output parseable results from commands that write to standard output`,
				}},
			}},
		}, {
			Name:        []string{"test", "tst", "t"},
			Description: `Test a package`,
			Options: []model.Option{{
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--script-shell"},
				Description: `The shell to use for scripts run with the npm exec, npm run and npm init <pkg> commands`,
				Args: []model.Arg{{
					Name: "script-shell",
				}},
			}},
		}, {
			Name:        []string{"token"},
			Description: `Manage your authentication tokens`,
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}, {
				Name:        []string{"--otp"},
				Description: `One-time password from a two-factor authenticator`,
				Args: []model.Arg{{
					Name: "otp",
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"list"},
				Description: `Shows a table of all active authentication tokens`,
				Options: []model.Option{{
					Name:        []string{"--json"},
					Description: `Show output in json format`,
				}, {
					Name:        []string{"-p", "--parseable"},
					Description: `Output parseable results from commands that write to standard output`,
				}},
			}, {
				Name:        []string{"create"},
				Description: `Create a new authentication token`,
				Options: []model.Option{{
					Name:        []string{"--read-only"},
					Description: `This is used to mark a token as unable to publish when configuring limited access tokens with the npm token create command`,
				}, {
					Name:        []string{"--cidr"},
					Description: `This is a list of CIDR address to be used when configuring limited access tokens with the npm token create command`,
					Args: []model.Arg{{
						Name: "cidr",
					}},
				}},
			}, {
				Name:        []string{"revoke"},
				Description: `Immediately removes an authentication token from the registry. You will no longer be able to use it`,
				Args: []model.Arg{{
					Name: "idtoken",
				}},
			}},
		}, {
			Name:        []string{"uninstall"},
			Description: `Uninstall a package`,
			Args: []model.Arg{{
				Name:           "package",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
				IsVariadic:     true,
			}},
			Options: []model.Option{{
				Name:        []string{"-S", "--save"},
				Description: `Package will be removed from your dependencies`,
			}, {
				Name:        []string{"-D", "--save-dev"},
				Description: `Package will appear in your "devDependencies"`,
			}, {
				Name:        []string{"-O", "--save-optional"},
				Description: `Package will appear in your "optionalDependencies"`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Prevents saving to "dependencies"`,
			}, {
				Name:        []string{"-g"},
				Description: `Uninstall global package`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"r", "rm"},
			Description: `Uninstall a package`,
			Args: []model.Arg{{
				Name:           "package",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
				IsVariadic:     true,
			}},
			Options: []model.Option{{
				Name:        []string{"-S", "--save"},
				Description: `Package will be removed from your dependencies`,
			}, {
				Name:        []string{"-D", "--save-dev"},
				Description: `Package will appear in your "devDependencies"`,
			}, {
				Name:        []string{"-O", "--save-optional"},
				Description: `Package will appear in your "optionalDependencies"`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Prevents saving to "dependencies"`,
			}, {
				Name:        []string{"-g"},
				Description: `Uninstall global package`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"un"},
			Description: `Uninstall a package`,
			Args: []model.Arg{{
				Name:           "package",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
				IsVariadic:     true,
			}},
			Options: []model.Option{{
				Name:        []string{"-S", "--save"},
				Description: `Package will be removed from your dependencies`,
			}, {
				Name:        []string{"-D", "--save-dev"},
				Description: `Package will appear in your "devDependencies"`,
			}, {
				Name:        []string{"-O", "--save-optional"},
				Description: `Package will appear in your "optionalDependencies"`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Prevents saving to "dependencies"`,
			}, {
				Name:        []string{"-g"},
				Description: `Uninstall global package`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"remove"},
			Description: `Uninstall a package`,
			Args: []model.Arg{{
				Name:           "package",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
				IsVariadic:     true,
			}},
			Options: []model.Option{{
				Name:        []string{"-S", "--save"},
				Description: `Package will be removed from your dependencies`,
			}, {
				Name:        []string{"-D", "--save-dev"},
				Description: `Package will appear in your "devDependencies"`,
			}, {
				Name:        []string{"-O", "--save-optional"},
				Description: `Package will appear in your "optionalDependencies"`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Prevents saving to "dependencies"`,
			}, {
				Name:        []string{"-g"},
				Description: `Uninstall global package`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"unlink"},
			Description: `Uninstall a package`,
			Args: []model.Arg{{
				Name:           "package",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
				IsVariadic:     true,
			}},
			Options: []model.Option{{
				Name:        []string{"-S", "--save"},
				Description: `Package will be removed from your dependencies`,
			}, {
				Name:        []string{"-D", "--save-dev"},
				Description: `Package will appear in your "devDependencies"`,
			}, {
				Name:        []string{"-O", "--save-optional"},
				Description: `Package will appear in your "optionalDependencies"`,
			}, {
				Name:        []string{"--no-save"},
				Description: `Prevents saving to "dependencies"`,
			}, {
				Name:        []string{"-g"},
				Description: `Uninstall global package`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"unpublish"},
			Description: `Remove a package from the registry`,
			Args: []model.Arg{{
				Name: "[<@scope>/]<pkg>[@<version>]",
			}},
			Options: []model.Option{{
				Name:        []string{"--dry-run"},
				Description: `Indicates that you don't want npm to make any changes and that it should only report what it would have done`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Allow unpublishing all versions of a published package. Removes various protections against unfortunate side effects, common mistakes, unnecessary performance degradation, and malicious input`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"unstar"},
			Description: `Remove an item from your favorite packages`,
			Args: []model.Arg{{
				Name:        "pkg",
				Description: `Package to unmark as favorite`,
			}},
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}, {
				Name:        []string{"--otp"},
				Description: `One-time password from a two-factor authenticator`,
				Args: []model.Arg{{
					Name: "otp",
				}},
			}, {
				Name:        []string{"--no-unicode"},
				Description: `Do not use unicode characters in the tree output`,
			}},
		}, {
			Name:        []string{"update", "upgrade", "up"},
			Description: `Update a package`,
			Options: []model.Option{{
				Name:        []string{"-g"},
				Description: `Update global package`,
			}, {
				Name:        []string{"--global-style"},
				Description: `Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder`,
			}, {
				Name:        []string{"--legacy-bundling"},
				Description: `Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package`,
			}, {
				Name:        []string{"--strict-peer-deps"},
				Description: `If set to true, and --legacy-peer-deps is not set, then any conflicting peerDependencies will be treated as an install failure`,
			}, {
				Name:        []string{"--no-package-lock"},
				Description: `Ignores package-lock.json files when installing`,
			}, {
				Name:        []string{"--omit"},
				Description: `Dependency types to omit from the installation tree on disk`,
				Args: []model.Arg{{
					Name:        "Package type",
					Suggestions: []model.Suggestion{{Name: []string{`dev`}}, {Name: []string{`optional`}}, {Name: []string{`peer`}}},
				}},
			}, {
				Name:        []string{"--ignore-scripts"},
				Description: `If true, npm does not run scripts specified in package.json files`,
			}, {
				Name:        []string{"--no-audit"},
				Description: `Submit audit reports alongside the current npm command to the default registry and all registries configured for scopes`,
			}, {
				Name:        []string{"--no-bin-links"},
				Description: `Tells npm to not create symlinks (or .cmd shims on Windows) for package executables`,
			}, {
				Name:        []string{"--no-fund"},
				Description: `Hides the message at the end of each npm install acknowledging the number of dependencies looking for funding`,
			}, {
				Name:        []string{"--dry-run"},
				Description: `Indicates that you don't want npm to make any changes and that it should only report what it would have done`,
			}, {
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}},
		}, {
			Name:        []string{"version"},
			Description: `Bump a package version`,
			Options: []model.Option{{
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--json"},
				Description: `Show output in json format`,
			}, {
				Name:        []string{"--allow-same-version"},
				Description: `Prevents throwing an error when npm version is used to set the new version to the same value as the current version`,
			}, {
				Name:        []string{"--no-commit-hooks"},
				Description: `Do not run git commit hooks when using the npm version command`,
			}, {
				Name:        []string{"--no-git-tag-version"},
				Description: `Do not tag the commit when using the npm version command`,
			}, {
				Name:        []string{"--preid"},
				Description: `The "prerelease identifier" to use as a prefix for the "prerelease" part of a semver. Like the rc in 1.2.0-rc.8`,
				Args: []model.Arg{{
					Name: "prerelease-id",
				}},
			}, {
				Name:        []string{"--sign-git-tag"},
				Description: `If set to true, then the npm version command will tag the version using -s to add a signature`,
			}},
		}, {
			Name:        []string{"view", "v", "info", "show"},
			Description: `View registry info`,
			Options: []model.Option{{
				Name:        []string{"-w", "--workspace"},
				Description: `Enable running a command in the context of the configured workspaces of the current project`,
				Args: []model.Arg{{
					Name:       "workspace",
					Generator:  nil, // TODO: port over generator
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"-ws", "--workspaces"},
				Description: `Enable running a command in the context of all the configured workspaces`,
			}, {
				Name:        []string{"--json"},
				Description: `Show output in json format`,
			}},
		}, {
			Name:        []string{"whoami"},
			Description: `Display npm username`,
			Options: []model.Option{{
				Name:        []string{"--registry"},
				Description: `The base URL of the npm registry`,
				Args: []model.Arg{{
					Name: "registry",
				}},
			}},
		}},
	}
}
