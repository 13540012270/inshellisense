// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["npx"] = model.Subcommand{
		Name:        []string{"npx"},
		Description: `Execute binaries from npm packages`,
		Args: []model.Arg{{
			Name: "command",
			Suggestions: []model.Suggestion{{
				Name: []string{`vite`},
			}, {
				Name: []string{`babel`},
			}, {
				Name: []string{`create-react-native-app`},
			}, {
				Name: []string{`react-native`},
			}, {
				Name: []string{`tailwindcss`},
			}, {
				Name: []string{`next`},
			}, {
				Name: []string{`nuxi`},
			}, {
				Name: []string{`gltfjsx`},
			}, {
				Name: []string{`prisma`},
			}, {
				Name: []string{`eslint`},
			}, {
				Name: []string{`prettier`},
			}, {
				Name: []string{`tsc`},
			}, {
				Name: []string{`typeorm`},
			}, {
				Name: []string{`@withfig/autocomplete-tools`},
			}, {
				Name: []string{`create-completion-spec`},
			}, {
				Name: []string{`@fig/publish-spec-to-team`},
			}, {
				Name: []string{`fig-teams@latest`},
			}, {
				Name: []string{`create-next-app`},
			}, {
				Name: []string{`create-t3-app`},
			}, {
				Name: []string{`create-video`},
			}, {
				Name: []string{`remotion`},
			}, {
				Name: []string{`create-remix`},
			}, {
				Name: []string{`remix`},
			}, {
				Name: []string{`playwright`},
			}, {
				Name: []string{`ignite-cli`},
			}, {
				Name: []string{`vsce`},
			}, {
				Name: []string{`degit`},
			}, {
				Name: []string{`@preset/cli`},
			}, {
				Name: []string{`mikro-orm`},
			}, {
				Name: []string{`pod-install`},
			}, {
				Name: []string{`capacitor`},
			}, {
				Name: []string{`cap`},
			}, {
				Name: []string{`@magnolia/cli`},
			}, {
				Name: []string{`stencil`},
			}, {
				Name: []string{`swagger-typescript-api`},
			}, {
				Name: []string{`sta`},
			}, {
				Name: []string{`@wordpress/create-block`},
			}, {
				Name: []string{`astro`},
			}},
			Generator:  nil, // TODO: port over generator
			IsOptional: true,
			IsCommand:  true,
		}},
		Options: []model.Option{{
			Name:        []string{"--package", "-p"},
			Description: `Package to be installed`,
			Args: []model.Arg{{
				Name: "package",
			}},
		}, {
			Name:        []string{"--cache"},
			Description: `Location of the npm cache`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--always-spawn"},
			Description: `Always spawn a child process to execute the command`,
		}, {
			Name:        []string{"-y"},
			Description: `Execute npx command without prompting for confirmation`,
		}, {
			Name:        []string{"--no-install"},
			Description: `Skip installation if a package is missing`,
		}, {
			Name:        []string{"--userconfig"},
			Description: `Path to user npmrc`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--call", "-c"},
			Description: `Execute string as if inside "npm run-script"`,
			Args: []model.Arg{{
				Name: "script",
			}},
		}, {
			Name:        []string{"--shell", "-s"},
			Description: `Shell to execute the command with, if any`,
			Args: []model.Arg{{
				Name: "shell",
				Suggestions: []model.Suggestion{{
					Name: []string{`bash`},
				}, {
					Name: []string{`fish`},
				}, {
					Name: []string{`zsh`},
				}},
			}},
		}, {
			Name:        []string{"--shell-auto-fallback"},
			Description: `Generate shell code to use npx as the "command not found" fallback`,
			Args: []model.Arg{{
				Name: "shell-fallback",
				Suggestions: []model.Suggestion{{
					Name: []string{`bash`},
				}, {
					Name: []string{`fish`},
				}, {
					Name: []string{`zsh`},
				}},
			}},
		}, {
			Name:        []string{"--ignore-existing"},
			Description: `Ignores existing binaries in $PATH, or in the localproject. This forces npx to do a temporary install and use the latest version`,
		}, {
			Name:        []string{"--quiet", "-q"},
			Description: `Suppress output from npx itself. Subcommands will not be affected`,
		}, {
			Name:        []string{"--npm"},
			Description: `Npm binary to use for internal operations`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path to binary",
			}},
		}, {
			Name:        []string{"--node-arg", "-n"},
			Description: `Extra node argument when calling a node binary`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Show version number`,
		}, {
			Name:        []string{"--help", "-h"},
			Description: `Show help`,
		}},
	}
}
