// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["zipcloak"] = model.Subcommand{
		Name:        []string{"zipcloak"},
		Description: `Encrypt entries in a zipfile`,
		Args: []model.Arg{{
			Templates:   []model.Template{model.TemplateFilepaths},
			Name:        "zipfile",
			Description: `Zipped file to encrypt entries into`,
		}},
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show a short help for zipcloak`,
		}, {
			Name:        []string{"--decrypt", "-d"},
			Description: `Decrypt encrypted entries (copy if given wrong password)`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "zipfile",
				Description: `Zipped file to decrypt entries of`,
			}},
		}, {
			Name:        []string{"--license", "-L"},
			Description: `Show software license`,
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Show version information`,
		}, {
			Name:        []string{"--quiet", "-q"},
			Description: `Quiet operation. Suppresses some informational messages`,
		}, {
			Name:        []string{"--output-file", "-O"},
			Description: `Write output to new archive zipfile, leaving original archive as is`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "zipfile",
				Description: `New zipfile that will be written to`,
			}},
		}, {
			Name:        []string{"--temp-path", "-b"},
			Description: `Use the directory given by path for the temporary zip file`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "directory",
				Description: `Directory for the temporary zip file`,
			}},
		}},
	}
}
