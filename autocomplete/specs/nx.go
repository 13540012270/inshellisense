// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["nx"] = model.Subcommand{
		Name:        []string{"nx"},
		Description: `Fig completions for Nx by Nrwl`,
		Subcommands: []model.Subcommand{{
			Name:        []string{"init"},
			Description: `Adds nx.json file and installs nx if not installed already`,
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"generate"},
			Description: `Runs a generator that creates and/or modifies files based on a generator from a collection`,
			Args: []model.Arg{{
				Name:      "collection:generator",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--defaults"},
				Description: `When true, disables interactive input prompts for options with a default`,
			}, {
				Name:        []string{"--dryRun"},
				Description: `When true, preview the changes without updating files`,
			}, {
				Name:        []string{"--force"},
				Description: `When true, forces overwriting of existing files`,
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--interactive"},
				Description: `Enable/disable prompts`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"run"},
			Description: `Runs an Architect target with an optional custom builder configuration defined in your project`,
			Args: []model.Arg{{
				Name:      "project:target[:configuration]",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--configuration", "-c"},
				Description: `A named builder configuration, defined in the "configurations" section of the workspace configuration file. The builder uses the named configuration to run the given target`,
				Args: []model.Arg{{
					Name:      "configuration",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"daemon"},
			Description: `Prints information about the Nx Daemon process or starts a daemon process`,
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name: []string{"--start"},
			}, {
				Name: []string{"--stop"},
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"graph"},
			Description: `Graph dependencies within workspace`,
			Options: []model.Option{{
				Name:        []string{"--exclude"},
				Description: `Exclude certain projects from being processed`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--file"},
				Description: `Output file (e.g. --file=output.json or --file=dep-graph.html)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--focus"},
				Description: `Use to show the project graph for a particular project and every node that is either an ancestor or a descendant`,
				Args: []model.Arg{{
					Name:      "project",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--groupByFolder"},
				Description: `Group projects by folder in the project graph`,
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--host"},
				Description: `Bind the project graph server to a specific ip address`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--open"},
				Description: `Open the project graph in the browser`,
			}, {
				Name:        []string{"--port"},
				Description: `Bind the project graph server to a specific port`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--targets"},
				Description: `Targets (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "targets",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}, {
				Name:        []string{"--view"},
				Description: `Choose whether to view the projects or task graph`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{
						Name: []string{`projects`},
					}, {
						Name: []string{`tasks`},
					}},
				}},
			}, {
				Name:        []string{"--watch"},
				Description: `Watch for changes to project graph and update in-browser`,
			}},
		}, {
			Name:        []string{"run-many"},
			Description: `Run target for multiple listed projects`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `All projects`,
			}, {
				Name:        []string{"--configuration", "-c"},
				Description: `A named builder configuration, defined in the "configurations" section of the workspace configuration file. The builder uses the named configuration to run the given target`,
				Args: []model.Arg{{
					Name:      "configuration",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--exclude"},
				Description: `Exclude certain projects from being processed`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--graph"},
				Description: `Show the task graph of the command`,
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--nx-bail"},
				Description: `Stop command execution after the first failed task`,
			}, {
				Name:        []string{"--nx-ignore-cycles"},
				Description: `Ignore cycles in the task graph`,
			}, {
				Name:        []string{"--output-style"},
				Description: `Defines how Nx emits outputs tasks logs`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{
						Name: []string{`dynamic`},
					}, {
						Name: []string{`static`},
					}, {
						Name: []string{`stream`},
					}, {
						Name: []string{`stream-without-prefixes`},
					}, {
						Name: []string{`compact`},
					}},
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Max number of parallel processes [default is 3]`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--projects"},
				Description: `Projects (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--runner"},
				Description: `This is the name of the tasks runner configured in nx.json`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--skip-nx-cache"},
				Description: `Rerun the tasks even when the results are available in the cache`,
			}, {
				Name:        []string{"--targets"},
				Description: `Targets (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "targets",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Prints additional information about the commands (e.g., stack traces)`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"affected"},
			Description: `Run target for affected projects`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `All projects`,
			}, {
				Name:        []string{"--base"},
				Description: `Base of the current branch (usually main)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--configuration", "-c"},
				Description: `A named builder configuration, defined in the "configurations" section of the workspace configuration file. The builder uses the named configuration to run the given target`,
				Args: []model.Arg{{
					Name:      "configuration",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--exclude"},
				Description: `Exclude certain projects from being processed`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--files"},
				Description: `Change the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas or spaces`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--graph"},
				Description: `Show the task graph of the command`,
			}, {
				Name:        []string{"--head"},
				Description: `Latest commit of the current branch (usually HEAD)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--nx-bail"},
				Description: `Stop command execution after the first failed task`,
			}, {
				Name:        []string{"--nx-ignore-cycles"},
				Description: `Ignore cycles in the task graph`,
			}, {
				Name:        []string{"--output-style"},
				Description: `Defines how Nx emits outputs tasks logs`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{
						Name: []string{`dynamic`},
					}, {
						Name: []string{`static`},
					}, {
						Name: []string{`stream`},
					}, {
						Name: []string{`stream-without-prefixes`},
					}, {
						Name: []string{`compact`},
					}},
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Max number of parallel processes [default is 3]`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--runner"},
				Description: `This is the name of the tasks runner configured in nx.json`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--skip-nx-cache"},
				Description: `Rerun the tasks even when the results are available in the cache`,
			}, {
				Name:        []string{"--targets"},
				Description: `Targets (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "targets",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--uncommitted"},
				Description: `Uncommitted changes`,
			}, {
				Name:        []string{"--untracked"},
				Description: `Untracked changes`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Prints additional information about the commands (e.g., stack traces)`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"affected:graph"},
			Description: `Graph dependencies affected by changes`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `All projects`,
			}, {
				Name:        []string{"--base"},
				Description: `Base of the current branch (usually main)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--exclude"},
				Description: `Exclude certain projects from being processed`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--file"},
				Description: `Output file (e.g. --file=output.json or --file=dep-graph.html)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--files"},
				Description: `Change the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas or spaces`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--focus"},
				Description: `Use to show the project graph for a particular project and every node that is either an ancestor or a descendant`,
				Args: []model.Arg{{
					Name:      "project",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--groupByFolder"},
				Description: `Group projects by folder in the project graph`,
			}, {
				Name:        []string{"--head"},
				Description: `Latest commit of the current branch (usually HEAD)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--host"},
				Description: `Bind the project graph server to a specific ip address`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--open"},
				Description: `Open the project graph in the browser`,
			}, {
				Name:        []string{"--port"},
				Description: `Bind the project graph server to a specific port`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--targets"},
				Description: `Targets (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "targets",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--uncommitted"},
				Description: `Uncommitted changes`,
			}, {
				Name:        []string{"--untracked"},
				Description: `Untracked changes`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}, {
				Name:        []string{"--view"},
				Description: `Choose whether to view the projects or task graph`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{
						Name: []string{`projects`},
					}, {
						Name: []string{`tasks`},
					}},
				}},
			}, {
				Name:        []string{"--watch"},
				Description: `Watch for changes to project graph and update in-browser`,
			}},
		}, {
			Name:        []string{"print-affected"},
			Description: `Prints information about the projects and targets affected by changes`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `All projects`,
			}, {
				Name:        []string{"--base"},
				Description: `Base of the current branch (usually main)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--configuration", "-c"},
				Description: `A named builder configuration, defined in the "configurations" section of the workspace configuration file. The builder uses the named configuration to run the given target`,
				Args: []model.Arg{{
					Name:      "configuration",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--exclude"},
				Description: `Exclude certain projects from being processed`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--files"},
				Description: `Change the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas or spaces`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--head"},
				Description: `Latest commit of the current branch (usually HEAD)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--select"},
				Description: `Select the subset of the returned json document (e.g., --select=projects)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--targets"},
				Description: `Targets (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "targets",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--type"},
				Description: `Select the type of projects to be returned (e.g., --type=app)`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{
						Name: []string{`app`},
					}, {
						Name: []string{`lib`},
					}},
				}},
			}, {
				Name:        []string{"--uncommitted"},
				Description: `Uncommitted changes`,
			}, {
				Name:        []string{"--untracked"},
				Description: `Untracked changes`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"format:check"},
			Description: `Check for un-formatted files`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `All projects`,
			}, {
				Name:        []string{"--base"},
				Description: `Base of the current branch (usually main)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--exclude"},
				Description: `Exclude certain projects from being processed`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--files"},
				Description: `Change the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas or spaces`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--head"},
				Description: `Latest commit of the current branch (usually HEAD)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--libs-and-apps"},
				Description: `Format only libraries and applications files`,
			}, {
				Name:        []string{"--projects"},
				Description: `Projects (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--uncommitted"},
				Description: `Uncommitted changes`,
			}, {
				Name:        []string{"--untracked"},
				Description: `Untracked changes`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"format:write"},
			Description: `Overwrite un-formatted files`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `All projects`,
			}, {
				Name:        []string{"--base"},
				Description: `Base of the current branch (usually main)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--exclude"},
				Description: `Exclude certain projects from being processed`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--files"},
				Description: `Change the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas or spaces`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--head"},
				Description: `Latest commit of the current branch (usually HEAD)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--libs-and-apps"},
				Description: `Format only libraries and applications files`,
			}, {
				Name:        []string{"--projects"},
				Description: `Projects (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--uncommitted"},
				Description: `Uncommitted changes`,
			}, {
				Name:        []string{"--untracked"},
				Description: `Untracked changes`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"migrate"},
			Description: `Creates a migrations file or runs migrations from the migrations file`,
			Args: []model.Arg{{
				Name:        "packageAndVersion",
				Description: `The target package and version (e.g, @nrwl/workspace@13.0.0)`,
				Suggestions: []model.Suggestion{{
					Name: []string{`latest`},
				}},
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--commitPrefix"},
				Description: `Commit prefix to apply to the commit for each migration, when --create-commits is enabled`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--createCommits"},
				Description: `Automatically create a git commit after each migration runs`,
			}, {
				Name:        []string{"--excludeAppliedMigrations"},
				Description: `Exclude migrations that should have been applied on previous updates. To be used with --from`,
			}, {
				Name:        []string{"--from"},
				Description: `Use the provided versions for packages instead of the ones installed in node_modules (e.g., --from="@nrwl/react@12.0.0,@nrwl/js@12.0.0")`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--ifExists"},
				Description: `Run migrations only if the migrations file exists, if not continues successfully`,
			}, {
				Name:        []string{"--interactive"},
				Description: `Enable/disable prompts`,
			}, {
				Name:        []string{"--runMigrations"},
				Description: `Execute migrations from a file (when the file isn't provided, execute migrations from migrations.json)`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--to"},
				Description: `Use the provided versions for packages instead of the ones calculated by the migrator (e.g., --to="@nrwl/react@12.0.0,@nrwl/js@12.0.0")`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"report"},
			Description: `Reports useful version numbers to copy into the Nx issue template`,
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name: []string{"list"},
			Args: []model.Arg{{
				Name:        "plugin",
				Description: `The name of an installed plugin to query`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"workspace-generator"},
			Description: `Runs a workspace generator from the tools/generators directory`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `The name of your generator`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--list-generators"},
				Description: `List the available workspace-generators`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"connect"},
			Description: `Connect workspace to Nx Cloud`,
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"reset"},
			Description: `Clears all the cached Nx artifacts and metadata about the workspace and shuts down the Nx Daemon`,
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"repair"},
			Description: `Repair any configuration that is no longer supported by Nx`,
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Prints additional information about the commands (e.g., stack traces)`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"exec"},
			Description: `Executes any command as if it was a target on the project`,
			Options: []model.Option{{
				Name:        []string{"--configuration", "-c"},
				Description: `A named builder configuration, defined in the "configurations" section of the workspace configuration file. The builder uses the named configuration to run the given target`,
				Args: []model.Arg{{
					Name:      "configuration",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--exclude"},
				Description: `Exclude certain projects from being processed`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--graph"},
				Description: `Show the task graph of the command`,
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--nx-bail"},
				Description: `Stop command execution after the first failed task`,
			}, {
				Name:        []string{"--nx-ignore-cycles"},
				Description: `Ignore cycles in the task graph`,
			}, {
				Name:        []string{"--output-style"},
				Description: `Defines how Nx emits outputs tasks logs`,
				Args: []model.Arg{{
					Suggestions: []model.Suggestion{{
						Name: []string{`dynamic`},
					}, {
						Name: []string{`static`},
					}, {
						Name: []string{`stream`},
					}, {
						Name: []string{`stream-without-prefixes`},
					}, {
						Name: []string{`compact`},
					}},
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Max number of parallel processes [default is 3]`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--project"},
				Description: `Target project`,
				Args: []model.Arg{{
					Name:      "project",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--runner"},
				Description: `This is the name of the tasks runner configured in nx.json`,
				Args:        []model.Arg{{}},
			}, {
				Name:        []string{"--skip-nx-cache"},
				Description: `Rerun the tasks even when the results are available in the cache`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Prints additional information about the commands (e.g., stack traces)`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"watch"},
			Description: `Watch for changes within projects, and execute commands`,
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `All projects`,
			}, {
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--includeDependentProjects"},
				Description: `When watching selected projects, include dependent projects as well`,
			}, {
				Name:        []string{"--projects"},
				Description: `Projects (comma/space delimited)`,
				Args: []model.Arg{{
					Name:      "projects",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--verbose"},
				Description: `Prints additional information about the commands (e.g., stack traces)`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"show"},
			Description: `Show information about the workspace (e.g., list of projects)`,
			Args: []model.Arg{{
				Name:        "object",
				Description: `What to show (e.g., projects)`,
				Suggestions: []model.Suggestion{{
					Name: []string{`projects`},
				}},
			}},
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}, {
			Name:        []string{"view-logs"},
			Description: `Enables you to view and interact with the logs via the advanced analytic UI from Nx Cloud to help you debug your issue. To do this, Nx needs to connect your workspace to Nx Cloud and upload the most recent run details. Only the metrics are uploaded, not the artefacts`,
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}},
		}},
	}
}
