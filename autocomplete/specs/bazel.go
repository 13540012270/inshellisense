// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["bazel"] = model.Subcommand{
		Name:        []string{"bazel"},
		Description: `Bazel the build system!`,
		Options: []model.Option{{
			Name:        []string{"--autodetect_server_javabase"},
			Description: `Back to the local JDK for running the bazel server and instead exits`,
			ExclusiveOn: []string{"--noautodetect_server_javabase"},
		}, {
			Name:        []string{"--noautodetect_server_javabase"},
			Description: `Does not fall back to the local JDK for running the bazel server and instead exits`,
			ExclusiveOn: []string{"autodetect_server_javabase"},
		}, {
			Name:        []string{"--batch"},
			Description: `Run as just a client process without a server`,
			ExclusiveOn: []string{"--nobatch"},
		}, {
			Name:        []string{"--nobatch"},
			Description: `Run with a server`,
			ExclusiveOn: []string{"--batch"},
		}, {
			Name:        []string{"--batch_cpu_scheduling"},
			Description: `Only on Linux; use 'batch' CPU scheduling for Bazel`,
			ExclusiveOn: []string{"--nobatch_cpu_scheduling"},
		}, {
			Name:        []string{"--nobatch_cpu_scheduling"},
			Description: `Only on Linux; Bazel does not perform a system call`,
			ExclusiveOn: []string{"--batch_cpu_scheduling"},
		}, {
			Name:        []string{"--bazelrc"},
			Description: `The location of the user .bazelrc file containing default values of Bazel options`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "bazelrc path",
			}},
		}, {
			Name:        []string{"--block_for_lock"},
			Description: `Wait for a running command to complete`,
			ExclusiveOn: []string{"--noblock_for_lock"},
		}, {
			Name:        []string{"--noblock_for_lock"},
			Description: `Bazel does not wait for a running command to complete, but instead exits immediately`,
			ExclusiveOn: []string{"--block_for_lock"},
		}, {
			Name:        []string{"--client_debug"},
			Description: `Log debug information from the client to stderr. Changing this option will not cause the server to restart`,
			ExclusiveOn: []string{"--noclient_debug"},
		}, {
			Name:        []string{"--noclient_debug"},
			Description: `Don't log debug information from the client to stderr`,
			ExclusiveOn: []string{"--client_debug"},
		}, {
			Name:        []string{"--connect_timeout_secs"},
			Description: `The amount of time the client waits for each attempt to connect to the server`,
			Args: []model.Arg{{
				Name: "time",
			}},
		}, {
			Name:        []string{"--expand_configs_in_place"},
			Description: `Changed the expansion of --config flags to be done in-place`,
			ExclusiveOn: []string{"--noexpand_configs_in_place"},
		}, {
			Name:        []string{"--noexpand_configs_in_place"},
			Description: `--config flags in a fixed point expansion between normal rc options and command-line specified options`,
			ExclusiveOn: []string{"--expand_configs_in_place"},
		}, {
			Name:        []string{"--failure_detail_out"},
			Description: `Specifies a location to write a failure_detail protobuf message if the server experiences a failure and cannot report it via gRPC, as normal. Otherwise, the location will be ${OUTPUT_BASE}/failure_detail.rawproto`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--home_rc"},
			Description: `Look for the home bazelrc file at $HOME/.bazelrc`,
			ExclusiveOn: []string{"--nohome_rc"},
		}, {
			Name:        []string{"--nohome_rc"},
			Description: `Don't look for the home bazelrc file at $HOME/.bazelrc`,
			ExclusiveOn: []string{"--home_rc"},
		}, {
			Name:        []string{"--idle_server_tasks"},
			Description: `Run System.gc() when the server is idle`,
			ExclusiveOn: []string{"--noidle_server_tasks"},
		}, {
			Name:        []string{"--noidle_server_tasks"},
			Description: `Don't run System.gc() when the server is idle`,
			ExclusiveOn: []string{"--idle_server_tasks"},
		}, {
			Name:        []string{"--ignore_all_rc_files"},
			Description: `Disables all rc files, regardless of the values of other rc-modifying flags, even if these flags come later in the list of startup options`,
			ExclusiveOn: []string{"--noignore_all_rc_files"},
		}, {
			Name:        []string{"--noignore_all_rc_files"},
			Description: `Enables all rc files`,
			ExclusiveOn: []string{"--ignore_all_rc_files"},
		}, {
			Name:        []string{"--io_nice_level"},
			Description: `Only on Linux; set a level from 0-7 for best-effort IO scheduling using the sys_ioprio_set system call. 0 is highest priority, 7 is lowest`,
			Args: []model.Arg{{
				Name:        "io-level",
				Suggestions: []model.Suggestion{{Name: []string{`0`}}, {Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}, {Name: []string{`6`}}, {Name: []string{`7`}}},
			}},
		}, {
			Name:        []string{"--local_startup_timeout_secs"},
			Description: `The maximum amount of time the client waits to connect to the server`,
			Args: []model.Arg{{
				Name: "seconds",
			}},
		}, {
			Name:        []string{"--macos_qos_class"},
			Description: `Sets the QoS service class of the bazel server when running on macOS`,
			Args: []model.Arg{{
				Name: "QoS service class",
			}},
		}, {
			Name:        []string{"--max_idle_secs"},
			Description: `The number of seconds the build server will wait idling before shutting down`,
			Args: []model.Arg{{
				Name: "seconds",
			}},
		}, {
			Name:        []string{"--output_base"},
			Description: `Specifies the output location to which all build output will be written`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "Path",
			}},
		}, {
			Name:        []string{"--output_base_root"},
			Description: `The user-specific directory beneath which all build outputs are written`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "Path",
			}},
		}, {
			Name:        []string{"--preemptible"},
			Description: `If true, the command can be preempted if another command is started`,
			ExclusiveOn: []string{"--nopreemptible"},
		}, {
			Name:        []string{"--nopreemptible"},
			Description: `If true, the command can be preempted if another command is started`,
			ExclusiveOn: []string{"--preemptible"},
		}, {
			Name:        []string{"--server_jvm_out"},
			Description: `The location to write the server's JVM's output`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "Path",
			}},
		}, {
			Name:        []string{"--shutdown_on_low_sys_mem"},
			Description: `Linux only. If max_idle_secs is set and the build server has been idle for a while, shut down the server when the system is low on free RAM`,
			ExclusiveOn: []string{"--noshutdown_on_low_sys_mem"},
		}, {
			Name:        []string{"--noshutdown_on_low_sys_mem"},
			Description: `Linux only. Don't shut down the server when the system is low on free RAM`,
			ExclusiveOn: []string{"--shutdown_on_low_sys_mem"},
		}, {
			Name:        []string{"--system_rc"},
			Description: `Look for the system-wide bazelrc`,
			ExclusiveOn: []string{"--nosystem_rc"},
		}, {
			Name:        []string{"--nosystem_rc"},
			Description: `Don't look for the system-wide bazelrc`,
			ExclusiveOn: []string{"--system_rc"},
		}, {
			Name:        []string{"--unlimit_coredumps"},
			Description: `Raises the soft coredump limit to the hard limit to make coredumps of the server (including the JVM) and the client possible under common conditions`,
			ExclusiveOn: []string{"--nounlimit_coredumps"},
		}, {
			Name:        []string{"--nounlimit_coredumps"},
			Description: `Don't raise the soft coredump limit to the hard limit to make coredumps of the server (including the JVM) and the client possible under common conditions`,
			ExclusiveOn: []string{"--unlimit_coredumps"},
		}, {
			Name:        []string{"--watchfs"},
			Description: `Use the operating system's file watch service for local changes instead of scanning every file for a change`,
			ExclusiveOn: []string{"--nowatchfs"},
		}, {
			Name:        []string{"--nowatchfs"},
			Description: `Scan every file for a change`,
			ExclusiveOn: []string{"--watchfs"},
		}, {
			Name:        []string{"--windows_enable_symlinks"},
			Description: `Real symbolic links will be created on Windows instead of file copying`,
			ExclusiveOn: []string{"--nowindows_enable_symlinks"},
		}, {
			Name:        []string{"--nowindows_enable_symlinks"},
			Description: `Real symbolic links will be created via file copying`,
			ExclusiveOn: []string{"--windows_enable_symlinks"},
		}, {
			Name:        []string{"--workspace_rc"},
			Description: `Look for the workspace bazelrc file at $workspace/.bazelrc`,
			ExclusiveOn: []string{"--noworkspace_rc"},
		}, {
			Name:        []string{"--noworkspace_rc"},
			Description: `Don't look for the workspace bazelrc file at $workspace/.bazelrc`,
			ExclusiveOn: []string{"--workspace_rc"},
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"run"},
			Description: `Runs the specified target`,
			Args: []model.Arg{{
				Name:      "BUILD file",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"test"},
			Description: `Builds and runs the specified test targets`,
			Args: []model.Arg{{
				Name:      "BUILD file",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"build"},
			Description: `Builds the specified targets`,
			Args: []model.Arg{{
				Name:      "BUILD file",
				Generator: nil, // TODO: port over generator
			}},
		}},
	}
}
