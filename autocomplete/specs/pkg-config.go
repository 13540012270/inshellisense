// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["pkg-config"] = model.Subcommand{
		Name:        []string{"pkg-config"},
		Description: `Return metainformation about installed libraries`,
		Args: []model.Arg{{
			Name:       "libraries...",
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"--mod-version"},
			Description: `Display the version information of the libraries specified on the command line`,
		}, {
			Name:        []string{"--version"},
			Description: `Display the version of pkg-config and terminates`,
		}, {
			Name:        []string{"--atleast-pkgconfig-version"},
			Description: `Require at least the given version of pkg-config`,
			Args: []model.Arg{{
				Name: "version",
			}},
		}, {
			Name:        []string{"--help"},
			Description: `Displays a help message and terminates`,
		}, {
			Name:        []string{"--print-errors"},
			Description: `Print errors if modules cannot be found or if an error occurs in parsing a .pc file`,
		}, {
			Name:        []string{"--short-errors"},
			Description: `Print short error messages`,
		}, {
			Name:        []string{"--silence-errors"},
			Description: `Print errors if modules cannot be found or if an error occurs in parsing a .pc file`,
		}, {
			Name:        []string{"--errors-to-stdout"},
			Description: `If printing errors, print them to stdout rather than the default stderr`,
		}, {
			Name:        []string{"--debug"},
			Description: `Print debugging information`,
		}, {
			Name:        []string{"--cflags"},
			Description: `Print pre-processor and compile flags required to compile the packages on the command line`,
		}, {
			Name:        []string{"--cflags-only-I"},
			Description: `Print parts of "--cflags" that define the header search path`,
		}, {
			Name:        []string{"--cflags-only-other"},
			Description: `Print parts of "--cflags" not covered by "--cflags-only-I"`,
		}, {
			Name:        []string{"--libs"},
			Description: `Print link flags required to compile the packages on the command line`,
		}, {
			Name:        []string{"--libs-only-L"},
			Description: `Print parts of "-libs" that define library search path`,
		}, {
			Name:        []string{"--libs-only-l"},
			Description: `Print parts of "-libs" that specify which libraries to link to`,
		}, {
			Name:        []string{"--libs-only-other"},
			Description: `Print parts of "-libs" not covered by "--libs-only-L" and "--libs-only-l"`,
		}, {
			Name:        []string{"--variable"},
			Description: `Return the value of a variable defined in a package's .pc file`,
			Args: []model.Arg{{
				Name: "variable-name",
			}},
		}, {
			Name:        []string{"--define-variable"},
			Description: `Set a global value for a variable, overriding the value in any .pc files`,
			Args: []model.Arg{{
				Name: "variable",
			}},
		}, {
			Name:        []string{"--print-variables"},
			Description: `Return a list of all variables defined in the package`,
		}, {
			Name:        []string{"--uninstalled"},
			Description: `Return successfully if any "-uninstalled" packages are being used, and return failure otherwise`,
		}, {
			Name:        []string{"--exists"},
			Description: `Test whether the packages on the command line exist`,
		}, {
			Name:        []string{"--atleast-version"},
			Description: `Test whether the packages on the command line exist and are at least the specified version`,
			Args: []model.Arg{{
				Name: "version",
			}},
		}, {
			Name:        []string{"--exact-version"},
			Description: `Test whether the packages on the command line exist and are exactly the specified version`,
			Args: []model.Arg{{
				Name: "version",
			}},
		}, {
			Name:        []string{"--max-version"},
			Description: `Test whether the packages on the command line exist and are at most the specified version`,
			Args: []model.Arg{{
				Name: "version",
			}},
		}, {
			Name:        []string{"--validate"},
			Description: `Check the syntax of a package's .pc file for validity`,
		}, {
			Name:        []string{"--msvc-syntax"},
			Description: `Output -l and -L flags in the form recognized by the Microsoft Visual C++ command-line compiler`,
		}, {
			Name:        []string{"--define-prefix"},
			Description: `Use the installed location of the .pc file to determine the prefix`,
		}, {
			Name:        []string{"--dont-define-prefix"},
			Description: `Use the specified prefix variable value defined in the .pc file as the prefix`,
		}, {
			Name:        []string{"--prefix-variable"},
			Description: `Set the name of the variable to be overridden instead of prefix when using --define-prefix`,
			Args: []model.Arg{{
				Name: "variable-name",
			}},
		}, {
			Name:        []string{"--static"},
			Description: `Output libraries suitable for static linking`,
		}, {
			Name:        []string{"--list-all"},
			Description: `List all modules found in the pkg-config path`,
		}, {
			Name:        []string{"--print-provides"},
			Description: `List all modules the given packages provides`,
		}, {
			Name:        []string{"--print-requires"},
			Description: `List all modules the given packages requires`,
		}, {
			Name:        []string{"--print-requires-private"},
			Description: `List all modules the given packages requires for static linking`,
		}},
	}
}
