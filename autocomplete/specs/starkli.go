// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["starkli"] = model.Subcommand{
		Name:        []string{"starkli"},
		Description: `Starkli, a âš¡ blazing âš¡ fast âš¡ CLI tool for Starknet powered by ðŸ¦€ starknet-rs ðŸ¦€`,
		Subcommands: []model.Subcommand{{
			Name:        []string{"account"},
			Description: `Account management commands`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"fetch"},
				Description: `Fetch account config from an already deployed account contract`,
				Args: []model.Arg{{
					Name:        "ADDRESS",
					Description: `Contract address`,
				}},
				Options: []model.Option{{
					Name:        []string{"--rpc"},
					Description: `Starknet JSON-RPC endpoint`,
					Args: []model.Arg{{
						Name: "RPC",
					}},
				}, {
					Name:        []string{"--network"},
					Description: `Starknet network`,
					Args: []model.Arg{{
						Name:        "NETWORK",
						Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
					}},
				}, {
					Name:        []string{"--force"},
					Description: `Overwrite the file if it already exists`,
				}, {
					Name:        []string{"--output"},
					Description: `Path to save the account config file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "OUTPUT",
					}},
				}, {
					Name:        []string{"--log-traffic"},
					Description: `Log raw request/response traffic of providers`,
				}, {
					Name:        []string{"-h", "--help"},
					Description: `Print help`,
				}},
			}, {
				Name:        []string{"deploy"},
				Description: `Deploy account contract with a DeployAccount transaction`,
				Args: []model.Arg{{
					Templates:   []model.Template{model.TemplateFilepaths},
					Name:        "FILE",
					Description: `Path to the account config file`,
				}},
				Options: []model.Option{{
					Name:        []string{"--rpc"},
					Description: `Starknet JSON-RPC endpoint`,
					Args: []model.Arg{{
						Name: "RPC",
					}},
				}, {
					Name:        []string{"--network"},
					Description: `Starknet network`,
					Args: []model.Arg{{
						Name:        "NETWORK",
						Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
					}},
				}, {
					Name:        []string{"--keystore"},
					Description: `Path to keystore JSON file`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "KEYSTORE",
					}},
				}, {
					Name:        []string{"--keystore-password"},
					Description: `Supply keystore password from command line option instead of prompt`,
					Args: []model.Arg{{
						Name: "keystore password",
					}},
				}, {
					Name:        []string{"--private-key"},
					Description: `Private key in hex in plain text`,
					Args: []model.Arg{{
						Name: "PRIVATE_KEY",
					}},
				}, {
					Name:        []string{"--max-fee"},
					Description: `Maximum transaction fee in Ether (18 decimals)`,
					Args: []model.Arg{{
						Name: "MAX_FEE",
					}},
				}, {
					Name:        []string{"--max-fee-raw"},
					Description: `Maximum transaction fee in Wei`,
					Args: []model.Arg{{
						Name: "MAX_FEE_RAW",
					}},
				}, {
					Name:        []string{"--estimate-only"},
					Description: `Only estimate transaction fee without sending transaction`,
				}, {
					Name:        []string{"--log-traffic"},
					Description: `Log raw request/response traffic of providers`,
				}, {
					Name:        []string{"-h", "--help"},
					Description: `Print help`,
				}},
			}, {
				Name:        []string{"oz"},
				Description: `Create and manage OpenZeppelin account contracts`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Print help`,
				}},
				Subcommands: []model.Subcommand{{
					Name:        []string{"init"},
					Description: `Create a new account configuration without actually deploying`,
				}},
			}},
		}, {
			Name:        []string{"block"},
			Description: `Get Starknet block`,
			Args: []model.Arg{{
				Name:        "BLOCK_ID",
				Description: `Block number, hash, or tag (latest/pending)`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--full"},
				Description: `Fetch full transactions instead of hashes only`,
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"block-hash"},
			Description: `Get latest block hash`,
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"block-number"},
			Description: `Get latest block number`,
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"block-time"},
			Description: `Get Starknet block timestamp only`,
			Args: []model.Arg{{
				Name:        "BLOCK_ID",
				Description: `Block number, hash, or tag (latest/pending)`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--unix"},
				Description: `Show block time in Unix timestamp format`,
			}, {
				Name:        []string{"--rfc2822"},
				Description: `Show block time in RFC 2822 format`,
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"call"},
			Description: `Call contract functions without sending transactions`,
			Args: []model.Arg{{
				Name:        "CONTRACT_ADDRESS",
				Description: `Contract address`,
			}, {
				Name:        "SELECTOR",
				Description: `Name of the function being called`,
			}, {
				Name:        "CALLDATA",
				Description: `Raw function call arguments`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"chain-id"},
			Description: `Get Starknet network ID`,
			Args: []model.Arg{{
				Name:        "BLOCK_ID",
				Description: `Block number, hash, or tag (latest/pending)`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--no-decode"},
				Description: `Do not show the decoded text`,
			}, {
				Name:        []string{"--dec"},
				Description: `Display the decimal instead of hexadecimal representation`,
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"class-at"},
			Description: `Get contract class deployed at a certain address`,
			Args: []model.Arg{{
				Name:        "ADDRESS",
				Description: `Contract address`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"class-by-hash"},
			Description: `Get contract class by hash`,
			Args: []model.Arg{{
				Name:        "HASH",
				Description: `Class hash`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"class-hash"},
			Description: `Calculate class hash from any contract artifacts (Sierra, casm, legacy)`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "FILE",
				Description: `Path to contract artifact file`,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"class-hash-at"},
			Description: `Get contract class hash deployed at a certain address`,
			Args: []model.Arg{{
				Name:        "ADDRESS",
				Description: `Contract address`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"completions"},
			Description: `Generate shell completions script`,
		}, {
			Name:        []string{"declare"},
			Description: `Declare a contract class`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "FILE",
				Description: `Path to contract artifact file`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--keystore"},
				Description: `Path to keystore JSON file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "KEYSTORE",
				}},
			}, {
				Name:        []string{"--keystore-password"},
				Description: `Supply keystore password from command line option instead of prompt`,
				Args: []model.Arg{{
					Name: "KEYSTORE_PASSWORD",
				}},
			}, {
				Name:        []string{"--private-key"},
				Description: `Private key in hex in plain text`,
				Args: []model.Arg{{
					Name: "PRIVATE_KEY",
				}},
			}, {
				Name:        []string{"--compiler-version"},
				Description: `Statically-linked Sierra compiler version`,
				Args: []model.Arg{{
					Name:        "COMPILER_VERSION",
					Suggestions: []model.Suggestion{{Name: []string{`2.0.1`}}},
				}},
			}, {
				Name:        []string{"--casm-hash"},
				Description: `Override Sierra compilation and use CASM hash directly`,
				Args: []model.Arg{{
					Name: "CASM_HASH",
				}},
			}, {
				Name:        []string{"--account"},
				Description: `Path to account config JSON file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "ACCOUNT",
				}},
			}, {
				Name:        []string{"--max-fee"},
				Description: `Maximum transaction fee in Ether (18 decimals)`,
				Args: []model.Arg{{
					Name: "MAX_FEE",
				}},
			}, {
				Name:        []string{"--max-fee-raw"},
				Description: `Maximum transaction fee in Wei`,
				Args: []model.Arg{{
					Name: "MAX_FEE_RAW",
				}},
			}, {
				Name:        []string{"--estimate-only"},
				Description: `Only estimate transaction fee without sending transaction`,
			}, {
				Name:        []string{"--watch"},
				Description: `Wait for the transaction to confirm`,
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"deploy"},
			Description: `Deploy contract via the Universal Deployer Contract`,
			Args: []model.Arg{{
				Name:        "CLASS_HASH",
				Description: `Class hash`,
			}, {
				Name:        "CTOR_ARGS",
				Description: `Raw constructor arguments`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--keystore"},
				Description: `Path to keystore JSON file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "KEYSTORE",
				}},
			}, {
				Name:        []string{"--keystore-password"},
				Description: `Supply keystore password from command line option instead of prompt`,
				Args: []model.Arg{{
					Name: "KEYSTORE_PASSWORD",
				}},
			}, {
				Name:        []string{"--private-key"},
				Description: `Private key in hex in plain text`,
				Args: []model.Arg{{
					Name: "PRIVATE_KEY",
				}},
			}, {
				Name:        []string{"--not-unique"},
				Description: `Do not derive contract address from deployer address`,
			}, {
				Name:        []string{"--account"},
				Description: `Path to account config JSON file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "ACCOUNT",
				}},
			}, {
				Name:        []string{"--max-fee"},
				Description: `Maximum transaction fee in Ether (18 decimals)`,
				Args: []model.Arg{{
					Name: "MAX_FEE",
				}},
			}, {
				Name:        []string{"--max-fee-raw"},
				Description: `Maximum transaction fee in Wei`,
				Args: []model.Arg{{
					Name: "MAX_FEE_RAW",
				}},
			}, {
				Name:        []string{"--estimate-only"},
				Description: `Only estimate transaction fee without sending transaction`,
			}, {
				Name:        []string{"--salt"},
				Description: `Use the given salt to compute contract deploy address`,
				Args: []model.Arg{{
					Name: "SALT",
				}},
			}, {
				Name:        []string{"--watch"},
				Description: `Wait for the transaction to confirm`,
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"invoke"},
			Description: `Send an invoke transaction from an account contract`,
			Args: []model.Arg{{
				Name:        "CALLS",
				Description: `One or more contract calls. See documentation for more details`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--keystore"},
				Description: `Path to keystore JSON file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "KEYSTORE",
				}},
			}, {
				Name:        []string{"--keystore-password"},
				Description: `Supply keystore password from command line option instead of prompt`,
				Args: []model.Arg{{
					Name: "KEYSTORE_PASSWORD",
				}},
			}, {
				Name:        []string{"--private-key"},
				Description: `Private key in hex in plain text`,
				Args: []model.Arg{{
					Name: "PRIVATE_KEY",
				}},
			}, {
				Name:        []string{"--account"},
				Description: `Path to account config JSON file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "ACCOUNT",
				}},
			}, {
				Name:        []string{"--max-fee"},
				Description: `Maximum transaction fee in Ether (18 decimals)`,
				Args: []model.Arg{{
					Name: "MAX_FEE",
				}},
			}, {
				Name:        []string{"--max-fee-raw"},
				Description: `Maximum transaction fee in Wei`,
				Args: []model.Arg{{
					Name: "MAX_FEE_RAW",
				}},
			}, {
				Name:        []string{"--estimate-only"},
				Description: `Only estimate transaction fee without sending transaction`,
			}, {
				Name:        []string{"--watch"},
				Description: `Wait for the transaction to confirm`,
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"mont"},
			Description: `Print the montgomery representation of a field element`,
			Args: []model.Arg{{
				Name:        "FELT",
				Description: `Encoded string value in felt, in decimal or hexadecimal representation`,
			}},
			Options: []model.Option{{
				Name:        []string{"--hex"},
				Description: `Emit array elements in hexadecimal format`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"nonce"},
			Description: `Get nonce for a certain contract`,
			Args: []model.Arg{{
				Name:        "ADDRESS",
				Description: `Contract address`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"parse-cairo-string"},
			Description: `Decode string from felt with the Cairo short string representation`,
			Args: []model.Arg{{
				Name:        "FELT",
				Description: `Encoded string value in felt, in decimal or hexadecimal representation`,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"selector"},
			Description: `Calculate selector from name`,
			Args: []model.Arg{{
				Name:        "NAME",
				Description: `Selector name`,
			}},
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"signer"},
			Description: `Signer management commands`,
			Options: []model.Option{{
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"keystore"},
				Description: `Keystore management commands`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Print help`,
				}},
				Subcommands: []model.Subcommand{{
					Name:        []string{"new"},
					Description: `Randomly generate a new keystore`,
					Args: []model.Arg{{
						Templates:   []model.Template{model.TemplateFilepaths},
						Name:        "FILE",
						Description: `Path to save the JSON keystore`,
					}},
					Options: []model.Option{{
						Name:        []string{"--password"},
						Description: `Supply password from command line option instead of prompt`,
						Args: []model.Arg{{
							Name: "PASSWORD",
						}},
					}, {
						Name:        []string{"--force"},
						Description: `Overwrite the file if it already exists`,
					}, {
						Name:        []string{"-h", "--help"},
						Description: `Print help`,
					}},
				}, {
					Name:        []string{"from-key"},
					Description: `Create a keystore file from an existing private key`,
					Args: []model.Arg{{
						Templates:   []model.Template{model.TemplateFilepaths},
						Name:        "FILE",
						Description: `Path to save the JSON keystore`,
					}},
					Options: []model.Option{{
						Name:        []string{"--force"},
						Description: `Overwrite the file if it already exists`,
					}, {
						Name:        []string{"--private-key-stdin"},
						Description: `Take the private key from stdin instead of prompt`,
					}, {
						Name:        []string{"--password"},
						Description: `Supply password from command line option instead of prompt`,
						Args: []model.Arg{{
							Name: "PASSWORD",
						}},
					}, {
						Name:        []string{"-h", "--help"},
						Description: `Print help`,
					}},
				}, {
					Name:        []string{"inspect"},
					Description: `Check the public key of an existing keystore file`,
					Args: []model.Arg{{
						Templates:   []model.Template{model.TemplateFilepaths},
						Name:        "FILE",
						Description: `Path to the JSON keystore`,
					}},
					Options: []model.Option{{
						Name:        []string{"--password"},
						Description: `Supply password from command line option instead of prompt`,
						Args: []model.Arg{{
							Name: "PASSWORD",
						}},
					}, {
						Name:        []string{"--raw"},
						Description: `Print the public key only`,
					}, {
						Name:        []string{"-h", "--help"},
						Description: `Print help`,
					}},
				}, {
					Name:        []string{"inspect-private"},
					Description: `Check the private key of an existing keystore file`,
					Args: []model.Arg{{
						Templates:   []model.Template{model.TemplateFilepaths},
						Name:        "FILE",
						Description: `Path to the JSON keystore`,
					}},
					Options: []model.Option{{
						Name:        []string{"--password"},
						Description: `Supply password from command line option instead of prompt`,
						Args: []model.Arg{{
							Name: "PASSWORD",
						}},
					}, {
						Name:        []string{"--raw"},
						Description: `Print the private key only`,
					}, {
						Name:        []string{"-h", "--help"},
						Description: `Print help`,
					}},
				}},
			}, {
				Name:        []string{"gen-keypair"},
				Description: `Randomly generate a new key pair`,
			}},
		}, {
			Name:        []string{"state-update"},
			Description: `Get state update from a certain block`,
			Args: []model.Arg{{
				Name:        "BLOCK_ID",
				Description: `Block number, hash, or tag (latest/pending)`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"storage"},
			Description: `Get storage value for a slot at a contract`,
			Args: []model.Arg{{
				Name:        "ADDRESS",
				Description: `Contract address`,
			}, {
				Name:        "KEY",
				Description: `Storage key`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"syncing"},
			Description: `Get node syncing status`,
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"to-cairo-string"},
			Description: `Encode string into felt with the Cairo short string representation`,
			Args: []model.Arg{{
				Name:        "TEXT",
				Description: `Text to be encoded in felt`,
			}},
			Options: []model.Option{{
				Name:        []string{"--dec"},
				Description: `Display the encoded value in decimal representation`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"transaction"},
			Description: `Get Starknet transaction by hash`,
			Args: []model.Arg{{
				Name:        "HASH",
				Description: `Transaction hash`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}, {
			Name:        []string{"transaction-receipt"},
			Description: `Get transaction receipt by hash`,
			Args: []model.Arg{{
				Name:        "HASH",
				Description: `Transaction hash`,
			}},
			Options: []model.Option{{
				Name:        []string{"--rpc"},
				Description: `Starknet JSON-RPC endpoint`,
				Args: []model.Arg{{
					Name: "RPC",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Starknet network`,
				Args: []model.Arg{{
					Name:        "NETWORK",
					Suggestions: []model.Suggestion{{Name: []string{`mainnet`}}, {Name: []string{`goerli-1`}}, {Name: []string{`goerli-2`}}, {Name: []string{`integration`}}},
				}},
			}, {
				Name:        []string{"--log-traffic"},
				Description: `Log raw request/response traffic of providers`,
			}, {
				Name:        []string{"-h", "--help"},
				Description: `Print help`,
			}},
		}},
	}
}
