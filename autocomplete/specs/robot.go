// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["robot"] = model.Subcommand{
		Name:        []string{"robot"},
		Description: `CLI for running Robot Framework automation tests`,
		Args: []model.Arg{{
			Name:       "robot script",
			Generator:  nil, // TODO: port over generator
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-h", "-?", "--help"},
			Description: `Print usage instructions`,
		}, {
			Name:        []string{"--rpa"},
			Description: `Turn on the generic automation mode. Mainly affects terminology so that "test" is replaced with "task" in logs and reports`,
		}, {
			Name:        []string{"-F", "--extension"},
			Description: `Parse only files with this extension when executing a directory`,
			Args: []model.Arg{{
				Name:        "extension",
				Description: `File extensions divided by colon`,
				Suggestions: []model.Suggestion{{Name: []string{`txt`}}, {Name: []string{`robot:txt`}}},
			}},
		}, {
			Name:        []string{"-N", "--name"},
			Description: `Set a name of the top level suite`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"-D", "--doc"},
			Description: `Set a documentation of the top level suite`,
		}, {
			Name:        []string{"-M", "--metadata"},
			Description: `Set metadata of the top level suite`,
			Args: []model.Arg{{
				Name: "name:value",
			}},
		}, {
			Name:        []string{"-G", "--settag"},
			Description: `Sets given tag to all executed tests`,
			Args: []model.Arg{{
				Name: "tag",
			}},
		}, {
			Name:        []string{"-t", "--test"},
			Description: `Select tests by name or by long name containing also parent suite name like "Parent.Test"`,
			Args: []model.Arg{{
				Name:      "name",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--task"},
			Description: `Alias to --test. Especially applicable with --rpa`,
			Args: []model.Arg{{
				Name:      "name",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-s", "--suite"},
			Description: `Select suites by name`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"-i", "--include"},
			Description: `Select test cases by tag`,
			Args: []model.Arg{{
				Name:      "tag",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-e", "--exclude"},
			Description: `Select test cases not to run by tag`,
			Args: []model.Arg{{
				Name:      "tag",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-R", "--rerunfailed"},
			Description: `Select failed tests from an earlier output file to be re-executed`,
			Args: []model.Arg{{
				Name:      "output file",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-S", "--rerunfailedsuites"},
			Description: `Select failed suites from an earlier output file to be re-executed`,
			Args: []model.Arg{{
				Name:      "output file",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--runemptysuite"},
			Description: `Executes suite even if it contains no tests`,
		}, {
			Name:        []string{"--skip"},
			Description: `Tests having given tag will be skipped`,
			Args: []model.Arg{{
				Name:      "tag",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--skiponfailure"},
			Description: `Tests having given tag will be skipped if they fail`,
			Args: []model.Arg{{
				Name:      "tag",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-v", "--variable"},
			Description: `Set variables in the test data`,
			Args: []model.Arg{{
				Name:      "variable",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-V", "--variablefile"},
			Description: `Python or YAML file file to read variables from`,
			Args: []model.Arg{{
				Name:      "file",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-d", "--outputdir"},
			Description: `Where to create output files. The default is the directory where tests are run from`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "directory",
			}},
		}, {
			Name:        []string{"-o", "--output"},
			Description: `XML output file relative to --outputdir unless given as an absolute path. Default: output.xml`,
			Args: []model.Arg{{
				Name:        "file",
				Suggestions: []model.Suggestion{{Name: []string{`output.xml`}}},
			}},
		}, {
			Name:        []string{"-l", "--log"},
			Description: `HTML log file. Can be disabled by giving a special value "NONE". Default: log.html`,
			Args: []model.Arg{{
				Name:        "file",
				Suggestions: []model.Suggestion{{Name: []string{`log.html`}}, {Name: []string{`NONE`}}},
			}},
		}, {
			Name:        []string{"-r", "--report"},
			Description: `HTML report file. Can be disabled with "NONE" similarly as --log. Default: report.html`,
			Args: []model.Arg{{
				Name:        "file",
				Suggestions: []model.Suggestion{{Name: []string{`report.html`}}, {Name: []string{`NONE`}}},
			}},
		}, {
			Name:        []string{"-x", "--xunit"},
			Description: `XUnit compatible result file. Not created unless this option is specified`,
			Args: []model.Arg{{
				Name:        "file",
				Suggestions: []model.Suggestion{{Name: []string{`xunit.xml`}}},
			}},
		}, {
			Name:        []string{"-b", "--debugfile"},
			Description: `Debug file written during execution. Not created unless this option is specified`,
			Args: []model.Arg{{
				Name: "file",
			}},
		}, {
			Name:        []string{"-T", "--timestampoutputs"},
			Description: `Adds timestamp in a format "YYYYMMDD-hhmmss" to all generated output files between their basename and extension`,
		}, {
			Name:        []string{"--splitlog"},
			Description: `Split the log file into smaller pieces that open in browsers transparently`,
		}, {
			Name:        []string{"--logtitle"},
			Description: `Title for the generated log file. The default title is "<SuiteName> Log."`,
			Args: []model.Arg{{
				Name: "title",
			}},
		}, {
			Name:        []string{"--reporttitle"},
			Description: `Title for the generated report file. The default title is "<SuiteName> Report"`,
			Args: []model.Arg{{
				Name: "title",
			}},
		}, {
			Name:        []string{"--reportbackground"},
			Description: `Background colors to use in the report file. Given in format "passed:failed:skipped" where the ":skipped" part can be omitted`,
			Args: []model.Arg{{
				Name: "colors",
			}},
		}, {
			Name:        []string{"--maxerrorlines"},
			Description: `Maximum number of error message lines to show in report when tests fail. Default is 40, minimum is 10 and "NONE" can be used to show the full message`,
			Args: []model.Arg{{
				Name: "lines",
				Suggestions: []model.Suggestion{{
					Name:        []string{`40`},
					Description: `Default number of lines`,
				}, {
					Name:        []string{`10`},
					Description: `Minimum number of lines`,
				}, {
					Name:        []string{`NONE`},
					Description: `Unlimited number of lines. Shows the full message`,
				}},
			}},
		}, {
			Name:        []string{"--maxassignlength"},
			Description: `Maximum number of characters to show in log when variables are assigned. Zero or negative values can be used to avoid showing assigned values at all. Default is 200`,
			Args: []model.Arg{{
				Name: "characters",
				Suggestions: []model.Suggestion{{
					Name:        []string{`200`},
					Description: `Default number of characters`,
				}, {
					Name:        []string{`0`},
					Description: `No values at all`,
				}},
			}},
		}, {
			Name:        []string{"-L", "--loglevel"},
			Description: `Threshold level for logging`,
			Args: []model.Arg{{
				Name: "level",
				Suggestions: []model.Suggestion{{
					Name: []string{`TRACE`},
				}, {
					Name: []string{`DEBUG`},
				}, {
					Name: []string{`INFO`},
				}, {
					Name: []string{`WARN`},
				}, {
					Name: []string{`NONE`},
				}},
			}},
		}, {
			Name:        []string{"--suitestatlevel"},
			Description: `How many levels to show in "Statistics by Suite" in log and report`,
			Args: []model.Arg{{
				Name: "level",
			}},
		}, {
			Name:        []string{"--tagstatinclude"},
			Description: `Include only matching tags in "Statistics by Tag" in log and report`,
			Args: []model.Arg{{
				Name:      "tag",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--tagstatexclude"},
			Description: `Exclude matching tags from "Statistics by Tag"`,
			Args: []model.Arg{{
				Name:      "tag",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--tagstatcombine"},
			Description: `Create combined statistics based on tags. These statistics are added into "Statistics by Tag"`,
			Args: []model.Arg{{
				Name:      "tags:name",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--tagdoc"},
			Description: `Add documentation to tags matching the given pattern`,
			Args: []model.Arg{{
				Name:      "pattern:doc",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--tagstatlink"},
			Description: `Add external links into "Statistics by Tag". Pattern can use "*", "?" and "[]" as wildcards`,
			Args: []model.Arg{{
				Name:      "pattern:link:title",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--expandkeywords"},
			Description: `Matching keywords will be automatically expanded in the log file`,
			Args: []model.Arg{{
				Name: "pattern",
				Suggestions: []model.Suggestion{{
					Name: []string{`name:<pattern>`},
				}, {
					Name: []string{`tag:<pattern>`},
				}},
			}},
		}, {
			Name:        []string{"--removekeywords"},
			Description: `Remove keyword data from the generated log file`,
			Args: []model.Arg{{
				Name: "pattern",
				Suggestions: []model.Suggestion{{
					Name:        []string{`all`},
					Description: `Remove data from all keywords`,
				}, {
					Name:        []string{`passed`},
					Description: `Remove data only from keywords in passed test cases and suites`,
				}, {
					Name:        []string{`for`},
					Description: `Remove passed iterations from for loops`,
				}, {
					Name:        []string{`while`},
					Description: `Remove passed iterations from while loops`,
				}, {
					Name:        []string{`wuks`},
					Description: `Remove all but the last failing keyword inside "BuiltIn.Wait Until Keyword Succeeds"`,
				}, {
					Name: []string{`name:<pattern>`},
				}, {
					Name: []string{`tag:<pattern>`},
				}},
			}},
		}, {
			Name:        []string{"--flattenkeywords"},
			Description: `Flattens matching keywords in the generated log file`,
			Args: []model.Arg{{
				Name: "pattern",
				Suggestions: []model.Suggestion{{
					Name:        []string{`for`},
					Description: `Flatten FOR loops fully`,
				}, {
					Name:        []string{`while`},
					Description: `Flatten WHILE loops fully`,
				}, {
					Name:        []string{`iteration`},
					Description: `Flatten FOR/WHILE loop iterations`,
				}, {
					Name: []string{`name:<pattern>`},
				}, {
					Name: []string{`tag:<pattern>`},
				}},
			}},
		}, {
			Name:        []string{"--listener"},
			Description: `A class for monitoring test execution. Gets notifications e.g. when tests start and end`,
			Args: []model.Arg{{
				Name: "class",
			}},
		}, {
			Name:        []string{"--nostatusrc"},
			Description: `Sets the return code to zero regardless of failures in test cases. Error codes are returned normally`,
		}, {
			Name:        []string{"--dryrun"},
			Description: `Sets the return code to zero regardless of failures in test cases. Error codes are returned normally`,
		}, {
			Name:        []string{"-X", "--exitonfailure"},
			Description: `Stops test execution if any test fails`,
		}, {
			Name:        []string{"--exitonerror"},
			Description: `Stops test execution if any error occurs when parsing test data, importing libraries, and so on`,
		}, {
			Name:        []string{"--skipteardownonexit"},
			Description: `Causes teardowns to be skipped if test execution is stopped prematurely`,
		}, {
			Name:        []string{"--randomize"},
			Description: `Randomizes the test execution order`,
			Args: []model.Arg{{
				Name: "type",
				Suggestions: []model.Suggestion{{
					Name:        []string{`all`},
					Description: `Randomizes both suites and tests`,
				}, {
					Name:        []string{`suites`},
					Description: `Randomizes suites`,
				}, {
					Name:        []string{`tests`},
					Description: `Randomizes tests`,
				}, {
					Name:        []string{`none`},
					Description: `No randomization (default)`,
				}},
			}},
		}, {
			Name:        []string{"--prerunmodifier"},
			Description: `Class to programmatically modify the suite structure before execution`,
			Args: []model.Arg{{
				Name: "class",
			}},
		}, {
			Name:        []string{"--prerebotmodifier"},
			Description: `Class to programmatically modify the result model before creating reports and logs`,
			Args: []model.Arg{{
				Name: "class",
			}},
		}, {
			Name:        []string{"--console"},
			Description: `How to report execution on the console`,
			Args: []model.Arg{{
				Name: "type",
				Suggestions: []model.Suggestion{{
					Name:        []string{`verbose`},
					Description: `Report every suite and test (default)`,
				}, {
					Name:        []string{`dotted`},
					Description: `Only show "." for passed test, "s" for skipped tests, and "F" for failed tests`,
				}, {
					Name:        []string{`quiet`},
					Description: `No output except for errors and warnings`,
				}, {
					Name:        []string{`none`},
					Description: `No output whatsoever`,
				}},
			}},
		}, {
			Name:        []string{"-.", "--dotted"},
			Description: `Shortcut for "--console dotted"`,
		}, {
			Name:        []string{"--quiet"},
			Description: `Shortcut for "--console quiet"`,
		}, {
			Name:        []string{"-W", "--consolewidth"},
			Description: `Width of the console output. Default is 78`,
			Args: []model.Arg{{
				Name: "chars",
				Suggestions: []model.Suggestion{{
					Name: []string{`78`},
				}},
			}},
		}, {
			Name:        []string{"-C", "--consolecolors"},
			Description: `Use colors on console output or not`,
			Args: []model.Arg{{
				Name: "option",
				Suggestions: []model.Suggestion{{
					Name:        []string{`auto`},
					Description: `Use colors when output not redirected (default)`,
				}, {
					Name:        []string{`on`},
					Description: `Always use colors`,
				}, {
					Name:        []string{`ansi`},
					Description: `Like "on" but use ANSI colors also on Windows`,
				}, {
					Name:        []string{`off`},
					Description: `Disable colors altogether`,
				}},
			}},
		}, {
			Name:        []string{"-K", "--consolemarkers"},
			Description: `Show markers on the console when top level keywords in a test case end`,
			Args: []model.Arg{{
				Name: "option",
				Suggestions: []model.Suggestion{{
					Name: []string{`auto`},
				}, {
					Name: []string{`on`},
				}, {
					Name: []string{`off`},
				}},
			}},
		}, {
			Name:        []string{"-P", "--pythonpath"},
			Description: `Additional locations (directories, ZIPs) where to search libraries and other extensions when they are imported`,
			Args: []model.Arg{{
				Name:      "path",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-A", "--argumentfile"},
			Description: `Text file to read more arguments from. Use special path "STDIN" to read contents from the standard input stream`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--version"},
			Description: `Print version information`,
		}},
	}
}
