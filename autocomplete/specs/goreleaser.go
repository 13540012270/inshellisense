// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["goreleaser"] = model.Subcommand{
		Name:        []string{"goreleaser"},
		Description: `Deliver Go binaries as fast and easily as possible`,
		Options: []model.Option{{
			Name:         []string{"--debug"},
			Description:  `Enable verbose mode`,
			IsPersistent: true,
		}, {
			Name:         []string{"--verbose"},
			Description:  `Enable verbose mode`,
			IsPersistent: true,
		}, {
			Name:         []string{"--help", "-h"},
			Description:  `Display help`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"b", "build"},
			Description: `Builds the current project`,
			Options: []model.Option{{
				Name:        []string{"--clean"},
				Description: `Remove the dist folder before building`,
			}, {
				Name:        []string{"--config", "-f"},
				Description: `Load configuration from file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--deprecated"},
				Description: `Force print the deprecation message - tests only`,
			}, {
				Name:        []string{"--id"},
				Description: `Builds only the specified build ids`,
				Args: []model.Arg{{
					Name: "id",
				}},
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Copy the binary to the path after the build. Only taken into account when using --single-target and a single id (either with --id or if configuration only has one build)`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "output",
				}},
			}, {
				Name:        []string{"--parallelism", "-p"},
				Description: `Amount tasks to run concurrently (default: number of CPUs)`,
				Args: []model.Arg{{
					Name: "parallelism",
				}},
			}, {
				Name:        []string{"--rm-dist"},
				Description: `Remove the dist folder before building`,
			}, {
				Name:        []string{"--single-target"},
				Description: `Builds only for current GOOS and GOARCH, regardless of what's set in the configuration file`,
			}, {
				Name:        []string{"--skip-before"},
				Description: `Skips global before hooks`,
			}, {
				Name:        []string{"--skip-post-hooks"},
				Description: `Skips all post-build hooks`,
			}, {
				Name:        []string{"--skip-validate"},
				Description: `Skips several sanity checks`,
			}, {
				Name:        []string{"--snapshot"},
				Description: `Generate an unversioned snapshot build, skipping all validations`,
			}, {
				Name:        []string{"--timeout"},
				Description: `Timeout to the entire build process`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}},
		}, {
			Name:        []string{"c", "check"},
			Description: `Checks if configuration is valid`,
			Options: []model.Option{{
				Name:        []string{"--config", "-f"},
				Description: `Configuration file(s) to check`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--deprecated"},
				Description: `Force print the deprecation message - tests only`,
			}, {
				Name:        []string{"--quiet", "-q"},
				Description: `Quiet mode: no output`,
			}},
		}, {
			Name:        []string{"completion"},
			Description: `Generate the autocompletion script for the specified shell`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"bash"},
				Description: `Generate the autocompletion script for bash`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"fish"},
				Description: `Generate the autocompletion script for fish`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"powershell"},
				Description: `Generate the autocompletion script for powershell`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"zsh"},
				Description: `Generate the autocompletion script for zsh`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}},
		}, {
			Name:        []string{"hc", "healthcheck"},
			Description: `Checks if needed tools are installed`,
			Options: []model.Option{{
				Name:        []string{"--config", "-f"},
				Description: `Configuration file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--quiet", "-q"},
				Description: `Quiet mode: no output`,
			}},
		}, {
			Name:        []string{"i", "init"},
			Description: `Generates a .goreleaser.yaml file`,
			Options: []model.Option{{
				Name:        []string{"--config", "-f"},
				Description: `Load configuration from file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}},
		}, {
			Name:        []string{"schema", "jsonschema"},
			Description: `Outputs goreleaser's JSON schema`,
			Options: []model.Option{{
				Name:        []string{"--output", "-o"},
				Description: `Where to save the JSONSchema file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "output",
				}},
			}},
		}, {
			Name:        []string{"r", "release"},
			Description: `Releases the current project`,
			Options: []model.Option{{
				Name:        []string{"--auto-snapshot"},
				Description: `Automatically sets --snapshot if the repository is dirty`,
			}, {
				Name:        []string{"--clean"},
				Description: `Removes the dist folder`,
			}, {
				Name:        []string{"--config", "-f"},
				Description: `Load configuration from file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "config",
				}},
			}, {
				Name:        []string{"--deprecated"},
				Description: `Force print the deprecation message - tests only`,
			}, {
				Name:        []string{"--fail-fast"},
				Description: `Whether to abort the release publishing on the first error`,
			}, {
				Name:        []string{"--parallelism", "-p"},
				Description: `Amount tasks to run concurrently (default: number of CPUs)`,
				Args: []model.Arg{{
					Name: "parallelism",
				}},
			}, {
				Name:        []string{"--release-footer"},
				Description: `Load custom release notes footer from a markdown file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "release-footer",
				}},
			}, {
				Name:        []string{"--release-footer-tmpl"},
				Description: `Load custom release notes footer from a templated markdown file (overrides --release-footer)`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "release-footer-tmpl",
				}},
			}, {
				Name:        []string{"--release-header"},
				Description: `Load custom release notes header from a markdown file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "release-header",
				}},
			}, {
				Name:        []string{"--release-header-tmpl"},
				Description: `Load custom release notes header from a templated markdown file (overrides --release-header)`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "release-header-tmpl",
				}},
			}, {
				Name:        []string{"--release-notes"},
				Description: `Load custom release notes from a markdown file (will skip GoReleaser changelog generation)`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "release-notes",
				}},
			}, {
				Name:        []string{"--release-notes-tmpl"},
				Description: `Load custom release notes from a templated markdown file (overrides --release-notes)`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "release-notes-tmpl",
				}},
			}, {
				Name:        []string{"--rm-dist"},
				Description: `Removes the dist folder`,
			}, {
				Name:        []string{"--skip-announce"},
				Description: `Skips announcing releases (implies --skip-validate)`,
			}, {
				Name:        []string{"--skip-before"},
				Description: `Skips global before hooks`,
			}, {
				Name:        []string{"--skip-docker"},
				Description: `Skips Docker Images/Manifests builds`,
			}, {
				Name:        []string{"--skip-ko"},
				Description: `Skips Ko builds`,
			}, {
				Name:        []string{"--skip-publish"},
				Description: `Skips publishing artifacts (implies --skip-announce)`,
			}, {
				Name:        []string{"--skip-sbom"},
				Description: `Skips cataloging artifacts`,
			}, {
				Name:        []string{"--skip-sign"},
				Description: `Skips signing artifacts`,
			}, {
				Name:        []string{"--skip-validate"},
				Description: `Skips git checks`,
			}, {
				Name:        []string{"--snapshot"},
				Description: `Generate an unversioned snapshot release, skipping all validations and without publishing any artifacts (implies --skip-publish, --skip-announce and --skip-validate)`,
			}, {
				Name:        []string{"--timeout"},
				Description: `Timeout to the entire release process`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}},
		}, {
			Name:        []string{"help"},
			Description: `Help about any command`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"b", "build"},
				Description: `Builds the current project`,
			}, {
				Name:        []string{"c", "check"},
				Description: `Checks if configuration is valid`,
			}, {
				Name:        []string{"completion"},
				Description: `Generate the autocompletion script for the specified shell`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"bash"},
					Description: `Generate the autocompletion script for bash`,
				}, {
					Name:        []string{"fish"},
					Description: `Generate the autocompletion script for fish`,
				}, {
					Name:        []string{"powershell"},
					Description: `Generate the autocompletion script for powershell`,
				}, {
					Name:        []string{"zsh"},
					Description: `Generate the autocompletion script for zsh`,
				}},
			}, {
				Name:        []string{"hc", "healthcheck"},
				Description: `Checks if needed tools are installed`,
			}, {
				Name:        []string{"i", "init"},
				Description: `Generates a .goreleaser.yaml file`,
			}, {
				Name:        []string{"schema", "jsonschema"},
				Description: `Outputs goreleaser's JSON schema`,
			}, {
				Name:        []string{"r", "release"},
				Description: `Releases the current project`,
			}},
		}},
	}
}
