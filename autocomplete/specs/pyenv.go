// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["pyenv"] = model.Subcommand{
		Name:        []string{"pyenv"},
		Description: `Pyenv`,
		Args:        []model.Arg{{}},
		Options: []model.Option{{
			Name:        []string{"-h", "--help"},
			Description: `Output usage information`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"commands"},
			Description: `Lists all available pyenv commands`,
		}, {
			Name:        []string{"local"},
			Description: `Sets a local application-specific Python version`,
			Args: []model.Arg{{
				Name:       "python version",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name: []string{"--unset"},
			}},
		}, {
			Name:        []string{"global"},
			Description: `Sets the global version of Python to be used in all shells`,
			Args: []model.Arg{{
				Name:      "python version",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"shell"},
			Description: `Sets a shell-specific Python version`,
			Args: []model.Arg{{
				Name: "python version",
			}},
			Options: []model.Option{{
				Name: []string{"--unset"},
			}},
		}, {
			Name:        []string{"install"},
			Description: `Install a Python version`,
			Args: []model.Arg{{
				Name:      "python version",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-l", "--list"},
				Description: `List all available versions`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Install even if the version appears to be installed already`,
			}, {
				Name:        []string{"-s", "--skip-existing"},
				Description: `Skip the installation if the version appears to be installed already`,
			}, {
				Name:        []string{"-k", "--keep"},
				Description: `Keep source tree in $PYENV_BUILD_ROOT after installation`,
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Verbose mode: print compilation status to stdout`,
			}, {
				Name:        []string{"-p", "--patch"},
				Description: `Apply a patch from stdin before building`,
			}, {
				Name:        []string{"-g", "--debug"},
				Description: `Build a debug version`,
			}},
		}, {
			Name:        []string{"uninstall"},
			Description: `Performs a deployment (default)`,
			Args: []model.Arg{{
				Name: "version",
			}},
			Options: []model.Option{{
				Name:        []string{"-f", "--force"},
				Description: `Attempt to remove the specified version without prompting for confirmation`,
			}},
		}, {
			Name:        []string{"rehash"},
			Description: `Performs a deployment (default)`,
		}, {
			Name:        []string{"version"},
			Description: `Displays the currently active Python version, along with information on how it was set`,
		}, {
			Name:        []string{"versions"},
			Description: `Lists all Python versions known to pyenv, and shows an asterisk next to the currently active version`,
			Options: []model.Option{{
				Name:        []string{"--bare"},
				Description: `Print only the version names, one per line`,
			}, {
				Name:        []string{"--skip-aliases"},
				Description: `Skip printing aliases`,
			}},
		}, {
			Name:        []string{"which"},
			Description: `Displays the full path to the executable that pyenv will invoke when you run the given command`,
			Args: []model.Arg{{
				Name: "command",
			}},
		}, {
			Name:        []string{"whence"},
			Description: `Lists all Python versions with the given command installed`,
			Args: []model.Arg{{
				Name: "command",
			}},
		}},
	}
}
