// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["systemctl"] = model.Subcommand{
		Name:        []string{"systemctl"},
		Description: ``,
		Options: []model.Option{{
			Name:        []string{"-h", "--help"},
			Description: `Show this help`,
		}, {
			Name:        []string{"--version"},
			Description: `Show package version`,
		}, {
			Name:        []string{"--system"},
			Description: `Connect to system manager`,
		}, {
			Name:        []string{"--user"},
			Description: `Connect to user service manager`,
		}, {
			Name:        []string{"-H", "--host"},
			Description: `Operate on remote host`,
			Args: []model.Arg{{
				Name: "[USER@]HOST",
			}},
		}, {
			Name:        []string{"-M", "--machine"},
			Description: `Operate on a local container`,
			Args: []model.Arg{{
				Name: "CONTAINER",
			}},
		}, {
			Name:        []string{"-t", "--type"},
			Description: `List units of a particular type`,
			Args: []model.Arg{{
				Name: "TYPE",
			}},
		}, {
			Name:        []string{"--state"},
			Description: `List units with particular LOAD or SUB or ACTIVE state`,
			Args: []model.Arg{{
				Name: "STATE",
			}},
			ExclusiveOn: []string{"--failed"},
		}, {
			Name:        []string{"--failed"},
			Description: `Shortcut for --state=failed`,
			ExclusiveOn: []string{"--state"},
		}, {
			Name:        []string{"-p", "--property"},
			Description: `Show only properties by this name`,
			Args: []model.Arg{{
				Name: "NAME",
			}},
			ExclusiveOn: []string{"-P"},
		}, {
			Name:        []string{"-P"},
			Description: `Equivalent to --value --property=NAME`,
			ExclusiveOn: []string{"-p", "--property", "--value"},
		}, {
			Name:        []string{"-a", "--all"},
			Description: `Show all properties/all units currently in memory, including dead/empty ones. To list all units installed on the system, use 'list-unit-files' instead`,
		}, {
			Name:        []string{"-l", "--full"},
			Description: `Don't ellipsize unit names on output`,
		}, {
			Name:        []string{"-r", "--recursive"},
			Description: `Show unit list of host and local containers`,
		}, {
			Name:        []string{"--reverse"},
			Description: `Show reverse dependencies with 'list-dependencies'`,
		}, {
			Name:        []string{"--with-dependencies"},
			Description: `Show unit dependencies with 'status', 'cat', 'list-units', and 'list-unit-files'`,
		}, {
			Name:        []string{"--job-mode"},
			Description: `Specify how to deal with already queued jobs, when queueing a new job`,
			Args: []model.Arg{{
				Name: "MODE",
			}},
		}, {
			Name:        []string{"-T", "--show-transaction"},
			Description: `When enqueuing a unit job, show full transaction`,
		}, {
			Name:        []string{"--show-types"},
			Description: `When showing sockets, explicitly show their type`,
		}, {
			Name:        []string{"--value"},
			Description: `When showing properties, only print the value`,
			ExclusiveOn: []string{"-P"},
		}, {
			Name:        []string{"--check-inhibitors"},
			Description: `Specify if checking inhibitors before shutting down sleeping or hibernating`,
			Args: []model.Arg{{
				Name: "MODE",
			}},
			ExclusiveOn: []string{"-i"},
		}, {
			Name:        []string{"-i"},
			Description: `Shortcut for --check-inhibitors=no`,
			ExclusiveOn: []string{"--check-inhibitors"},
		}, {
			Name:        []string{"--kill-who"},
			Description: `Whom to send signal to`,
			Args: []model.Arg{{
				Name: "WHO",
			}},
		}, {
			Name:        []string{"-s", "--signal"},
			Description: `Which signal to send`,
			Args: []model.Arg{{
				Name: "SIGNAL",
			}},
		}, {
			Name:        []string{"--what"},
			Description: `Which types of resources to remove`,
			Args: []model.Arg{{
				Name: "RESOURCES",
			}},
		}, {
			Name:        []string{"--now"},
			Description: `Start or stop unit after enabling or disabling it`,
		}, {
			Name:        []string{"--dry-run"},
			Description: `Only print what would be done`,
		}, {
			Name:        []string{"-q", "--quiet"},
			Description: `Supress output`,
		}, {
			Name:        []string{"--wait"},
			Description: `For (re)start, wait until service stopped again. For is-system-running, wait until startup is completed`,
		}, {
			Name:        []string{"--no-block"},
			Description: `Do not wait until operation finished`,
		}, {
			Name:        []string{"--no-wall"},
			Description: `Don't send wall message before halt/power-off/reboot`,
		}, {
			Name:        []string{"--no-reload"},
			Description: `Don't reload daemon after en-/dis-abling unit files`,
		}, {
			Name:        []string{"--legend"},
			Description: `Enable/disable the legend (column headers and hints)`,
			Args: []model.Arg{{
				Name:        "BOOL",
				Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
			}},
		}, {
			Name:        []string{"--no-pager"},
			Description: `Do not pipe output into a pager`,
		}, {
			Name:        []string{"--no-ask-password"},
			Description: `Do not ask for system passwords`,
		}, {
			Name:        []string{"--global"},
			Description: `Edit/enable/disable/mask default user unit files globally`,
		}, {
			Name:        []string{"--runtime"},
			Description: `Edit/enable/disable/mask unit files temporarily until next reboot`,
		}, {
			Name:        []string{"-f", "--force"},
			Description: `When enabling unit files, override existing symlinks. When shutting down, execute action immediately`,
		}, {
			Name:        []string{"--preset-mode"},
			Description: `Apply only enable, only disable, or all presets`,
			Args: []model.Arg{{
				Name: "MODE",
			}},
		}, {
			Name:        []string{"--root"},
			Description: `Edit/enable/disable/mask unit files in the specified root directory`,
			Args: []model.Arg{{
				Name: "PATH",
			}},
		}, {
			Name:        []string{"-n", "--lines"},
			Description: `Number of journal entries to show`,
			Args: []model.Arg{{
				Name: "N",
			}},
		}, {
			Name:        []string{"-o", "--output"},
			Description: `Change journal output mode`,
			Args: []model.Arg{{
				Name:        "MODE",
				Suggestions: []model.Suggestion{{Name: []string{`short`}}, {Name: []string{`short-precise`}}, {Name: []string{`short-iso`}}, {Name: []string{`short-iso-precise`}}, {Name: []string{`short-full`}}, {Name: []string{`short-monotonic`}}, {Name: []string{`short-unix`}}, {Name: []string{`verbose`}}, {Name: []string{`export`}}, {Name: []string{`json`}}, {Name: []string{`json-pretty`}}, {Name: []string{`json-sse`}}, {Name: []string{`cat`}}},
			}},
		}, {
			Name:        []string{"--firmware-setup"},
			Description: `Tell the firmware to show the setup menu on next boot`,
		}, {
			Name:        []string{"--boot-loader-menu"},
			Description: `Boot into boot loader menu on next boot`,
			Args: []model.Arg{{
				Name: "TIME",
			}},
		}, {
			Name:        []string{"--boot-loader-entry"},
			Description: `Boot into a specific boot loader entry on next boot`,
			Args: []model.Arg{{
				Name: "NAME",
			}},
		}, {
			Name:        []string{"--plain"},
			Description: `Print unit dependencies as a list instead of a tree`,
		}, {
			Name:        []string{"--timestamp"},
			Description: `Change format of printed timestamps`,
			Args: []model.Arg{{
				Name:        "FORMAT",
				Suggestions: []model.Suggestion{{Name: []string{`pretty`}}, {Name: []string{`unix`}}, {Name: []string{`us`}}, {Name: []string{`utc`}}, {Name: []string{`us+utc`}}},
			}},
		}, {
			Name:        []string{"--read-only"},
			Description: `Create read-only bind mount`,
		}, {
			Name:        []string{"--mkdir"},
			Description: `Create directory before mounting, if missing`,
		}, {
			Name:        []string{"--marked"},
			Description: `Restart/reload previously marked units`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"list-units"},
			Description: `List units currently in memory`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"list-sockets"},
			Description: `List socket units currently in memory ordered by address`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"list-timers"},
			Description: `List timer units currently in memory ordered by next elapse`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"is-active"},
			Description: `Check whether units are active`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"is-failed"},
			Description: `Check whether units are failed`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"status"},
			Description: `Show runtime status of one or more units`,
			Args: []model.Arg{{
				Name:       "PATTERN or PID",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"show"},
			Description: `Show properties of one or more`,
			Args: []model.Arg{{
				Name:       "PATTERN or JOB",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"cat"},
			Description: `Show files and drop-ins of specified units`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Show manual for one or more units`,
			Args: []model.Arg{{
				Name:       "PATTERN or PID",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"list-dependencies"},
			Description: `Recursively show units which are required or wanted by the units or by which those`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"start"},
			Description: `Start (activate) one or more units`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stop (deactivate) one or more units`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"reload"},
			Description: `Reload one or more units`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"restart"},
			Description: `Start or restart one or more units`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"try-restart"},
			Description: `Restart one or more units if active`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"reload-or-restart"},
			Description: `Reload one or more units if possible, otherwise start or restart`,
			Args: []model.Arg{{
				Name:       "UNIT",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"try-reload-or-restart"},
			Description: `If active, reload one or more units, if supported, otherwise restart`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"isolate"},
			Description: `Start one unit and stop all others`,
			Args: []model.Arg{{
				Name:      "UNIT",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"kill"},
			Description: `Send signal to processes of a unit`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"clean"},
			Description: `Clean runtime, cache, state, logs or configuration of unit`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"freeze"},
			Description: `Freeze execution of unit processes`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"thaw"},
			Description: `Resume execution of a frozen unit`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"set-property"},
			Description: `Sets one or more properties of a unit`,
			Args: []model.Arg{{
				Name:      "UNIT",
				Generator: nil, // TODO: port over generator
			}, {
				Name: "PROPERTY=VALUE",
			}},
		}, {
			Name:        []string{"bind"},
			Description: `Bind-mount a path from the host into a unit's namespace`,
			Args: []model.Arg{{
				Name:      "UNIT",
				Generator: nil, // TODO: port over generator
			}, {
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "PATH",
			}, {
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "PATH",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"mount-image"},
			Description: `Mount an image from the host into a unit's namespace`,
			Args: []model.Arg{{
				Name:      "UNIT",
				Generator: nil, // TODO: port over generator
			}, {
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "PATH",
			}, {
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "PATH",
				IsOptional: true,
			}, {
				Name:       "OPTS",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"service-log-level"},
			Description: `Get/set logging threshold for service`,
			Args: []model.Arg{{
				Name: "SERVICE",
			}, {
				Name:       "LEVEL",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"service-log-target"},
			Description: `Get/set logging target for service`,
			Args: []model.Arg{{
				Name: "SERVICE",
			}, {
				Name:       "TARGET",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"reset-failed"},
			Description: `Reset failed state for all, one, or more units`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"list-unit-files"},
			Description: `List installed unit files`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"enable"},
			Description: `Enable one or more unit files`,
			Args: []model.Arg{{
				Name:       "UNIT|PATH",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"disable"},
			Description: `Disable one or more unit files`,
			Args: []model.Arg{{
				Name:       "UNIT|PATH",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"reenable"},
			Description: `Reenable one or more unit files`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"preset"},
			Description: `Enable/disable one or more unit files based on preset configuration`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"preset-all"},
			Description: `Enable/disable all unit files based on preset configuration`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"mask"},
			Description: `Mask one or more unit files`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"unmask"},
			Description: `Unmask one or more unit files`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"link"},
			Description: `Link one or more units files into the search path`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "PATH",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"revert"},
			Description: `Revert one or more unit files to vendor version`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"add-wants"},
			Description: `Add 'Wants' dependency for the target on specified one or more units`,
			Args: []model.Arg{{
				Name: "TARGET",
			}, {
				Name:       "UNIT",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"add-requires"},
			Description: `Add 'Requires' dependency for the target on specified one or more units`,
			Args: []model.Arg{{
				Name: "TARGET",
			}, {
				Name:       "UNIT",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"edit"},
			Description: `Edit one or more unit files`,
			Args: []model.Arg{{
				Name:       "UNIT",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"get-default"},
			Description: `Get the name of the default target`,
		}, {
			Name:        []string{"set-default"},
			Description: `Set the default target`,
			Args: []model.Arg{{
				Name: "TARGET",
			}},
		}, {
			Name:        []string{"list-jobs"},
			Description: `List jobs`,
			Args: []model.Arg{{
				Name:       "PATTERN",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"cancel"},
			Description: `Cancel all, one, or more jobs`,
			Args: []model.Arg{{
				Name:       "JOB",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"show-environment"},
			Description: `Dump environment`,
		}, {
			Name:        []string{"set-environment"},
			Description: `Set one or more environment variables`,
			Args: []model.Arg{{
				Name:       "VARIABLE=VALUE",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"unset-environment"},
			Description: `Unset one or more environment variables`,
			Args: []model.Arg{{
				Name:       "VARIABLE",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"import-environment"},
			Description: `Import all or some environment variables`,
			Args: []model.Arg{{
				Name:       "VARIABLE",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"daemon-reload"},
			Description: `Reload systemd manager configuration`,
		}, {
			Name:        []string{"daemon-reexec"},
			Description: `Reexecute systemd manager`,
		}, {
			Name:        []string{"log-level"},
			Description: `Get/set logging threshold for manager`,
			Args: []model.Arg{{
				Name:       "LEVEL",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"log-target"},
			Description: `Get/set logging target for manager`,
			Args: []model.Arg{{
				Name:       "TARGET",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"service-watchdogs"},
			Description: `Get/set service watchdog state`,
			Args: []model.Arg{{
				Name:        "BOOL",
				Suggestions: []model.Suggestion{{Name: []string{`true`}}, {Name: []string{`false`}}},
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"is-system-running"},
			Description: `Check whether system is fully running`,
		}, {
			Name:        []string{"default"},
			Description: `Enter system default mode`,
		}, {
			Name:        []string{"rescue"},
			Description: `Enter system rescue mode`,
		}, {
			Name:        []string{"emergency"},
			Description: `Enter system emergency mode`,
		}, {
			Name:        []string{"halt"},
			Description: `Shut down and halt the system`,
		}, {
			Name:        []string{"poweroff"},
			Description: `Shut down and power-off the system`,
		}, {
			Name:        []string{"reboot"},
			Description: `Shut down and reboot the system`,
		}, {
			Name:        []string{"kexec"},
			Description: `Shut down and reboot the system with kexec`,
		}, {
			Name:        []string{"exit"},
			Description: `Request user instance or container exit`,
			Args: []model.Arg{{
				Name:       "EXIT_CODE",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"switch-root"},
			Description: `Change to a different root file system`,
			Args: []model.Arg{{
				Name: "ROOT",
			}, {
				Name: "INIT",
			}},
		}, {
			Name:        []string{"suspend"},
			Description: `Suspend the system`,
		}, {
			Name:        []string{"hibernate"},
			Description: `Hibernate the system`,
		}, {
			Name:        []string{"hybrid-sleep"},
			Description: `Hibernate and suspend the system`,
		}, {
			Name:        []string{"suspend-then-hibernate"},
			Description: `Suspend the system, wake after a period of time, and hibernate`,
		}},
	}
}
