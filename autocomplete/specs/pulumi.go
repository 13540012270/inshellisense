// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["pulumi"] = model.Subcommand{
		Name:        []string{"pulumi"},
		Description: `Pulumi's open source infrastructure as code SDK enables you to create, deploy, and manage infrastructure on any cloud, using your favorite languages`,
		Options: []model.Option{{
			Name:         []string{"--help", "-h"},
			Description:  `Show help`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"about"},
			Description: `Print information about the Pulumi environment`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-j", "--json"},
				Description: `Emit output as JSON`,
			}, {
				Name:        []string{"-t", "--transitive"},
				Description: `Include transitive dependencies`,
			}},
		}, {
			Name:        []string{"cancel"},
			Description: `Cancel a stackâ€™s currently running update, if any`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-y", "--yes"},
				Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}},
		}, {
			Name:        []string{"config"},
			Description: `Manage configuration`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-j", "--json"},
				Description: `Emit output as JSON`,
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"--config-file"},
				Description: `Use the configuration values in the specified file rather than detecting the file name`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					Name:      "file",
				}},
			}, {
				Name:        []string{"--show-secrets"},
				Description: `Show secret values when listing config instead of displaying blinded values`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"cp"},
				Description: `Copy config to another stack`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--path"},
					Description: `The key contains a path to a property in a map or list to set`,
				}, {
					Name:        []string{"-d", "--dest"},
					Description: `The name of the new stack to copy the config to`,
					Args: []model.Arg{{
						Name: "stack-name",
					}},
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get a single configuration value`,
				Args: []model.Arg{{
					Name: "key",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Emit output as JSON`,
				}, {
					Name:        []string{"--path"},
					Description: `The key contains a path to a property in a map or list to get`,
				}},
			}, {
				Name:        []string{"refresh"},
				Description: `Update the local configuration based on the most recent deployment of the stack`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-f", "--force"},
					Description: `Overwrite configuration file, if it exists, without creating a backup`,
				}},
			}, {
				Name:        []string{"rm"},
				Description: `Remove configuration value`,
				Args: []model.Arg{{
					Name: "key",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--path"},
					Description: `The key contains a path to a property in a map or list to remove`,
				}},
			}, {
				Name:        []string{"rm-all"},
				Description: `Remove multiple configuration values`,
				Args: []model.Arg{{
					Name:       "key",
					IsVariadic: true,
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--path"},
					Description: `Parse the keys as paths in a map or list rather than raw strings`,
				}},
			}, {
				Name:        []string{"set"},
				Description: `Set configuration value`,
				Args: []model.Arg{{
					Name: "key",
				}, {
					Name: "value",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--path"},
					Description: `The key contains a path to a property in a map or list to set`,
				}, {
					Name:        []string{"--plaintext"},
					Description: `Save the value as plaintext (unencrypted)`,
				}, {
					Name:        []string{"--secret"},
					Description: `Encrypt the value instead of storing it in plaintext`,
				}},
			}, {
				Name:        []string{"set-all"},
				Description: `Set multiple configuration values`,
				Args: []model.Arg{{
					Name: "key value",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--path"},
					Description: `Parse the keys as paths in a map or list rather than raw strings`,
				}, {
					Name:        []string{"--plaintext"},
					Description: `Marks a value as plaintext (unencrypted)`,
					Args: []model.Arg{{
						Name: "stringArray",
					}},
				}, {
					Name:        []string{"--secret"},
					Description: `Marks a value as secret to be encrypted`,
					Args: []model.Arg{{
						Name: "stringArray",
					}},
				}},
			}},
		}, {
			Name:        []string{"console"},
			Description: `Opens the current stack in the Pulumi Console`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}},
		}, {
			Name:        []string{"destroy"},
			Description: `Destroy an existing stack and its resources`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"-p", "--parallel"},
				Description: `Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647)`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}, {Name: []string{`6`}}, {Name: []string{`7`}}, {Name: []string{`8`}}, {Name: []string{`9`}}, {Name: []string{`10`}}},
				}},
			}, {
				Name:        []string{"-m", "--message"},
				Description: `Optional message to associate with the destroy operation`,
				Args: []model.Arg{{
					Name: "message",
				}},
			}, {
				Name:        []string{"--diff"},
				Description: `Display operation as a rich diff showing the overall change`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Print detailed debugging output during resource operations`,
			}, {
				Name:        []string{"--config-file"},
				Description: `Use the configuration values in the specified file rather than detecting the file name`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					Name:      "file",
				}},
			}, {
				Name:        []string{"--suppress-permalink"},
				Description: `Suppress display of the state permalink`,
				Args: []model.Arg{{
					Name:        "bool",
					Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
				}},
			}, {
				Name:        []string{"-t", "--target"},
				Description: `Specify a single resource URN to destroy. All resources necessary to destroy this target will also be destroyed. Multiple resources can be specified using: --target urn1 --target urn2`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"-j", "--json"},
				Description: `Serialize the update diffs, operations, and overall output as JSON`,
			}, {
				Name:        []string{"-r", "--refresh"},
				Description: `Refresh the state of the stack's resources before this update`,
				Args: []model.Arg{{
					Name:        "bool",
					Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
				}},
			}, {
				Name:        []string{"--show-config"},
				Description: `Show configuration keys and variables`,
			}, {
				Name:        []string{"--show-replacement-steps"},
				Description: `Show detailed resource replacement creates and deletes instead of a single step`,
			}, {
				Name:        []string{"--show-sames"},
				Description: `Show resources that don't need to be updated because they haven't changed, alongside those that do`,
			}, {
				Name:        []string{"--suppress-outputs"},
				Description: `Suppress display of stack outputs (in case they contain sensitive values)`,
			}, {
				Name:        []string{"--target-dependents"},
				Description: `Allows destroying of dependent targets discovered but not specified in --target list`,
			}, {
				Name:        []string{"-y", "--yes"},
				Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
			}, {
				Name:        []string{"-f", "--skip-preview"},
				Description: `Do not perform a preview before performing the destroy`,
			}, {
				Name:        []string{"--exclude-protected"},
				Description: `Do not destroy protected resources. Destroy all other resources`,
			}},
		}, {
			Name:        []string{"import"},
			Description: `Import resources into an existing stack`,
			Args: []model.Arg{{
				Name: "type",
			}, {
				Name: "name",
			}, {
				Name: "id",
			}},
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"--config-file"},
				Description: `Use the configuration values in the specified file rather than detecting the file name`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					Name:      "file",
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Print detailed debugging output during resource operations`,
			}, {
				Name:        []string{"--diff"},
				Description: `Display operation as a rich diff showing the overall change`,
			}, {
				Name:        []string{"-m", "--message"},
				Description: `Optional message to associate with the destroy operation`,
				Args: []model.Arg{{
					Name: "message",
				}},
			}, {
				Name:        []string{"-p", "--parallel"},
				Description: `Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647)`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}, {Name: []string{`6`}}, {Name: []string{`7`}}, {Name: []string{`8`}}, {Name: []string{`9`}}, {Name: []string{`10`}}},
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"-y", "--yes"},
				Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
			}, {
				Name:        []string{"-f", "--skip-preview"},
				Description: `Do not perform a preview before performing the destroy`,
			}, {
				Name:        []string{"--suppress-permalink"},
				Description: `Suppress display of the state permalink`,
				Args: []model.Arg{{
					Name:        "bool",
					Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
				}},
			}, {
				Name:        []string{"-f", "--file"},
				Description: `The path to a JSON-encoded file containing a list of resources to import`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "file",
				}},
			}, {
				Name:        []string{"-o", "--out"},
				Description: `The path to the file that will contain the generated resource declarations`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"--parent"},
				Description: `The name and URN of the parent resource in the format name=urn, where name is the variable name of the parent resource`,
				Args: []model.Arg{{
					Name: "[name=urn]",
				}},
			}, {
				Name:        []string{"--protect"},
				Description: `Allow resources to be imported with protection from deletion enabled (default true)`,
			}, {
				Name:        []string{"--provider"},
				Description: `The name and URN of the provider to use for the import in the format name=urn, where name is the variable name for the provider resourceÆ’`,
				Args: []model.Arg{{
					Name: "[name=urn]",
				}},
			}, {
				Name:        []string{"--suppress-outputs"},
				Description: `Suppress display of stack outputs (in case they contain sensitive values)`,
			}},
		}, {
			Name:        []string{"login"},
			Description: `Log in to the Pulumi service`,
			Args: []model.Arg{{
				Name: "url",
			}},
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-l", "--local"},
				Description: `Use Pulumi in local-only mode`,
			}, {
				Name:        []string{"-c", "--cloud-url"},
				Description: `A cloud URL to log in to`,
				Args: []model.Arg{{
					Name: "url",
				}},
			}, {
				Name:        []string{"--default-org"},
				Description: `A default org to associate with the login. Please note, currently, only the managed and self-hosted backends support organizations`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}},
		}, {
			Name:        []string{"logout"},
			Description: `Log out of the Pulumi service`,
			Args: []model.Arg{{
				Name: "url",
			}},
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-l", "--local"},
				Description: `Use Pulumi in local-only mode`,
			}, {
				Name:        []string{"--all"},
				Description: `Logout of all backends`,
			}, {
				Name:        []string{"-c", "--cloud-url"},
				Description: `A cloud URL to log out of (defaults to current cloud)`,
				Args: []model.Arg{{
					Name: "url",
				}},
			}},
		}, {
			Name:        []string{"logs"},
			Description: `[PREVIEW] Show aggregated resource logs for a stack`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"--config-file"},
				Description: `Use the configuration values in the specified file rather than detecting the file name`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					Name:      "file",
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"-j", "--json"},
				Description: `Emit output as JSON`,
			}, {
				Name:        []string{"-f", "--follow"},
				Description: `Follow the log stream in real time (like tail -f)`,
			}, {
				Name:        []string{"-r", "--resource"},
				Description: `Only return logs for the requested resource ('name', 'type::name' or full URN).  Defaults to returning all logs`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"--since"},
				Description: `Only return logs newer than a relative duration ('5s', '2m', '3h') or absolute timestamp.  Defaults to returning the last 1 hour of logs. (default "1h")`,
				Args: []model.Arg{{
					Name:        "duration",
					Suggestions: []model.Suggestion{{Name: []string{`5s`}}, {Name: []string{`2m`}}, {Name: []string{`3h`}}},
				}},
			}},
		}, {
			Name:        []string{"new"},
			Description: `Create a new Pulumi project`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"-y", "--yes"},
				Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
			}, {
				Name:        []string{"--secrets-provider"},
				Description: `The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault) (default "default")`,
				Args: []model.Arg{{
					Name:        "providerType",
					Suggestions: []model.Suggestion{{Name: []string{`default`}}, {Name: []string{`passphrase`}}, {Name: []string{`awskms`}}, {Name: []string{`azurekeyvault`}}, {Name: []string{`gcpkms`}}, {Name: []string{`hashivault`}}},
				}},
			}, {
				Name:        []string{"-c", "--config"},
				Description: `Config to save`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--config-path"},
				Description: `Config keys contain a path to a property in a map or list to set`,
			}, {
				Name:        []string{"-d", "--description"},
				Description: `The project description; if not specified, a prompt will request it`,
				Args: []model.Arg{{
					Name: "desc",
				}},
			}, {
				Name:        []string{"--dir"},
				Description: `The location to place the generated project; if not specified, the current directory is used`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "location",
				}},
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Forces content to be generated even if it would change existing files`,
			}, {
				Name:        []string{"-g", "--generate-only"},
				Description: `Generate the project only; do not create a stack, save config, or install dependencies`,
			}, {
				Name:        []string{"-n", "--name"},
				Description: `The project name; if not specified, a prompt will request it`,
				Args: []model.Arg{{
					Name: "projectName",
				}},
			}, {
				Name:        []string{"-o", "--offline"},
				Description: `Use locally cached templates without making any network requests`,
			}},
		}, {
			Name:        []string{"org"},
			Description: `Manage Organization configuration`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"get-default"},
				Description: `Get the default org for the current backend`,
			}, {
				Name:        []string{"set-default"},
				Description: `Set the default organization for the current backend`,
				Args: []model.Arg{{
					Name: "NAME",
				}},
			}},
		}, {
			Name:        []string{"plugin"},
			Description: `Manage language and resource provider plugins`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"install"},
				Description: `Install one or more plugins`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--exact"},
					Description: `Force installation of an exact version match (usually >= is accepted)`,
				}, {
					Name:        []string{"-f", "--file"},
					Description: `Install a plugin from a tarball file, instead of downloading it`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "file",
					}},
				}, {
					Name:        []string{"--reinstall"},
					Description: `Reinstall a plugin even if it already exists`,
				}, {
					Name:        []string{"--server"},
					Description: `A URL to download plugins from`,
					Args: []model.Arg{{
						Name: "url",
					}},
				}},
			}, {
				Name:        []string{"ls"},
				Description: `List plugins`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Emit output as JSON`,
				}, {
					Name:        []string{"-p", "--project"},
					Description: `List only the plugins used by the current project`,
				}},
			}, {
				Name:        []string{"rm"},
				Description: `Remove one or more plugins from the download cache`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
				}, {
					Name:        []string{"-a", "--all"},
					Description: `Remove all plugins`,
				}},
			}},
		}, {
			Name:        []string{"policy"},
			Description: `Manage resource policies`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"disable"},
				Description: `Disable a Policy Pack for a Pulumi organization`,
				Args: []model.Arg{{
					Name: "org-name/policy-pack-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--policy-group"},
					Description: `The Policy Group for which the Policy Pack will be disabled; if not specified, the default Policy Group is used`,
					Args: []model.Arg{{
						Name: "policyGroup",
					}},
				}, {
					Name:        []string{"--version"},
					Description: `The version of the Policy Pack that will be disabled; if not specified, any enabled version of the Policy Pack will be disabled`,
					Args: []model.Arg{{
						Name: "policyPackVersion",
					}},
				}},
			}, {
				Name:        []string{"enable"},
				Description: `Enable a Policy Pack for a Pulumi organization`,
				Args: []model.Arg{{
					Name: "org-name/policy-pack-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--policy-group"},
					Description: `The Policy Group for which the Policy Pack will be enabled; if not specified, the default Policy Group is used`,
					Args: []model.Arg{{
						Name: "policyGroup",
					}},
				}, {
					Name:        []string{"--config"},
					Description: `The file path for the Policy Pack configuration file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}},
			}, {
				Name:        []string{"group"},
				Description: `Manage policy groups`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}},
			}, {
				Name:        []string{"ls"},
				Description: `List all Policy Packs for a Pulumi organization`,
				Args: []model.Arg{{
					Name: "org-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Emit output as JSON`,
				}},
			}, {
				Name:        []string{"new"},
				Description: `Create a new Pulumi Policy Pack`,
				Args: []model.Arg{{
					Name: "template|url",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Emit output as JSON`,
				}, {
					Name:        []string{"-o", "--offline"},
					Description: `Use locally cached templates without making any network requests`,
				}, {
					Name:        []string{"-g", "--generate-only"},
					Description: `Generate the Policy Pack only; do not install dependencies`,
				}, {
					Name:        []string{"-f", "--force"},
					Description: `Forces content to be generated even if it would change existing files`,
				}, {
					Name:        []string{"--dir"},
					Description: `The location to place the generated Policy Pack; if not specified, the current directory is used`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "location",
					}},
				}},
			}, {
				Name:        []string{"publish"},
				Description: `Publish a Policy Pack to the Pulumi service`,
				Args: []model.Arg{{
					Name: "org-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}},
			}, {
				Name:        []string{"rm"},
				Description: `Removes a Policy Pack from a Pulumi organization`,
				Args: []model.Arg{{
					Name: "org-name/policy-pack-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
				}},
			}, {
				Name:        []string{"validate-config"},
				Description: `Validate a Policy Pack configuration`,
				Args: []model.Arg{{
					Name: "org-name/policy-pack-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--config"},
					Description: `The file path for the Policy Pack configuration file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}},
			}},
		}, {
			Name:        []string{"preview"},
			Description: `Show a preview of updates to a stackâ€™s resources`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"-p", "--parallel"},
				Description: `Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647)`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}, {Name: []string{`6`}}, {Name: []string{`7`}}, {Name: []string{`8`}}, {Name: []string{`9`}}, {Name: []string{`10`}}},
				}},
			}, {
				Name:        []string{"-m", "--message"},
				Description: `Optional message to associate with the destroy operation`,
				Args: []model.Arg{{
					Name: "message",
				}},
			}, {
				Name:        []string{"--diff"},
				Description: `Display operation as a rich diff showing the overall change`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Print detailed debugging output during resource operations`,
			}, {
				Name:        []string{"--config-file"},
				Description: `Use the configuration values in the specified file rather than detecting the file name`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					Name:      "file",
				}},
			}, {
				Name:        []string{"--suppress-permalink"},
				Description: `Suppress display of the state permalink`,
				Args: []model.Arg{{
					Name:        "bool",
					Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
				}},
			}, {
				Name:        []string{"-t", "--target"},
				Description: `Specify a single resource URN to destroy. All resources necessary to destroy this target will also be destroyed. Multiple resources can be specified using: --target urn1 --target urn2`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"-j", "--json"},
				Description: `Serialize the update diffs, operations, and overall output as JSON`,
			}, {
				Name:        []string{"-r", "--refresh"},
				Description: `Refresh the state of the stack's resources before this update`,
				Args: []model.Arg{{
					Name:        "bool",
					Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
				}},
			}, {
				Name:        []string{"--show-config"},
				Description: `Show configuration keys and variables`,
			}, {
				Name:        []string{"--show-replacement-steps"},
				Description: `Show detailed resource replacement creates and deletes instead of a single step`,
			}, {
				Name:        []string{"--show-sames"},
				Description: `Show resources that don't need to be updated because they haven't changed, alongside those that do`,
			}, {
				Name:        []string{"--suppress-outputs"},
				Description: `Suppress display of stack outputs (in case they contain sensitive values)`,
			}, {
				Name:        []string{"--target-dependents"},
				Description: `Allows destroying of dependent targets discovered but not specified in --target list`,
			}, {
				Name:        []string{"-c", "--config"},
				Description: `Config to use during the preview`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--config-path"},
				Description: `Config keys contain a path to a property in a map or list to set`,
			}, {
				Name:        []string{"--expect-no-changes"},
				Description: `Return an error if any changes are proposed by this preview`,
			}, {
				Name:        []string{"--policy-pack"},
				Description: `Run one or more policy packs as part of this update`,
				Args: []model.Arg{{
					Name: "strings",
				}},
			}, {
				Name:        []string{"--policy-pack-config"},
				Description: `Path to JSON file containing the config for the policy pack of the corresponding"--policy-pack" flag`,
				Args: []model.Arg{{
					Name: "strings",
				}},
			}, {
				Name:        []string{"--replace"},
				Description: `Specify resources to replace. Multiple resources can be specified using --replace urn1 --replace urn2`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--show-reads"},
				Description: `Show resources that are being read in, alongside those being managed directly in the stack`,
			}, {
				Name:        []string{"--target-replace"},
				Description: `Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}},
		}, {
			Name:        []string{"refresh"},
			Description: `Refresh the resources in a stack`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"--config-file"},
				Description: `Use the configuration values in the specified file rather than detecting the file name`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					Name:      "file",
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Print detailed debugging output during resource operations`,
			}, {
				Name:        []string{"--diff"},
				Description: `Display operation as a rich diff showing the overall change`,
			}, {
				Name:        []string{"-m", "--message"},
				Description: `Optional message to associate with the destroy operation`,
				Args: []model.Arg{{
					Name: "message",
				}},
			}, {
				Name:        []string{"-p", "--parallel"},
				Description: `Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647)`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}, {Name: []string{`6`}}, {Name: []string{`7`}}, {Name: []string{`8`}}, {Name: []string{`9`}}, {Name: []string{`10`}}},
				}},
			}, {
				Name:        []string{"-f", "--skip-preview"},
				Description: `Do not perform a preview before performing the destroy`,
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"-y", "--yes"},
				Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
			}, {
				Name:        []string{"--suppress-permalink"},
				Description: `Suppress display of the state permalink`,
				Args: []model.Arg{{
					Name:        "bool",
					Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
				}},
			}, {
				Name:        []string{"-t", "--target"},
				Description: `Specify a single resource URN to destroy. All resources necessary to destroy this target will also be destroyed. Multiple resources can be specified using: --target urn1 --target urn2`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"-j", "--json"},
				Description: `Serialize the refresh diffs, operations, and overall output as JSON`,
			}, {
				Name:        []string{"--expect-no-changes"},
				Description: `Return an error if any changes occur during this update`,
			}, {
				Name:        []string{"--show-replacement-steps"},
				Description: `Show detailed resource replacement creates and deletes instead of a single step`,
			}, {
				Name:        []string{"--show-sames"},
				Description: `Show resources that needn't be updated because they haven't changed, alongside those that do`,
			}, {
				Name:        []string{"--suppress-outputs"},
				Description: `Suppress display of stack outputs (in case they contain sensitive values)`,
			}},
		}, {
			Name:        []string{"schema"},
			Description: `Analyze package schemas`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"check"},
				Description: `Check a Pulumi package schema for errors`,
			}},
		}, {
			Name:        []string{"stack"},
			Description: `Manage stacks`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"--show-name"},
				Description: `Display only the stack name`,
			}, {
				Name:        []string{"--show-secrets"},
				Description: `Display stack outputs which are marked as secret in plaintext`,
			}, {
				Name:        []string{"-i", "--show-ids"},
				Description: `Display each resource's provider-assigned unique ID`,
			}, {
				Name:        []string{"-u", "--show-urns"},
				Description: `Display each resource's Pulumi-assigned globally unique URN`,
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"change-secrets-provider"},
				Description: `Change the secrets provider for the current stack`,
				Args: []model.Arg{{
					Name: "new-secrets-provider",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}},
			}, {
				Name:        []string{"export"},
				Description: `Export a stackâ€™s deployment to standard out`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--file"},
					Description: `A filename to write stack output to`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"--show-secrets"},
					Description: `Emit secrets in plaintext in exported stack. Defaults to false`,
					Args: []model.Arg{{
						Name:        "bool",
						Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
					}},
				}, {
					Name:        []string{"--version"},
					Description: `Previous stack version to export. (If unset, will export the latest)`,
				}},
			}, {
				Name:        []string{"graph"},
				Description: `Export a stackâ€™s dependency graph to a file`,
				Args: []model.Arg{{
					Name: "filename",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--dependency-edge-color"},
					Description: `Sets the color of dependency edges in the graph (default "#246C60")`,
					Args: []model.Arg{{
						Name: "color",
					}},
				}, {
					Name:        []string{"--ignore-dependency-edges"},
					Description: `Ignores edges introduced by dependency resource relationships`,
				}, {
					Name:        []string{"--ignore-parent-edges"},
					Description: `Ignores edges introduced by parent/child resource relationships`,
				}, {
					Name:        []string{"--parent-edge-color"},
					Description: `Sets the color of parent edges in the graph (default #AA6639")`,
					Args: []model.Arg{{
						Name: "color",
					}},
				}},
			}, {
				Name:        []string{"history"},
				Description: `[PREVIEW] Display history for a stack`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Emit output as JSON`,
				}, {
					Name:        []string{"--full-dates"},
					Description: `Show full dates, instead of relative dates`,
				}, {
					Name:        []string{"--page"},
					Description: `Used with 'page-size' to paginate results (default 1)`,
					Args: []model.Arg{{
						Name: "int",
					}},
				}, {
					Name:        []string{"--page-size"},
					Description: `Used with 'page' to control number of results returned (default 10)`,
					Args: []model.Arg{{
						Name: "int",
					}},
				}, {
					Name:        []string{"--show-secrets"},
					Description: `Show secret values when listing config instead of displaying blinded values`,
				}},
			}, {
				Name:        []string{"import"},
				Description: `Import a deployment from standard in into an existing stack`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-f", "--force"},
					Description: `Force the import to occur, even if apparent errors are discovered beforehand (not recommended)`,
				}, {
					Name:        []string{"--file"},
					Description: `A filename to read stack input from`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "file",
					}},
				}},
			}, {
				Name:        []string{"init"},
				Description: `Create an empty stack with the given name, ready for updates`,
				Args: []model.Arg{{
					Name: "org-name/stack-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--secrets-provider"},
					Description: `The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault) (default "default")`,
					Args: []model.Arg{{
						Name:        "providerType",
						Suggestions: []model.Suggestion{{Name: []string{`default`}}, {Name: []string{`passphrase`}}, {Name: []string{`awskms`}}, {Name: []string{`azurekeyvault`}}, {Name: []string{`gcpkms`}}, {Name: []string{`hashivault`}}},
					}},
				}, {
					Name:        []string{"--copy-config-from"},
					Description: `The name of the stack to copy existing config from`,
					Args: []model.Arg{{
						Name: "stackName",
					}},
				}},
			}, {
				Name:        []string{"ls"},
				Description: `List stacks`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Emit output as JSON`,
				}, {
					Name:        []string{"-a", "--all"},
					Description: `List all stacks instead of just stacks for the current project`,
				}, {
					Name:        []string{"-o", "--organization"},
					Description: `Filter returned stacks to those in a specific organization`,
					Args: []model.Arg{{
						Name: "orgName",
					}},
				}, {
					Name:        []string{"-p", "--project"},
					Description: `Filter returned stacks to those with a specific project name`,
					Args: []model.Arg{{
						Name: "projectName",
					}},
				}, {
					Name:        []string{"-t", "--tag"},
					Description: `Filter returned stacks to those in a specific tag (tag-name or tag-name=tag-value)`,
					Args: []model.Arg{{
						Name: "tagName",
					}},
				}},
			}, {
				Name:        []string{"output"},
				Description: `Show a stackâ€™s output properties`,
				Args: []model.Arg{{
					Name: "property-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-j", "--json"},
					Description: `Emit output as JSON`,
				}, {
					Name:        []string{"--show-secrets"},
					Description: `Display outputs which are marked as secret in plaintext`,
				}},
			}, {
				Name:        []string{"rename"},
				Description: `Rename an existing stack`,
				Args: []model.Arg{{
					Name: "new-stack-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}},
			}, {
				Name:        []string{"rm"},
				Description: `Remove a stack and its configuration`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
				}, {
					Name:        []string{"-f", "--force"},
					Description: `Forces deletion of the stack, leaving behind any resources managed by the stack`,
				}, {
					Name:        []string{"--preserve-config"},
					Description: `Do not delete the corresponding Pulumi.<stack-name>.yaml configuration file for the stack`,
				}},
			}, {
				Name:        []string{"select"},
				Description: `Switch the current workspace to the given stack`,
				Args: []model.Arg{{
					Name: "stack",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"--secrets-provider"},
					Description: `Use with --create flag, The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault) (default "default")`,
					Args: []model.Arg{{
						Name:        "providerType",
						Suggestions: []model.Suggestion{{Name: []string{`default`}}, {Name: []string{`passphrase`}}, {Name: []string{`awskms`}}, {Name: []string{`azurekeyvault`}}, {Name: []string{`gcpkms`}}, {Name: []string{`hashivault`}}},
					}},
				}},
			}, {
				Name:        []string{"tag"},
				Description: `Manage stack tags`,
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}},
				Subcommands: []model.Subcommand{{
					Name:        []string{"get"},
					Description: `Get a single stack tag value`,
					Args: []model.Arg{{
						Name: "name",
					}},
					Subcommands: []model.Subcommand{{
						Name:        []string{"--color"},
						Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
						Args: []model.Arg{{
							Name:        "mode",
							Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
						}},
					}, {
						Name:        []string{"-C", "--cwd"},
						Description: `Run pulumi as if it had been started in another directory`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFolders},
							Name:      "path",
						}},
					}, {
						Name:        []string{"--disable-integrity-checking"},
						Description: `Disable integrity checking of checkpoint files`,
					}, {
						Name:        []string{"-e", "--emoji"},
						Description: `Enable emojis in the output`,
					}, {
						Name:        []string{"--logflow"},
						Description: `Flow log settings to child processes (like plugins)`,
					}, {
						Name:        []string{"--logtostderr"},
						Description: `Log to stderr instead of to files`,
					}, {
						Name:        []string{"--non-interactive"},
						Description: `Disable interactive mode for all commands`,
					}, {
						Name:        []string{"--profiling"},
						Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
					}, {
						Name:        []string{"--tracing"},
						Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
						Args: []model.Arg{{
							Name: "file",
						}},
					}, {
						Name:        []string{"-v", "--verbose"},
						Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
						Args: []model.Arg{{
							Name:        "int",
							Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
						}},
					}},
				}, {
					Name:        []string{"ls"},
					Description: `List all stack tags`,
					Subcommands: []model.Subcommand{{
						Name:        []string{"--color"},
						Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
						Args: []model.Arg{{
							Name:        "mode",
							Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
						}},
					}, {
						Name:        []string{"-C", "--cwd"},
						Description: `Run pulumi as if it had been started in another directory`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFolders},
							Name:      "path",
						}},
					}, {
						Name:        []string{"--disable-integrity-checking"},
						Description: `Disable integrity checking of checkpoint files`,
					}, {
						Name:        []string{"-e", "--emoji"},
						Description: `Enable emojis in the output`,
					}, {
						Name:        []string{"--logflow"},
						Description: `Flow log settings to child processes (like plugins)`,
					}, {
						Name:        []string{"--logtostderr"},
						Description: `Log to stderr instead of to files`,
					}, {
						Name:        []string{"--non-interactive"},
						Description: `Disable interactive mode for all commands`,
					}, {
						Name:        []string{"--profiling"},
						Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
					}, {
						Name:        []string{"--tracing"},
						Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
						Args: []model.Arg{{
							Name: "file",
						}},
					}, {
						Name:        []string{"-v", "--verbose"},
						Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
						Args: []model.Arg{{
							Name:        "int",
							Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
						}},
					}, {
						Name:        []string{"-j", "--json"},
						Description: `Emit output as JSON`,
					}},
				}, {
					Name:        []string{"rm"},
					Description: `Remove a stack tag`,
					Args: []model.Arg{{
						Name: "name",
					}},
					Subcommands: []model.Subcommand{{
						Name:        []string{"--color"},
						Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
						Args: []model.Arg{{
							Name:        "mode",
							Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
						}},
					}, {
						Name:        []string{"-C", "--cwd"},
						Description: `Run pulumi as if it had been started in another directory`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFolders},
							Name:      "path",
						}},
					}, {
						Name:        []string{"--disable-integrity-checking"},
						Description: `Disable integrity checking of checkpoint files`,
					}, {
						Name:        []string{"-e", "--emoji"},
						Description: `Enable emojis in the output`,
					}, {
						Name:        []string{"--logflow"},
						Description: `Flow log settings to child processes (like plugins)`,
					}, {
						Name:        []string{"--logtostderr"},
						Description: `Log to stderr instead of to files`,
					}, {
						Name:        []string{"--non-interactive"},
						Description: `Disable interactive mode for all commands`,
					}, {
						Name:        []string{"--profiling"},
						Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
					}, {
						Name:        []string{"--tracing"},
						Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
						Args: []model.Arg{{
							Name: "file",
						}},
					}, {
						Name:        []string{"-v", "--verbose"},
						Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
						Args: []model.Arg{{
							Name:        "int",
							Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
						}},
					}},
				}, {
					Name:        []string{"set"},
					Description: `Set a stack tag`,
					Args: []model.Arg{{
						Name: "name value",
					}},
					Subcommands: []model.Subcommand{{
						Name:        []string{"--color"},
						Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
						Args: []model.Arg{{
							Name:        "mode",
							Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
						}},
					}, {
						Name:        []string{"-C", "--cwd"},
						Description: `Run pulumi as if it had been started in another directory`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFolders},
							Name:      "path",
						}},
					}, {
						Name:        []string{"--disable-integrity-checking"},
						Description: `Disable integrity checking of checkpoint files`,
					}, {
						Name:        []string{"-e", "--emoji"},
						Description: `Enable emojis in the output`,
					}, {
						Name:        []string{"--logflow"},
						Description: `Flow log settings to child processes (like plugins)`,
					}, {
						Name:        []string{"--logtostderr"},
						Description: `Log to stderr instead of to files`,
					}, {
						Name:        []string{"--non-interactive"},
						Description: `Disable interactive mode for all commands`,
					}, {
						Name:        []string{"--profiling"},
						Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
					}, {
						Name:        []string{"--tracing"},
						Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
						Args: []model.Arg{{
							Name: "file",
						}},
					}, {
						Name:        []string{"-v", "--verbose"},
						Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
						Args: []model.Arg{{
							Name:        "int",
							Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
						}},
					}},
				}},
			}},
		}, {
			Name:        []string{"state"},
			Description: `Edit the current stackâ€™s state`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}},
			Subcommands: []model.Subcommand{{
				Name:        []string{"delete"},
				Description: `Deletes a resource from a stackâ€™s state`,
				Args: []model.Arg{{
					Name: "resource URN",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-s", "--stack"},
					Description: `The name of the stack to operate on. Defaults to the current stack`,
					Args: []model.Arg{{
						Name: "stack-name",
					}},
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
				}, {
					Name:        []string{"--force"},
					Description: `Force deletion of protected resources`,
					Args: []model.Arg{{
						Name: "stack-name",
					}},
				}},
			}, {
				Name:        []string{"unprotect"},
				Description: `Unprotect resources in a stackâ€™s state`,
				Args: []model.Arg{{
					Name: "resource URN",
				}},
				Options: []model.Option{{
					Name:        []string{"--color"},
					Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
					Args: []model.Arg{{
						Name:        "mode",
						Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
					}},
				}, {
					Name:        []string{"-C", "--cwd"},
					Description: `Run pulumi as if it had been started in another directory`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFolders},
						Name:      "path",
					}},
				}, {
					Name:        []string{"--disable-integrity-checking"},
					Description: `Disable integrity checking of checkpoint files`,
				}, {
					Name:        []string{"-e", "--emoji"},
					Description: `Enable emojis in the output`,
				}, {
					Name:        []string{"--logflow"},
					Description: `Flow log settings to child processes (like plugins)`,
				}, {
					Name:        []string{"--logtostderr"},
					Description: `Log to stderr instead of to files`,
				}, {
					Name:        []string{"--non-interactive"},
					Description: `Disable interactive mode for all commands`,
				}, {
					Name:        []string{"--profiling"},
					Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
				}, {
					Name:        []string{"--tracing"},
					Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
					Args: []model.Arg{{
						Name: "file",
					}},
				}, {
					Name:        []string{"-v", "--verbose"},
					Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
					Args: []model.Arg{{
						Name:        "int",
						Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
					}},
				}, {
					Name:        []string{"-s", "--stack"},
					Description: `The name of the stack to operate on. Defaults to the current stack`,
					Args: []model.Arg{{
						Name: "stack-name",
					}},
				}, {
					Name:        []string{"-y", "--yes"},
					Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
				}, {
					Name:        []string{"--all"},
					Description: `Unprotect all resources in the checkpoint`,
					Args: []model.Arg{{
						Name: "stack-name",
					}},
				}},
			}},
		}, {
			Name:        []string{"up"},
			Description: `Deploy code and/or resource changes`,
			Args: []model.Arg{{
				Name: "template|url",
			}},
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"-p", "--parallel"},
				Description: `Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647)`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}, {Name: []string{`6`}}, {Name: []string{`7`}}, {Name: []string{`8`}}, {Name: []string{`9`}}, {Name: []string{`10`}}},
				}},
			}, {
				Name:        []string{"-m", "--message"},
				Description: `Optional message to associate with the destroy operation`,
				Args: []model.Arg{{
					Name: "message",
				}},
			}, {
				Name:        []string{"--diff"},
				Description: `Display operation as a rich diff showing the overall change`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Print detailed debugging output during resource operations`,
			}, {
				Name:        []string{"--config-file"},
				Description: `Use the configuration values in the specified file rather than detecting the file name`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					Name:      "file",
				}},
			}, {
				Name:        []string{"--suppress-permalink"},
				Description: `Suppress display of the state permalink`,
				Args: []model.Arg{{
					Name:        "bool",
					Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
				}},
			}, {
				Name:        []string{"-t", "--target"},
				Description: `Specify a single resource URN to destroy. All resources necessary to destroy this target will also be destroyed. Multiple resources can be specified using: --target urn1 --target urn2`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"-j", "--json"},
				Description: `Serialize the update diffs, operations, and overall output as JSON`,
			}, {
				Name:        []string{"-r", "--refresh"},
				Description: `Refresh the state of the stack's resources before this update`,
				Args: []model.Arg{{
					Name:        "bool",
					Suggestions: []model.Suggestion{{Name: []string{`false`}}, {Name: []string{`true`}}},
				}},
			}, {
				Name:        []string{"--show-config"},
				Description: `Show configuration keys and variables`,
			}, {
				Name:        []string{"--show-replacement-steps"},
				Description: `Show detailed resource replacement creates and deletes instead of a single step`,
			}, {
				Name:        []string{"--show-sames"},
				Description: `Show resources that don't need to be updated because they haven't changed, alongside those that do`,
			}, {
				Name:        []string{"--suppress-outputs"},
				Description: `Suppress display of stack outputs (in case they contain sensitive values)`,
			}, {
				Name:        []string{"--target-dependents"},
				Description: `Allows destroying of dependent targets discovered but not specified in --target list`,
			}, {
				Name:        []string{"-y", "--yes"},
				Description: `Skip confirmation prompts, and proceed with cancellation anyway`,
			}, {
				Name:        []string{"-f", "--skip-preview"},
				Description: `Do not perform a preview before performing the destroy`,
			}, {
				Name:        []string{"--secrets-provider"},
				Description: `The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault) (default "default")`,
				Args: []model.Arg{{
					Name:        "providerType",
					Suggestions: []model.Suggestion{{Name: []string{`default`}}, {Name: []string{`passphrase`}}, {Name: []string{`awskms`}}, {Name: []string{`azurekeyvault`}}, {Name: []string{`gcpkms`}}, {Name: []string{`hashivault`}}},
				}},
			}, {
				Name:        []string{"-c", "--config"},
				Description: `Config to use during the update`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--config-path"},
				Description: `Config keys contain a path to a property in a map or list to set`,
			}, {
				Name:        []string{"--expect-no-changes"},
				Description: `Return an error if any changes occur during this update`,
			}, {
				Name:        []string{"--policy-pack"},
				Description: `Run one or more policy packs as part of this update`,
				Args: []model.Arg{{
					Name: "strings",
				}},
			}, {
				Name:        []string{"--policy-pack-config"},
				Description: `Path to JSON file containing the config for the policy pack of the corresponding "--policy-pack" flag`,
				Args: []model.Arg{{
					Name: "strings",
				}},
			}, {
				Name:        []string{"--replace"},
				Description: `Specify resources to replace. Multiple resources can be specified using --replace urn1 --replace urn2`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--show-reads"},
				Description: `Show resources that are being read in, alongside those being managed directly in the stack`,
			}, {
				Name:        []string{"--target-replace"},
				Description: `Specify a single resource URN to replace. Other resources will not be updated. Shorthand for --target urn --replace urn`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}},
		}, {
			Name:        []string{"version"},
			Description: `Print Pulumiâ€™s version number`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}},
		}, {
			Name:        []string{"watch"},
			Description: `[PREVIEW] Continuously update the resources in a stack`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}, {
				Name:        []string{"--config-file"},
				Description: `Use the configuration values in the specified file rather than detecting the file name`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
					Name:      "file",
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Print detailed debugging output during resource operations`,
			}, {
				Name:        []string{"-m", "--message"},
				Description: `Optional message to associate with the destroy operation`,
				Args: []model.Arg{{
					Name: "message",
				}},
			}, {
				Name:        []string{"-p", "--parallel"},
				Description: `Allow P resource operations to run in parallel at once (1 for no parallelism). Defaults to unbounded. (default 2147483647)`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}, {Name: []string{`6`}}, {Name: []string{`7`}}, {Name: []string{`8`}}, {Name: []string{`9`}}, {Name: []string{`10`}}},
				}},
			}, {
				Name:        []string{"-s", "--stack"},
				Description: `The name of the stack to operate on. Defaults to the current stack`,
				Args: []model.Arg{{
					Name: "stack-name",
				}},
			}, {
				Name:        []string{"--secrets-provider"},
				Description: `The type of the provider that should be used to encrypt and decrypt secrets (possible choices: default, passphrase, awskms, azurekeyvault, gcpkms, hashivault) (default "default")`,
				Args: []model.Arg{{
					Name:        "providerType",
					Suggestions: []model.Suggestion{{Name: []string{`default`}}, {Name: []string{`passphrase`}}, {Name: []string{`awskms`}}, {Name: []string{`azurekeyvault`}}, {Name: []string{`gcpkms`}}, {Name: []string{`hashivault`}}},
				}},
			}, {
				Name:        []string{"-c", "--config"},
				Description: `Config to use during the update`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--config-path"},
				Description: `Config keys contain a path to a property in a map or list to set`,
			}, {
				Name:        []string{"--path"},
				Description: `Specify one or more relative or absolute paths that need to be watched. A path can point to a folder or a file. Defaults to working directory`,
				Args: []model.Arg{{
					Name: "stringArray",
				}},
			}, {
				Name:        []string{"--policy-pack"},
				Description: `Run one or more policy packs as part of each update`,
				Args: []model.Arg{{
					Name: "strings",
				}},
			}, {
				Name:        []string{"--policy-pack-config"},
				Description: `Path to JSON file containing the config for the policy pack of the corresponding "--policy-pack" flag`,
				Args: []model.Arg{{
					Name: "strings",
				}},
			}, {
				Name:        []string{"-r", "--refresh"},
				Description: `Refresh the state of the stack's resources before each update`,
			}, {
				Name:        []string{"--show-config"},
				Description: `Show configuration keys and variables`,
			}, {
				Name:        []string{"--show-replacement-steps"},
				Description: `Show detailed resource replacement creates and deletes instead of a single step`,
			}, {
				Name:        []string{"--show-sames"},
				Description: `Show resources that don't need be updated because they haven't changed, alongside those that do`,
			}},
		}, {
			Name:        []string{"whoami"},
			Description: `Displays the username of the currently logged in user`,
			Options: []model.Option{{
				Name:        []string{"--color"},
				Description: `Colorize output. Choices are: always, never, raw, auto (default "auto")`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`always`}}, {Name: []string{`never`}}, {Name: []string{`raw`}}, {Name: []string{`auto`}}},
				}},
			}, {
				Name:        []string{"-C", "--cwd"},
				Description: `Run pulumi as if it had been started in another directory`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--disable-integrity-checking"},
				Description: `Disable integrity checking of checkpoint files`,
			}, {
				Name:        []string{"-e", "--emoji"},
				Description: `Enable emojis in the output`,
			}, {
				Name:        []string{"--logflow"},
				Description: `Flow log settings to child processes (like plugins)`,
			}, {
				Name:        []string{"--logtostderr"},
				Description: `Log to stderr instead of to files`,
			}, {
				Name:        []string{"--non-interactive"},
				Description: `Disable interactive mode for all commands`,
			}, {
				Name:        []string{"--profiling"},
				Description: `Emit CPU and memory profiles and an execution trace to '[filename].[pid].{cpu,mem,trace}', respectively`,
			}, {
				Name:        []string{"--tracing"},
				Description: `Emit tracing to the specified endpoint. Use the file: scheme to write tracing data to a local file`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Enable verbose logging (e.g., v=3); anything >3 is very verbose`,
				Args: []model.Arg{{
					Name:        "int",
					Suggestions: []model.Suggestion{{Name: []string{`1`}}, {Name: []string{`2`}}, {Name: []string{`3`}}, {Name: []string{`4`}}, {Name: []string{`5`}}},
				}},
			}},
		}},
	}
}
