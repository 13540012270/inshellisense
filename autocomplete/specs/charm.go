// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["charm"] = model.Subcommand{
		Name:        []string{"charm"},
		Description: `Do Charm stuff; run without arguments for a TUI or use the sub-commands like a pro`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Help for charm`,
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Version for charm`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"backup-keys"},
			Description: `Backup your Charm account keys`,
		}, {
			Name:        []string{"completion"},
			Description: `Generate shell completion`,
		}, {
			Name:        []string{"crypt"},
			Description: `Use charm encryption`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"decrypt"},
				Description: `Decrypt stdin with your Charm account encryption key`,
			}, {
				Name:        []string{"decrypt-lookup"},
				Description: `Decrypt arg deterministically`,
			}, {
				Name:        []string{"encrypt"},
				Description: `Encrypt stdin with your Charm account encryption key`,
			}, {
				Name:        []string{"encrypt-lookup"},
				Description: `Encrypt arg deterministically`,
			}},
		}, {
			Name:        []string{"fs"},
			Description: `Use the Charm file systems`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"cat"},
				Description: `Output the content of the file at path`,
				Args: []model.Arg{{
					Name: "[charm:]PATH",
				}},
			}, {
				Name:        []string{"cp"},
				Description: `Copy a file, preface source or destination with "charm:" to specify a remote path`,
				Args: []model.Arg{{
					Name: "[charm:]PATH",
				}, {
					Name: "[charm:]PATH",
				}},
				Options: []model.Option{{
					Name:        []string{"--recursive", "-r"},
					Description: `Copy directories recursively`,
				}},
			}, {
				Name:        []string{"ls"},
				Description: `List file or directory at path`,
				Args: []model.Arg{{
					Name: "[charm:]PATH",
				}},
			}, {
				Name:        []string{"mv"},
				Description: `Move a file, preface source or destination with "charm" to specify a remote  path`,
				Args: []model.Arg{{
					Name: "[charm:]PATH",
				}, {
					Name: "[charm:]PATH",
				}},
			}, {
				Name:        []string{"rm"},
				Description: `Remove file or directory at path`,
				Args: []model.Arg{{
					Name: "[charm:]PATH",
				}},
			}, {
				Name:        []string{"tree"},
				Description: `Print a file system tree from path`,
				Args: []model.Arg{{
					Name: "[charm:]PATH",
				}},
			}},
		}, {
			Name:        []string{"help"},
			Description: `Help about any command`,
		}, {
			Name:        []string{"id"},
			Description: `Print your Charm ID`,
		}, {
			Name:        []string{"import-keys"},
			Description: `Import previously backed up Charm account keys`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "BACKUP.tar",
				Suggestions: []model.Suggestion{{Name: []string{`BACKUP.tar`}}},
			}},
			Options: []model.Option{{
				Name:        []string{"--force-overwrite", "-f"},
				Description: `Overwrite if keys exist; don't prompt for input`,
			}},
		}, {
			Name:        []string{"jwt"},
			Description: `Print a JWT`,
		}, {
			Name:        []string{"keys"},
			Description: `Browse or print linked SSH keys`,
			Options: []model.Option{{
				Name:        []string{"--randomart", "-r"},
				Description: `Print SSH 5.1 randomart for each key (the Drunken Bishop algorithm)`,
			}, {
				Name:        []string{"--simple", "-s"},
				Description: `Simple, non-interactive output (good for scripts)`,
			}},
		}, {
			Name:        []string{"kv"},
			Description: `Use the Charm key value store`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"delete"},
				Description: `Delete a key with an optional @ db`,
				Args: []model.Arg{{
					Name: "KEY[@DB]",
				}},
			}, {
				Name:        []string{"get"},
				Description: `Get a value for a key with an optional @ db`,
				Args: []model.Arg{{
					Name: "KEY[@DB]",
				}},
			}, {
				Name:        []string{"list"},
				Description: `List all key value pairs with an optional @ db`,
				Args: []model.Arg{{
					Name:       "KEY[@DB]",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"reset"},
				Description: `Delete local db and pull down fresh copy from Charm Cloud`,
				Args: []model.Arg{{
					Name:       "KEY[@DB]",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"set"},
				Description: `Set a value for a key with an optional @ db`,
				Args: []model.Arg{{
					Name: "KEY[@DB]",
				}, {
					Name: "VALUE",
				}},
			}, {
				Name:        []string{"sync"},
				Description: `Sync local db with latest Charm Cloud db`,
				Args: []model.Arg{{
					Name: "KEY[@DB]",
				}},
			}},
		}, {
			Name:        []string{"link"},
			Description: `Link multiple machines to your Charm account`,
			Args: []model.Arg{{
				Name:       "code",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"name"},
			Description: `Username stuff`,
			Args: []model.Arg{{
				Name:       "username",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"serve"},
			Description: `Start a self-hosted Charm Cloud server`,
			Options: []model.Option{{
				Name:        []string{"--data-dir"},
				Description: `Directory to store SQLite db, SSH keys and file data`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "DATA_DIR",
				}},
			}, {
				Name:        []string{"--health-port"},
				Description: `Health port to listen on`,
				Args: []model.Arg{{
					Name:        "HEALTH_PORT",
					Suggestions: []model.Suggestion{{Name: []string{`35356`}}},
				}},
			}, {
				Name:        []string{"--http-port"},
				Description: `HTTP port to listen on`,
				Args: []model.Arg{{
					Name:        "HTTP_PORT",
					Suggestions: []model.Suggestion{{Name: []string{`35354`}}},
				}},
			}, {
				Name:        []string{"--ssh-port"},
				Description: `SSH port to listen on`,
				Args: []model.Arg{{
					Name:        "SSH_PORT",
					Suggestions: []model.Suggestion{{Name: []string{`35353`}}},
				}},
			}, {
				Name:        []string{"--stats-port"},
				Description: `Stats port to listen on`,
				Args: []model.Arg{{
					Name:        "STATS_PORT",
					Suggestions: []model.Suggestion{{Name: []string{`35355`}}},
				}},
			}},
		}},
	}
}
