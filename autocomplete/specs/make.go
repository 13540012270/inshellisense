// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["make"] = model.Subcommand{
		Name: []string{"make"},
		Args: []model.Arg{{
			Name:      "target",
			Generator: nil, // TODO: port over generator
		}},
		Options: []model.Option{{
			Name: []string{"-j"},
			Args: []model.Arg{{
				Name: "number",
			}, {
				Name:      "target",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--file", "-f", "--makefile"},
			Description: `Read FILE as a makefile`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"-C", "--directory"},
			Description: `Change to DIRECTORY before doing anything`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "directory",
			}},
		}, {
			Name:        []string{"-B", "--always-make"},
			Description: `Unconditionally make all targets`,
			Args: []model.Arg{{
				Name:      "target",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-e", "--environment-overrides"},
			Description: `Environment variables override makefiles`,
			Args: []model.Arg{{
				Name:      "target",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Print this message and exit`,
		}, {
			Name:        []string{"-i", "--ignore-errors"},
			Description: `Ignore errors from commands`,
		}, {
			Name:        []string{"-k", "--keep-going"},
			Description: `Keep going when some targets can't be made`,
		}, {
			Name:        []string{"-L", "--check-symlink-times"},
			Description: `Use the latest mtime between symlinks and target`,
		}, {
			Name:        []string{"-p", "--print-data-base"},
			Description: `Print make's internal database`,
		}, {
			Name:        []string{"-q", "--question"},
			Description: `Run no commands; exit status says if up to date`,
		}, {
			Name:        []string{"-r", "--no-builtin-rules"},
			Description: `Disable the built-in implicit rules`,
		}, {
			Name:        []string{"-R", "--no-builtin-variables"},
			Description: `Disable the built-in variable settings`,
		}, {
			Name:        []string{"-t", "--touch"},
			Description: `Touch targets instead of remaking them`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Print the version number of make and exit`,
		}, {
			Name:        []string{"-w", "--print-directory"},
			Description: `Print the current directory`,
		}, {
			Name:        []string{"-d"},
			Description: `Print lots of debugging information`,
		}, {
			Name:        []string{"--debug"},
			Description: `Print various types of debugging information`,
		}, {
			Name:        []string{"-I", "--include-dir"},
			Description: `Search directory for included makefiles`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "directory",
			}},
		}, {
			Name:        []string{"-l", "--load-average"},
			Description: `Don't start multiple jobs unless load is below N`,
			Args: []model.Arg{{
				Name:       "N",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"-o", "--old-file"},
			Description: `Consider file to be very old and don't remake it`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--no-print-directory"},
			Description: `Turn off -w, even if it was turned on implicitly`,
		}, {
			Name:        []string{"-W", "--what-if", "--new-file", "--assume-new"},
			Description: `Consider file to be infinitely new`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--warn-undefined-variables"},
			Description: `Warn when an undefined variable is referenced`,
		}, {
			Name:        []string{"-N", "--Next-option"},
			Description: `Turn on value of next option`,
			Args: []model.Arg{{
				Name: "option",
			}},
		}},
	}
}
