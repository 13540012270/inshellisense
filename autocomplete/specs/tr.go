// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["tr"] = model.Subcommand{
		Name:        []string{"tr"},
		Description: `Translate characters`,
		Args: []model.Arg{{
			Name:        "string1",
			Description: `Candidate string`,
			Suggestions: []model.Suggestion{{
				Name:        []string{`a`},
				Description: `Any single character`,
			}, {
				Name:        []string{`\\a`},
				Description: `Alert character`,
			}, {
				Name:        []string{`\\b`},
				Description: `Backspace character`,
			}, {
				Name:        []string{`\\f`},
				Description: `Form feed character`,
			}, {
				Name:        []string{`\\n`},
				Description: `Newline character`,
			}, {
				Name:        []string{`\\r`},
				Description: `Carriage return character`,
			}, {
				Name:        []string{`\\t`},
				Description: `Tab character`,
			}, {
				Name:        []string{`\\v`},
				Description: `Vertical tab character`,
			}, {
				Name:        []string{`c-c`},
				Description: `For non-octal range endpoints represents the range of characters between the range endpoints, inclusive, in ascending order, as defined by the collation sequence`,
			}, {
				Name:        []string{`[:alnum:]`},
				Description: `Alphanumeric characters`,
			}, {
				Name:        []string{`[:alpha:]`},
				Description: `Alphabetic characters`,
			}, {
				Name:        []string{`[:blank:]`},
				Description: `Blank characters`,
			}, {
				Name:        []string{`[:cntrl:]`},
				Description: `Control characters`,
			}, {
				Name:        []string{`[:digit:]`},
				Description: `Digit characters`,
			}, {
				Name:        []string{`[:graph:]`},
				Description: `Graphic characters`,
			}, {
				Name:        []string{`[:ideogram:]`},
				Description: `Ideographic characters`,
			}, {
				Name:        []string{`[:lower:]`},
				Description: `Lower-case characters`,
			}, {
				Name:        []string{`[:phonogram:]`},
				Description: `Phonographic characters`,
			}, {
				Name:        []string{`[:print:]`},
				Description: `Printable characters`,
			}, {
				Name:        []string{`[:punct:]`},
				Description: `Punctuation characters`,
			}, {
				Name:        []string{`[:rune:]`},
				Description: `Valid characters`,
			}, {
				Name:        []string{`[:space:]`},
				Description: `Space characters`,
			}, {
				Name:        []string{`[:special:]`},
				Description: `Special characters`,
			}, {
				Name:        []string{`[:upper:]`},
				Description: `Upper-case characters`,
			}, {
				Name:        []string{`[:xdigit:]`},
				Description: `Hexadecimal characters`,
			}, {
				Name:        []string{`[=equiv=]`},
				Description: `Represents all characters belonging to the same equivalence class as 'equiv', ordered by their encoded values`,
			}, {
				Name:        []string{`[#*n]`},
				Description: `Represents 'n' repeated occurrences of the character represented by '#'`,
			}},
		}, {
			Name:        "string2",
			Description: `Replacment string`,
			Suggestions: []model.Suggestion{{
				Name:        []string{`a`},
				Description: `Any single character`,
			}, {
				Name:        []string{`\\a`},
				Description: `Alert character`,
			}, {
				Name:        []string{`\\b`},
				Description: `Backspace character`,
			}, {
				Name:        []string{`\\f`},
				Description: `Form feed character`,
			}, {
				Name:        []string{`\\n`},
				Description: `Newline character`,
			}, {
				Name:        []string{`\\r`},
				Description: `Carriage return character`,
			}, {
				Name:        []string{`\\t`},
				Description: `Tab character`,
			}, {
				Name:        []string{`\\v`},
				Description: `Vertical tab character`,
			}, {
				Name:        []string{`c-c`},
				Description: `For non-octal range endpoints represents the range of characters between the range endpoints, inclusive, in ascending order, as defined by the collation sequence`,
			}, {
				Name:        []string{`[:alnum:]`},
				Description: `Alphanumeric characters`,
			}, {
				Name:        []string{`[:alpha:]`},
				Description: `Alphabetic characters`,
			}, {
				Name:        []string{`[:blank:]`},
				Description: `Blank characters`,
			}, {
				Name:        []string{`[:cntrl:]`},
				Description: `Control characters`,
			}, {
				Name:        []string{`[:digit:]`},
				Description: `Digit characters`,
			}, {
				Name:        []string{`[:graph:]`},
				Description: `Graphic characters`,
			}, {
				Name:        []string{`[:ideogram:]`},
				Description: `Ideographic characters`,
			}, {
				Name:        []string{`[:lower:]`},
				Description: `Lower-case characters`,
			}, {
				Name:        []string{`[:phonogram:]`},
				Description: `Phonographic characters`,
			}, {
				Name:        []string{`[:print:]`},
				Description: `Printable characters`,
			}, {
				Name:        []string{`[:punct:]`},
				Description: `Punctuation characters`,
			}, {
				Name:        []string{`[:rune:]`},
				Description: `Valid characters`,
			}, {
				Name:        []string{`[:space:]`},
				Description: `Space characters`,
			}, {
				Name:        []string{`[:special:]`},
				Description: `Special characters`,
			}, {
				Name:        []string{`[:upper:]`},
				Description: `Upper-case characters`,
			}, {
				Name:        []string{`[:xdigit:]`},
				Description: `Hexadecimal characters`,
			}, {
				Name:        []string{`[=equiv=]`},
				Description: `Represents all characters belonging to the same equivalence class as 'equiv', ordered by their encoded values`,
			}, {
				Name:        []string{`[#*n]`},
				Description: `Represents 'n' repeated occurrences of the character represented by '#'`,
			}},
			IsOptional: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-C"},
			Description: `Complement the set of characters in string1, that is '-C ab' includes every character except for 'a' and 'b'`,
		}, {
			Name:        []string{"-c"},
			Description: `Same as '-C' but complement the set of values in string1`,
		}, {
			Name:        []string{"-d"},
			Description: `Delete characters in string1 from the input`,
		}, {
			Name:        []string{"-s"},
			Description: `Squeeze multiple occurrences of the characters listed in the last operand (either string1 or string2) in the input into a single instance of the character. This occurs after all deletion and translation is completed`,
		}, {
			Name:        []string{"-u"},
			Description: `Guarantee that any output is unbuffered`,
		}},
	}
}
