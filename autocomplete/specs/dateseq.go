// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["dateseq"] = model.Subcommand{
		Name:        []string{"dateseq"},
		Description: `Nifty command line date and time utilities; fast date calculations and conversion in the shell`,
		Args: []model.Arg{{
			Name:        "FIRST",
			Description: `Date/time`,
		}, {
			Name:       "INCREMENT",
			IsOptional: true,
		}, {
			Name:        "LAST",
			Description: `Date/time`,
		}},
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Print help and exit`,
		}, {
			Name:        []string{"--version", "-V"},
			Description: `Print version and exit`,
		}, {
			Name:        []string{"--quiet", "-q"},
			Description: `Suppress message about date/time and duration parse errors and fix-ups`,
		}, {
			Name:        []string{"-f", "--format"},
			Description: `Output format. This can either be a specifier string (similar to strftime()'s FMT) or the name of a calendar`,
			Args: []model.Arg{{
				Name: "string",
			}},
		}, {
			Name:        []string{"-i", "--input-format"},
			Description: `Input format, can be used multiple times. Each date/time will be passed to the input format parsers in the order they are given, if a date/time can be read successfully with a given input format specifier string, that value will be used`,
			Args: []model.Arg{{
				Name: "input format",
			}},
		}, {
			Name:        []string{"-b", "--base"},
			Description: `For underspecified input use DT as a fallback to fill in missing fields. Also used for ambiguous format specifiers to position their range on the absolute time line. Must be a date/time in ISO8601 format. If omitted defaults to the current date/time`,
			Args: []model.Arg{{
				Name: "base",
			}},
		}, {
			Name:        []string{"-e", "--backslash-escapes"},
			Description: `Enable interpretation of backslash escapes in the output and input format specifier strings`,
		}, {
			Name:        []string{"--locale"},
			Description: `Format results according to LOCALE, this would only affect month and weekday names`,
			Args: []model.Arg{{
				Name: "locale",
			}},
		}, {
			Name:        []string{"-s", "--skip"},
			Description: `Skip weekdays specified by WEEKDAY. WEEKDAY can be a single weekday (Mon, Tue, etc.), and to skip several days the --skip option can be used multiple times. WEEKDAY can also be a comma-separated list of weekday names, or "ss' to skip weekends (sat+sun) altogether. WEEKDAY can also contain date ranges like "mo-we' for Monday to Wednesday`,
			Args: []model.Arg{{
				Name:       "weekday",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--alt-inc"},
			Description: `Alternative increment to use when a date is hit that is skipped as per --skip. This increment will be applied until a non-skipped date is reached. The special case "0' (default) deactivates alternative incrementing.  A useful value could be "1d' for increasing sequences and "-1d' for decreasing sequences, so if a skipped date is encountered the next non-skipped date after/before will be used`,
			Args: []model.Arg{{
				Name: "alternative increment",
			}},
		}, {
			Name:        []string{"--compute-from-last"},
			Description: `Compute a start value from LAST using INCREMENT. This option has an effect only when INCREMENT is not a divisor of the duration between FIRST and LAST. In such case, an alternative FIRST will be computed by consecutively subtracting INCREMENT from LAST until FIRST is hit or crossed`,
		}},
	}
}
