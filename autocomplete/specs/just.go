// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["just"] = model.Subcommand{
		Name:        []string{"just"},
		Description: `Just a command runner`,
		Args: []model.Arg{{
			Name:       "args",
			Generator:  nil, // TODO: port over generator
			IsOptional: true,
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Print help information`,
		}, {
			Name:        []string{"--changelog"},
			Description: `Print the changelog`,
		}, {
			Name:        []string{"--check"},
			Description: `Run --fmt in 'check' mode`,
		}, {
			Name:        []string{"--choose"},
			Description: `Select one or more recipes to run using another program`,
		}, {
			Name:        []string{"--chooser"},
			Description: `Override the binary invoked by --choose`,
			Args: []model.Arg{{
				Name: "program",
			}},
		}, {
			Name:        []string{"--color"},
			Description: `Print colorful output`,
			Args: []model.Arg{{
				Suggestions: []model.Suggestion{{
					Name: []string{`auto`},
				}, {
					Name: []string{`always`},
				}, {
					Name: []string{`never`},
				}},
			}},
		}, {
			Name:        []string{"-c", "--command"},
			Description: `Run an arbitrary command with the working directory, .env, overrides, and exports`,
			Args: []model.Arg{{
				Name:      "command",
				IsCommand: true,
			}},
		}, {
			Name:        []string{"--completions"},
			Description: `Print shell completions`,
			Args: []model.Arg{{
				Name: "shell",
				Suggestions: []model.Suggestion{{
					Name: []string{`zsh`},
				}, {
					Name: []string{`bash`},
				}, {
					Name: []string{`fish`},
				}, {
					Name: []string{`powershell`},
				}, {
					Name: []string{`elvish`},
				}},
			}},
		}, {
			Name:        []string{"--clear-shell-args"},
			Description: `Clear shell arguments`,
		}, {
			Name:        []string{"--dry-run"},
			Description: `Print what just would do, without doing it`,
		}, {
			Name:        []string{"--dump"},
			Description: `Print justfile`,
		}, {
			Name:        []string{"--dotenv-filename"},
			Description: `Use a file with this name instead of .env`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"--dotenv-path"},
			Description: `Load the environment file from a path instead of searching for one`,
		}, {
			Name:        []string{"--dump-format"},
			Description: `Specify the format for dumping the justfile`,
			Args: []model.Arg{{
				Name: "format",
				Suggestions: []model.Suggestion{{
					Name: []string{`just`},
				}, {
					Name:        []string{`json`},
					Description: `This value requires --unstable`,
				}},
			}},
		}, {
			Name:        []string{"-e", "--edit"},
			Description: `Edit the justfile with $VISUAL or $EDITOR, falling back to vim`,
		}, {
			Name:        []string{"--evaluate"},
			Description: `Evaluate and print all variables`,
		}, {
			Name:        []string{"--fmt"},
			Description: `Format and overwrite the justfile`,
		}, {
			Name:        []string{"--highlight"},
			Description: `Highlight echoed recipe lines in bold`,
			ExclusiveOn: []string{"--no-highlight"},
		}, {
			Name:        []string{"--init"},
			Description: `Initialize a new justfile`,
		}, {
			Name:        []string{"-f", "--justfile"},
			Description: `Use a specific justfile`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"-l", "--list"},
			Description: `List available recipes and their arguments`,
		}, {
			Name:        []string{"--list-heading"},
			Description: `Print this text before the list`,
			Args: []model.Arg{{
				Name: "text",
			}},
		}, {
			Name:        []string{"--list-prefix"},
			Description: `Print this text before each list item`,
			Args: []model.Arg{{
				Name: "text",
			}},
		}, {
			Name:        []string{"--no-dotenv"},
			Description: `Don't load the environment file`,
		}, {
			Name:        []string{"--no-highlight"},
			Description: `Don't highlight echoed recipe lines`,
			ExclusiveOn: []string{"--highlight"},
		}, {
			Name:        []string{"-q", "--quiet"},
			Description: `Suppress all output`,
		}, {
			Name:        []string{"--set"},
			Description: `Override a variable with a value`,
			Args: []model.Arg{{
				Name:      "variable",
				Generator: nil, // TODO: port over generator
			}, {
				Name:        "value",
				Description: `The string value the variable will be set to`,
			}},
		}, {
			Name:        []string{"--shell"},
			Description: `Invoke this shell to run recipes`,
			Args: []model.Arg{{
				Name: "shell",
			}},
		}, {
			Name:        []string{"--shell-arg"},
			Description: `Invoke the shell with this as an argument`,
			Args: []model.Arg{{
				Name: "argument",
			}},
		}, {
			Name:        []string{"--shell-command"},
			Description: `Invoke --command with the shell used to run recipe lines and backticks`,
		}, {
			Name:        []string{"-s", "--show"},
			Description: `Show information about a recipe`,
			Args: []model.Arg{{
				Name:      "recipe",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--summary"},
			Description: `List names of available recipes`,
		}, {
			Name:        []string{"-u", "--unsorted"},
			Description: `Return list and summary entries in source order`,
		}, {
			Name:        []string{"--unstable"},
			Description: `Enable unstable features`,
		}, {
			Name:        []string{"--variables"},
			Description: `List names of variables`,
		}, {
			Name:        []string{"-v", "--verbose"},
			Description: `Use verbose output`,
		}, {
			Name:        []string{"-V", "--version"},
			Description: `Print version information`,
		}, {
			Name:        []string{"-d", "--working-directory"},
			Description: `Use this as the working directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
			}},
		}},
	}
}
