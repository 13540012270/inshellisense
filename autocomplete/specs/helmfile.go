// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["helmfile"] = model.Subcommand{
		Name:        []string{"helmfile"},
		Description: `Deploy helm charts`,
		Options: []model.Option{{
			Name:         []string{"--help", "-h"},
			Description:  `Do not exit with an error code if the provided selector has no matching releases`,
			IsPersistent: true,
		}, {
			Name:         []string{"--allow-no-matching-release"},
			Description:  `Show help for helmfile`,
			IsPersistent: true,
		}, {
			Name:        []string{"--chart", "-c"},
			Description: `Set chart. Uses the chart set in release by default, and is available in template as {{ .Chart }}`,
			Args: []model.Arg{{
				Name: "string",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--color"},
			Description:  `Output with color`,
			IsPersistent: true,
		}, {
			Name:         []string{"--debug"},
			Description:  `Enable verbose output for Helm and set log-level to debug, this disables --quiet/-q effect`,
			IsPersistent: true,
		}, {
			Name:         []string{"--enable-live-output"},
			Description:  `Show live output from the Helm binary Stdout/Stderr into Helmfile own Stdout/Stderr. It only applies for the Helm CLI commands, Stdout/Stderr for Hooks are still displayed only when it's execution finishes`,
			IsPersistent: true,
		}, {
			Name:        []string{"--environment", "-e"},
			Description: `Specify the environment name. defaults to default`,
			Args: []model.Arg{{
				Name: "environment",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--file", "-f"},
			Description: `Load config from file or directory. defaults to helmfile.yaml or "helmfile.d"(means "helmfile.d/*.yaml") in this preference`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--helm-binary", "-b"},
			Description: `Path to the helm binary (default "helm")`,
			Args: []model.Arg{{
				Name: "binary",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--interactive", "-i"},
			Description:  `Request confirmation before attempting to modify clusters`,
			IsPersistent: true,
		}, {
			Name:        []string{"--kube-context"},
			Description: `Set kubectl context. Uses current context by default`,
			Args: []model.Arg{{
				Name: "kube-context",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--log-level"},
			Description: `Set log level, default info (default info)`,
			Args: []model.Arg{{
				Name: "log-level",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--namespace", "-n"},
			Description: `Set namespace. Uses the namespace set in the context by default, and is available in templates as {{ .Namespace }}`,
			Args: []model.Arg{{
				Name: "namespace",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--no-color"},
			Description:  `Output without color`,
			IsPersistent: true,
		}, {
			Name:         []string{"--quiet", "-q"},
			Description:  `Silence output. Equivalent to log-level warn`,
			IsPersistent: true,
		}, {
			Name:        []string{"--selector", "-l"},
			Description: `Only run using the releases that match labels. Labels can take the form of foo=bar or foo!=bar`,
			Args: []model.Arg{{
				Name: " selector ",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--state-values-file"},
			Description: `Specify state values in a YAML file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "state-values-file",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--state-values-set"},
			Description: `Set state values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)`,
			Args: []model.Arg{{
				Name: "state-values-=set",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--version", "-v"},
			Description:  `Version for helmfile`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"apply"},
			Description: `Apply all resources from state file only when there are changes`,
		}, {
			Name:        []string{"build"},
			Description: `Build all resources from state file`,
		}, {
			Name:        []string{"cache"},
			Description: `Cache management`,
		}, {
			Name:        []string{"charts"},
			Description: `DEPRECATED: sync releases from state file (helm upgrade --install)`,
		}, {
			Name:        []string{"completion"},
			Description: `Generate the autocompletion script for the specified shell`,
		}, {
			Name:        []string{"delete"},
			Description: `The helmfile delete sub-command deletes all the releases defined in the manifests`,
		}, {
			Name:        []string{"deps"},
			Description: `Update charts based on their requirements, it locks your helmfile state and local charts dependencies`,
		}, {
			Name:        []string{"destroy"},
			Description: `Destroys and then purges releases`,
		}, {
			Name:        []string{"diff"},
			Description: `Diff releases defined in state file, it executes the helm-diff plugin across all of the charts/releases defined in the manifest`,
		}, {
			Name:        []string{"fetch"},
			Description: `Fetch charts from state file, it downloads or copies local charts to a local directory for debug purpose`,
		}, {
			Name:        []string{"help"},
			Description: `Help about any command`,
		}, {
			Name:        []string{"init"},
			Description: `Initialize the helmfile, includes version checking and installation of helm and plug-ins`,
		}, {
			Name:        []string{"lint"},
			Description: `Lint charts from state file (helm lint)`,
		}, {
			Name:        []string{"list"},
			Description: `List releases defined in state file`,
		}, {
			Name:        []string{"repos"},
			Description: `Repos releases defined in state file`,
		}, {
			Name:        []string{"secrets"},
			Description: `Causes the helm-secrets plugin to be executed to decrypt the file`,
		}, {
			Name:        []string{"status"},
			Description: `Retrieve status of releases in state file`,
		}, {
			Name:        []string{"sync"},
			Description: `Sync releases defined in state file`,
		}, {
			Name:        []string{"template"},
			Description: `Template releases defined in state file`,
		}, {
			Name:        []string{"test"},
			Description: `Test charts from state file (helm test)`,
		}, {
			Name:        []string{"version"},
			Description: `Print the CLI version`,
		}, {
			Name:        []string{" write-values"},
			Description: `Write values files for releases. Similar to "helmfile template", write values files instead of manifests`,
		}},
	}
}
