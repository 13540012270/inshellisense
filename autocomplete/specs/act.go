// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["act"] = model.Subcommand{
		Name:        []string{"act"},
		Description: `Run GitHub actions locally by specifying the event name (e.g. "push") or an action name directly`,
		Options: []model.Option{{
			Name:        []string{"--bind", "-b"},
			Description: `Bind working directory to container, rather than copy`,
		}, {
			Name:        []string{"--bug-report"},
			Description: `Display system information for bug report`,
		}, {
			Name:        []string{"--container-cap-add"},
			Description: `Kernel capabilities to add to the workflow containers (e.g. --container-cap-add SYS_PTRACE)`,
			Args: []model.Arg{{
				Name: "container-cap-add",
			}},
		}, {
			Name:        []string{"--container-cap-drop"},
			Description: `Kernel capabilities to remove from the workflow containers (e.g. --container-cap-drop SYS_PTRACE)`,
			Args: []model.Arg{{
				Name: "container-cap-drop",
			}},
		}, {
			Name:        []string{"--defaultbranch"},
			Description: `The name of the main branch`,
			Args: []model.Arg{{
				Name: "defaultbranch",
			}},
		}, {
			Name:        []string{"--detect-event"},
			Description: `Use first event type from workflow as event that triggered the workflow`,
		}, {
			Name:        []string{"--env"},
			Description: `Env to make available to actions with optional value (e.g. --env myenv=foo or --env myenv)`,
			Args: []model.Arg{{
				Name: "env",
			}},
		}, {
			Name:        []string{"--eventpath", "-e"},
			Description: `Path to event JSON file`,
			Args: []model.Arg{{
				Name: "eventpath",
			}},
		}, {
			Name:        []string{"--graph", "-g"},
			Description: `Draw workflows`,
		}, {
			Name:        []string{"--job", "-j"},
			Description: `Run job`,
			Args: []model.Arg{{
				Name: "job",
			}},
		}, {
			Name:        []string{"--list", "-l"},
			Description: `List workflows`,
		}, {
			Name:        []string{"--platform", "-P"},
			Description: `Custom image to use per platform (e.g. -P ubuntu-18.04=nektos/act-environments-ubuntu:18.04)`,
			Args: []model.Arg{{
				Name: "platform",
			}},
		}, {
			Name:        []string{"--privileged"},
			Description: `Use privileged mode`,
		}, {
			Name:        []string{"--pull", "-p"},
			Description: `Pull docker image(s) even if already present`,
		}, {
			Name:        []string{"--rebuild"},
			Description: `Rebuild local action docker image(s) even if already present`,
		}, {
			Name:        []string{"--remote-name"},
			Description: `Git remote name that will be used to retrieve url of git repo`,
			Args: []model.Arg{{
				Name: "remote-name",
			}},
		}, {
			Name:        []string{"--reuse", "-r"},
			Description: `Don't remove container(s) on successfully completed workflow(s) to maintain state between runs`,
		}, {
			Name:        []string{"--rm"},
			Description: `Automatically remove container(s)/volume(s) after a workflow(s) failure`,
		}, {
			Name:        []string{"--secret", "-s"},
			Description: `Secret to make available to actions with optional value (e.g. -s mysecret=foo or -s mysecret)`,
			Args: []model.Arg{{
				Name: "secret",
			}},
		}, {
			Name:        []string{"--use-gitignore"},
			Description: `Controls whether paths specified in .gitignore should be copied into container`,
		}, {
			Name:        []string{"--userns"},
			Description: `User namespace to use`,
			Args: []model.Arg{{
				Name: "userns",
			}},
		}, {
			Name:        []string{"--watch", "-w"},
			Description: `Watch the contents of the local repo and run when files change`,
		}, {
			Name:        []string{"--actor", "-a"},
			Description: `User that triggered the event`,
			Args: []model.Arg{{
				Name: "actor",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--artifact-server-path"},
			Description: `Defines the path where the artifact server stores uploads and retrieves downloads from. If not specified the artifact server will not start`,
			Args: []model.Arg{{
				Name: "artifact-server-path",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--artifact-server-port"},
			Description: `Defines the port where the artifact server listens (will only bind to localhost)`,
			Args: []model.Arg{{
				Name: "artifact-server-port",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--container-architecture"},
			Description: `Architecture which should be used to run containers, e.g.: linux/amd64. If not specified, will use host default architecture. Requires Docker server API Version 1.41+. Ignored on earlier Docker server platforms`,
			Args: []model.Arg{{
				Name: "container-architecture",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--container-daemon-socket"},
			Description: `Path to Docker daemon socket which will be mounted to containers`,
			Args: []model.Arg{{
				Name: "container-daemon-socket",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--directory", "-C"},
			Description: `Working directory`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "directory",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--dryrun", "-n"},
			Description:  `Dryrun mode`,
			IsPersistent: true,
		}, {
			Name:        []string{"--env-file"},
			Description: `Environment file to read and use as env in the containers`,
			Args: []model.Arg{{
				Name: "env-file",
			}},
			IsPersistent: true,
		}, {
			Name:        []string{"--github-instance"},
			Description: `GitHub instance to use. Don't use this if you are not using GitHub Enterprise Server`,
			Args: []model.Arg{{
				Name: "github-instance",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--insecure-secrets"},
			Description:  `NOT RECOMMENDED! Doesn't hide secrets while printing logs`,
			IsPersistent: true,
		}, {
			Name:         []string{"--json"},
			Description:  `Output logs in json format`,
			IsPersistent: true,
		}, {
			Name:         []string{"--no-recurse"},
			Description:  `Flag to disable running workflows from subdirectories of specified path in '--workflows'/'-W' flag`,
			IsPersistent: true,
		}, {
			Name:         []string{"--no-skip-checkout"},
			Description:  `Do not skip actions/checkout`,
			IsPersistent: true,
		}, {
			Name:         []string{"--quiet", "-q"},
			Description:  `Disable logging of output from steps`,
			IsPersistent: true,
		}, {
			Name:        []string{"--secret-file"},
			Description: `File with list of secrets to read from (e.g. --secret-file .secrets)`,
			Args: []model.Arg{{
				Name: "secret-file",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--verbose", "-v"},
			Description:  `Verbose output`,
			IsPersistent: true,
		}, {
			Name:        []string{"--workflows", "-W"},
			Description: `Path to workflow file(s)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders, model.TemplateFilepaths},
				Name:      "workflows",
			}},
			IsPersistent: true,
		}, {
			Name:         []string{"--help", "-h"},
			Description:  `Display help`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"completion"},
			Description: `Generate the autocompletion script for the specified shell`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"bash"},
				Description: `Generate the autocompletion script for bash`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"fish"},
				Description: `Generate the autocompletion script for fish`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"powershell"},
				Description: `Generate the autocompletion script for powershell`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}, {
				Name:        []string{"zsh"},
				Description: `Generate the autocompletion script for zsh`,
				Options: []model.Option{{
					Name:        []string{"--no-descriptions"},
					Description: `Disable completion descriptions`,
				}},
			}},
		}, {
			Name:        []string{"help"},
			Description: `Help about any command`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"completion"},
				Description: `Generate the autocompletion script for the specified shell`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"bash"},
					Description: `Generate the autocompletion script for bash`,
				}, {
					Name:        []string{"fish"},
					Description: `Generate the autocompletion script for fish`,
				}, {
					Name:        []string{"powershell"},
					Description: `Generate the autocompletion script for powershell`,
				}, {
					Name:        []string{"zsh"},
					Description: `Generate the autocompletion script for zsh`,
				}},
			}},
		}},
	}
}
