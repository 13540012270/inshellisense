// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["blitz"] = model.Subcommand{
		Name:        []string{"blitz"},
		Description: `Blitz.js CLI is your single access point for interacting with your app, from database management to code generation`,
		Subcommands: []model.Subcommand{{
			Name:        []string{"build", "b"},
			Description: `Creates a production build`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}},
		}, {
			Name:        []string{"codegen", "cg"},
			Description: `Generates Routes Manifest`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}},
		}, {
			Name:        []string{"console", "c"},
			Description: `Run the Blitz console REPL`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}},
		}, {
			Name:        []string{"db"},
			Description: `Run database commands`,
			Args: []model.Arg{{
				Name:        "command",
				Description: `Run specific db command`,
				Suggestions: []model.Suggestion{{
					Name:        []string{`seed`},
					Description: `Generates seeded data in database via Prisma 2. You need db/seeds.ts or db/seeds/index.ts`,
				}},
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}},
		}, {
			Name:        []string{"dev", "d"},
			Description: `Start a development server`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}, {
				Name:        []string{"-p", "--port"},
				Description: `Set port number`,
				Args: []model.Arg{{
					Name: "port",
				}},
			}, {
				Name:        []string{"-H", "--hostname"},
				Description: `Set server hostname`,
				Args: []model.Arg{{
					Name: "hostname",
				}},
			}, {
				Name:        []string{"--inspect"},
				Description: `Enable the Node.js inspector`,
			}, {
				Name:        []string{"--no-incremental-build"},
				Description: `Disable incremental build and start from a fresh cache`,
			}},
		}, {
			Name:        []string{"export", "e"},
			Description: `Exports a static page`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}, {
				Name:        []string{"-o", "--outdir"},
				Description: `Set the output dir (defaults to 'out')`,
				Args: []model.Arg{{
					Name: "outdir",
				}},
			}},
		}, {
			Name:        []string{"generate", "g"},
			Description: `Generate new files for your Blitz project`,
			Args: []model.Arg{{
				Name:        "type",
				Description: `What files to generate`,
				Suggestions: []model.Suggestion{{
					Name: []string{`all`},
				}, {
					Name: []string{`crud`},
				}, {
					Name: []string{`model`},
				}, {
					Name: []string{`pages`},
				}, {
					Name: []string{`queries`},
				}, {
					Name: []string{`query`},
				}, {
					Name: []string{`mutations`},
				}, {
					Name: []string{`mutation`},
				}, {
					Name: []string{`resource`},
				}},
			}, {
				Name:        "model",
				Description: `The name of your model, like "user". Can be singular or plural - same result`,
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}, {
				Name:        []string{"-c", "--context"},
				Description: `Provide a context folder within which we'll place the generated files for better code organization. You can also supply this in the name of the model to be generated (e.g. "blitz generate query admin/projects"). Combining the "--context" flags and supplying context via the model name in the same command is not supported`,
				Args: []model.Arg{{
					Name: "context",
				}},
			}, {
				Name:        []string{"-p", "--parent"},
				Description: `Specify a parent model to be used for generating nested routes for dependent data when generating pages, or to create hierarchical validation in queries and mutations. The code will be generated with the nested data model in mind. Most often this should be used in conjunction with 'blitz generate all'`,
				Args: []model.Arg{{
					Name: "parent",
				}},
			}, {
				Name:        []string{"-d", "--dry-run"},
				Description: `Show what files will be created without writing them to disk`,
			}},
		}, {
			Name:        []string{"help", "h"},
			Description: `Display help for <%= config.bin %>`,
			Args: []model.Arg{{
				Name:        "command",
				Description: `Command to show help for`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `See all commands in CLI`,
			}},
		}, {
			Name:        []string{"install", "i"},
			Description: `Install a Recipe into your Blitz app`,
			Args: []model.Arg{{
				Name:        "recipe",
				Description: `Name of a Blitz recipe from @blitzjs/blitz/recipes, or a file path to a local recipe definition`,
			}, {
				Name:        "recipe-flags",
				Description: `A list of flags to pass to the recipe. Blitz will only parse these in the form key=value`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}},
		}, {
			Name:        []string{"new"},
			Description: `Create a new Blitz project`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Name of your new project`,
			}},
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}, {
				Name:        []string{"--npm"},
				Description: `Use npm as the package manager`,
			}, {
				Name:        []string{"--yarn"},
				Description: `Use yarn as the package manager`,
			}, {
				Name:        []string{"--form"},
				Description: `A form library`,
				Args: []model.Arg{{
					Name:        "form",
					Suggestions: []model.Suggestion{{Name: []string{`react-final-form`}}, {Name: []string{`react-hook-form`}}, {Name: []string{`formik`}}},
				}},
			}, {
				Name:        []string{"-d", "--dry-run"},
				Description: `Show what files will be created without writing them to disk`,
			}, {
				Name:        []string{"--no-git"},
				Description: `Skip git repository creation`,
			}, {
				Name:        []string{"--skip-upgrade"},
				Description: `Skip blitz upgrade if outdated`,
			}},
		}, {
			Name:        []string{"prisma", "p"},
			Description: `Loads env variables then proxies all args to Prisma CLI`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"init"},
				Description: `Setup Prisma for your app`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Display this help message`,
				}, {
					Name:        []string{"--datasource-provider"},
					Description: `Define the datasource provider to use`,
					Args: []model.Arg{{
						Description: `Choose provider`,
						Suggestions: []model.Suggestion{{Name: []string{`PostgreSQL`}}, {Name: []string{`MySQL`}}, {Name: []string{`SQLite`}}, {Name: []string{`SQLServer`}}, {Name: []string{`MongoDB`}}, {Name: []string{`CockroachDB`}}},
					}},
				}, {
					Name:        []string{"--url"},
					Description: `Define a custom datasource url`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "full url",
					}},
				}},
			}, {
				Name:        []string{"generate"},
				Description: `Generate artifacts (e.g. Prisma Client)`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Display this help message`,
				}, {
					Name:        []string{"--schema"},
					Description: `Custom path to your Prisma schema`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "Schema path",
					}},
				}, {
					Name:        []string{"--data-proxy"},
					Description: `Enable the Data Proxy in the Prisma Client`,
				}, {
					Name:        []string{"--watch"},
					Description: `Watch the Prisma schema and rerun after a change`,
				}},
			}, {
				Name:        []string{"studio"},
				Description: `Open Prisma Studio`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Display this help message`,
				}, {
					Name:        []string{"--schema"},
					Description: `Custom path to your Prisma schema`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "Schema path",
					}},
				}, {
					Name:        []string{"-p", "--port"},
					Description: `Port to start Studio on`,
					Args: []model.Arg{{
						Name: "port",
					}},
				}, {
					Name:        []string{"-b", "--browser"},
					Description: `Browser to open Studio in`,
					Args: []model.Arg{{
						Name:        "Browser choice",
						Suggestions: []model.Suggestion{{Name: []string{`firefox`}}, {Name: []string{`chrome`}}, {Name: []string{`safari`}}, {Name: []string{`none`}}},
					}},
				}, {
					Name:        []string{"-n", "--hostname"},
					Description: `Hostname to bind the Express server to`,
					Args: []model.Arg{{
						Name: "port",
					}},
				}},
			}, {
				Name:        []string{"format"},
				Description: `Format your schema`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Display this help message`,
				}, {
					Name:        []string{"--schema"},
					Description: `Custom path to your Prisma schema`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "Schema path",
					}},
				}},
			}, {
				Name:        []string{"migrate"},
				Description: `Migrate your database`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"dev"},
					Description: `The migrate dev command updates your database using migrations files during development`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--skip-seed"},
						Description: `Skip triggering seed`,
					}, {
						Name:        []string{"--skip-generate"},
						Description: `Skip triggering generators (e.g. Prisma Client)`,
					}, {
						Name:        []string{"--create-only"},
						Description: `Create a new migration but do not apply it. The migration will be empty if there are no changes in Prisma schema`,
					}, {
						Name:        []string{"-n", "--name"},
						Description: `The name of the migration. If no name is provided, the CLI will prompt you`,
						Args: []model.Arg{{
							Name:       "filename",
							IsOptional: true,
						}},
					}},
				}, {
					Name:        []string{"reset"},
					Description: `Reset your database and apply all migrations, all data will be lost`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--skip-seed"},
						Description: `Skip triggering seed`,
					}, {
						Name:        []string{"--skip-generate"},
						Description: `Skip triggering generators (e.g. Prisma Client)`,
					}, {
						Name:        []string{"-f", "--force"},
						Description: `Skip the confirmation prompt`,
					}},
				}, {
					Name:        []string{"deploy"},
					Description: `Apply pending migrations to update the database schema in production/staging`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}},
				}, {
					Name:        []string{"resolve"},
					Description: `Resolve issues with database migrations in deployment databases`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--applied"},
						Description: `Record a specific migration as applied`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "migration file path",
						}},
					}, {
						Name:        []string{"--rolled-back"},
						Description: `Record a specific migration as rolled back`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "migration file path",
						}},
					}},
				}, {
					Name:        []string{"status"},
					Description: `Check the status of your database migrations`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}},
				}, {
					Name:        []string{"diff"},
					Description: `Compares the database schema from two arbitrary sources, and outputs the differences either as a human-readable summary (by default) or an executable script`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--from-url"},
						Description: `A datasource url`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--to-url"},
						Description: `A datasource url`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--from-empty"},
						Description: `Flag to assume from is an empty datamodel`,
					}, {
						Name:        []string{"--to-empty"},
						Description: `Flag to assume to is an empty datamodel`,
					}, {
						Name:        []string{"--from-schema-datamodel"},
						Description: `Path to a Prisma schema file, uses the 'datamodel' for the diff`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--to-schema-datamodel"},
						Description: `Path to a Prisma schema file, uses the 'datamodel' for the diff`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--from-schema-datasource"},
						Description: `Path to a Prisma schema file, uses the 'datasource url' for the diff`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--to-schema-datasource"},
						Description: `Path to a Prisma schema file, uses the 'datasource url' for the diff`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--from-migrations"},
						Description: `Path to the Prisma Migrate migrations directory`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFolders},
							Name:      "folder",
						}},
					}, {
						Name:        []string{"--to-migrations"},
						Description: `Path to the Prisma Migrate migrations directory`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFolders},
							Name:      "folder",
						}},
					}, {
						Name:        []string{"--shadow-database-url"},
						Description: `URL for the shadow database. Only required if using --from-migrations or --to-migrations`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--script"},
						Description: `Render a SQL script to stdout instead of the default human readable summary (not supported on MongoDB)`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--exit-code"},
						Description: `Change the exit code behavior to signal if the diff is empty or not (Empty: 0, Error: 1, Not empty: 2). Default behavior is Success: 0, Error: 1."`,
					}},
				}},
			}, {
				Name:        []string{"db"},
				Description: `Manage your database schema and lifecycle (Preview)`,
				Subcommands: []model.Subcommand{{
					Name: []string{"pull"},
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--force"},
						Description: `Ignore current Prisma schema file`,
					}, {
						Name:        []string{"--print"},
						Description: `Print the introspected Prisma schema to stdout`,
					}, {
						Name:        []string{"--url"},
						Description: `The datasource url`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--composite-type-depth"},
						Description: `Specify the depth for introspecting composite types (e.g. Embedded Documents in MongoDB). Number, default is -1 for infinite depth, 0 = off`,
						Args: []model.Arg{{
							Name: "number",
						}},
					}},
				}, {
					Name:        []string{"push"},
					Description: `This command pushes the state of your Prisma schema file to the database without using migrations files`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--skip-generate"},
						Description: `Skip generation of artifacts such as Prisma Client`,
					}, {
						Name:        []string{"--force-reset"},
						Description: `Resets the database and then updates the schema - useful if you need to start from scratch due to unexecutable migrations`,
					}, {
						Name:        []string{"--accept-data-loss"},
						Description: `Ignore data loss warnings. This option is required if as a result of making the schema changes, data may be lost`,
					}},
				}, {
					Name:        []string{"seed"},
					Description: `Seed your database`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}},
				}, {
					Name:        []string{"execute"},
					Description: `Execute native commands to your database`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--url"},
						Description: `The datasource url`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--file"},
						Description: `Path to a file. The content will be sent as the script to be executed`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--stdin"},
						Description: `Use the terminal standard input as the script to be executed`,
					}},
				}},
			}, {
				Name:        []string{"version", "-v"},
				Description: `Print current version of Prisma components`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"--json"},
					Description: `Output JSON`,
				}},
			}},
		}, {
			Name:        []string{"routes", "r"},
			Description: `Display all Blitz URL Routes`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}},
		}, {
			Name:        []string{"start", "s"},
			Description: `Start the production server`,
			Options: []model.Option{{
				Name:        []string{"--help", "-h"},
				Description: `Show help for command`,
			}, {
				Name:        []string{"-p", "--port"},
				Description: `Set port number`,
				Args: []model.Arg{{
					Name: "port",
				}},
			}, {
				Name:        []string{"-H", "--hostname"},
				Description: `Set server hostname`,
				Args: []model.Arg{{
					Name: "hostname",
				}},
			}, {
				Name:        []string{"--inspect"},
				Description: `Enable the Node.js inspector`,
			}},
		}, {
			Name:        []string{"autocomplete"},
			Description: `Display autocomplete installation instructions`,
			Args: []model.Arg{{
				Name:        "shell",
				Description: `Shell type`,
				Suggestions: []model.Suggestion{{Name: []string{`zsh`}}, {Name: []string{`bash`}}},
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-r", "--refresh-cache"},
				Description: `Refresh cache (ignores displaying instructions)`,
			}},
		}},
	}
}
