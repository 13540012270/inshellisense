// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["watchman"] = model.Subcommand{
		Name:        []string{"watchman"},
		Description: `A file watching service`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for watchman`,
		}, {
			Name:        []string{"--inetd"},
			Description: `Spawning from an inetd style supervisor`,
		}, {
			Name:        []string{"-S", "--no-site-spawner"},
			Description: `Don't use the site or system spawner`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Show version number for watchman`,
		}, {
			Name:        []string{"--named-pipe-path"},
			Description: `Specify alternate named pipe path`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The alternate named pipe path`,
			}},
		}, {
			Name:        []string{"-u"},
			Description: `Specify alternate unix domain socket path`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The alternate unix domain socket path`,
			}},
		}, {
			Name:        []string{"--unix-listener-path"},
			Description: `Specify alternate unix domain socket path`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The alernate unix domain socket path`,
			}},
		}, {
			Name:        []string{"-o"},
			Description: `Specify the path to logfile`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The path to logfile`,
			}},
		}, {
			Name:        []string{"--logfile"},
			Description: `Specify the path to logfile`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The path to logfile`,
			}},
		}, {
			Name:        []string{"--log-level"},
			Description: `Set the log level`,
			Args: []model.Arg{{
				Name:        "level",
				Description: `The log level`,
				Suggestions: []model.Suggestion{{Name: []string{`0`}}, {Name: []string{`1`}}, {Name: []string{`2`}}},
			}},
		}, {
			Name:        []string{"--pidfile"},
			Description: `Specify path to pidfile`,
		}, {
			Name:        []string{"-p", "--persistent"},
			Description: `Persist and wait for further responses`,
		}, {
			Name:        []string{"-n", "--no-save-state"},
			Description: `Don't save state between invocations`,
		}, {
			Name:        []string{"--statefile"},
			Description: `Specify path to file to hold watch and trigger state`,
			Args: []model.Arg{{
				Name:        "path",
				Description: `The path to file to hold watch and trigger state`,
			}},
		}, {
			Name:        []string{"-j", "--json-command"},
			Description: `Instead of parsing CLI arguments, take a single json object from stdin`,
		}, {
			Name:        []string{"--output-encoding"},
			Description: `CLI output encoding`,
			Args: []model.Arg{{
				Name:        "encoding",
				Description: `The output encoding`,
				Suggestions: []model.Suggestion{{Name: []string{`json`}}, {Name: []string{`bser`}}},
			}},
		}, {
			Name:        []string{"--server-encoding"},
			Description: `CLI<->server encoding`,
			Args: []model.Arg{{
				Name:        "encoding",
				Description: `The server encoding`,
				Suggestions: []model.Suggestion{{Name: []string{`bser`}}, {Name: []string{`json`}}},
			}},
		}, {
			Name:        []string{"-f", "--foreground"},
			Description: `Run the service in the foreground`,
		}, {
			Name:        []string{"--no-pretty"},
			Description: `Don't pretty print JSON`,
		}, {
			Name:        []string{"--no-spawn"},
			Description: `Don't try to start the service if it is not available`,
		}, {
			Name:        []string{"--no-local"},
			Description: `When no-spawn is enabled, don't try to handle request in client mode if service is unavailable`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"clock"},
			Description: `Returns the current clock value for a watched root`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "path",
				Description: `The path to directory`,
			}},
		}, {
			Name:        []string{"find"},
			Description: `Finds all files that match the optional list of patterns under the specified dir`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "path",
				Description: `The path to directory`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"flush-subscriptions"},
			Description: `This is designed to be used by interactive programs that have a background process or daemon maintaining a subscription to Watchman`,
		}, {
			Name:        []string{"get-config"},
			Description: `Returns the .watchmanconfig for the root`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"path"},
				Description: `The path to root`,
			}},
		}, {
			Name:        []string{"get-sockname"},
			Description: `Get socket path`,
		}, {
			Name:        []string{"list-capabilities"},
			Description: `Returns the full list of supported capabilities offered by the watchman server`,
		}, {
			Name:        []string{"log"},
			Description: `Generates a log line in the watchman log`,
			Args: []model.Arg{{
				Name:        "level",
				Description: `The log level`,
				Suggestions: []model.Suggestion{{Name: []string{`debug`}}, {Name: []string{`error`}}, {Name: []string{`off`}}},
			}},
		}, {
			Name:        []string{"log-level"},
			Description: `Changes the log level of your connection to the watchman service`,
			Args: []model.Arg{{
				Name:        "level",
				Description: `The log level`,
				Suggestions: []model.Suggestion{{Name: []string{`debug`}}, {Name: []string{`error`}}, {Name: []string{`off`}}},
			}},
		}, {
			Name:        []string{"query"},
			Description: `Executes a query against the specified root`,
		}, {
			Name:        []string{"shutdown-server"},
			Description: `This causes your watchman service to exit with a normal status code`,
		}, {
			Name:        []string{"since"},
			Description: `Finds all files that were modified since the specified clockspec that match the optional list of patterns`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "path",
				Description: `The path to directory`,
			}},
		}, {
			Name:        []string{"state-enter"},
			Description: `This causes a watch to be marked as being in a particular named state`,
		}, {
			Name:        []string{"state-leave"},
			Description: `This causes a watch to no longer be marked as being in a particular named state`,
		}, {
			Name:        []string{"subscribe"},
			Description: `Subscribes to changes against a specified root and requests that they be sent to the client via its connection`,
		}, {
			Name:        []string{"trigger"},
			Description: `This will create or replace a trigger`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "path",
				Description: `The path to directory`,
			}},
		}, {
			Name:        []string{"trigger-del"},
			Description: `Deletes a named trigger from the list of registered triggers`,
		}, {
			Name:        []string{"trigger-list"},
			Description: `Returns the set of registered triggers associated with a root directory`,
		}, {
			Name:        []string{"unsubscribe"},
			Description: `Cancels a named subscription against the specified root`,
		}, {
			Name:        []string{"version"},
			Description: `The version and build information for the currently running watchman service`,
		}, {
			Name:        []string{"watch-del"},
			Description: `Removes a watch and any associated triggers`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "path",
				Description: `The path to directory`,
			}},
		}, {
			Name:        []string{"watch-del-all"},
			Description: `Removes all watches and associated triggers`,
		}, {
			Name:        []string{"watch-list"},
			Description: `Returns a list of watched dirs`,
		}, {
			Name:        []string{"watch-project"},
			Description: `Requests that the project containing the requested dir is watched for changes`,
		}},
	}
}
