// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["tsc"] = model.Subcommand{
		Name:        []string{"tsc"},
		Description: `CLI tool for TypeScript compiler`,
		Args: []model.Arg{{
			Name:      "tsc script",
			Generator: nil, // TODO: port over generator
		}},
		Options: []model.Option{{
			Name:        []string{"--all"},
			Description: `Show all compiler options`,
		}, {
			Name:        []string{"--generateTrace"},
			Description: `Generates an event trace and a list of types`,
		}, {
			Name:        []string{"--help"},
			Description: `Gives local information for help on the CLI`,
		}, {
			Name:        []string{"--init"},
			Description: `Initializes a TypeScript project and creates a tsconfig.json file`,
		}, {
			Name:        []string{"--listFilesOnly"},
			Description: `Print names of files that are part of the compilation and then stop processing`,
		}, {
			Name:        []string{"--locale"},
			Description: `Set the language of the messaging from TypeScript. This does not affect emit`,
		}, {
			Name:        []string{"--project"},
			Description: `Compile the project given the path to its configuration file, or to a folder with a tsconfig.json`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--showConfig"},
			Description: `Print the final configuration instead of building`,
		}, {
			Name:        []string{"--version"},
			Description: `Print the compiler's version`,
		}, {
			Name:        []string{"--build"},
			Description: `Build one or more projects and their dependencies, if out of date`,
		}, {
			Name:        []string{"--clean"},
			Description: `Delete the outputs of all projects`,
		}, {
			Name:        []string{"--dry"},
			Description: `Show what would be built (or deleted, if specified with '--clean')`,
		}, {
			Name:        []string{"--force"},
			Description: `Build all projects, including those that appear to be up to date`,
		}, {
			Name:        []string{"--verbose"},
			Description: `Enable verbose logging`,
		}, {
			Name:        []string{"--excludeDirectories"},
			Description: `Remove a list of directories from the watch process`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "dir",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--excludeFiles"},
			Description: `Remove a list of files from the watch mode's processing`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "files",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--fallbackPolling"},
			Description: `Specify what approach the watcher should use if the system runs out of native file watchers`,
			Args: []model.Arg{{
				Name:        "approach",
				Suggestions: []model.Suggestion{{Name: []string{`fixedPollingInterval`}}, {Name: []string{`priorityPollingInterval`}}, {Name: []string{`dynamicPriorityPolling`}}},
			}},
		}, {
			Name:        []string{"--synchronousWatchDirectory"},
			Description: `Synchronously call callbacks and update the state of directory watchers on platforms that don"t support recursive watching natively`,
		}, {
			Name:        []string{"--watch"},
			Description: `Watch input files`,
		}, {
			Name:        []string{"--watchDirectory"},
			Description: `Specify how directories are watched on systems that lack recursive file-watching functionality`,
			Args: []model.Arg{{
				Name:        "approach",
				Suggestions: []model.Suggestion{{Name: []string{`fixedPollingInterval`}}, {Name: []string{`dynamicPriorityPolling`}}, {Name: []string{`useFsEvents`}}},
			}},
		}, {
			Name:        []string{"--watchFile"},
			Description: `Specify how the TypeScript watch mode works`,
			Args: []model.Arg{{
				Name:        "approach",
				Suggestions: []model.Suggestion{{Name: []string{`fixedPollingInterval`}}, {Name: []string{`priorityPollingInterval`}}, {Name: []string{`dynamicPriorityPolling`}}, {Name: []string{`useFsEvents`}}, {Name: []string{`useFsEventsOnParentDirectory`}}},
			}},
		}, {
			Name:        []string{"--allowJs"},
			Description: `Allow JavaScript files to be a part of your program. Use the checkJS option to get errors from these files`,
		}, {
			Name:        []string{"--allowSyntheticDefaultImports"},
			Description: `Allow 'import x from y' when a module doesn't have a default export`,
		}, {
			Name:        []string{"--allowUmdGlobalAccess"},
			Description: `Allow accessing UMD globals from modules`,
		}, {
			Name:        []string{"--allowUnreachableCode"},
			Description: `Disable error reporting for unreachable code`,
		}, {
			Name:        []string{"--allowUnusedLabels"},
			Description: `Disable error reporting for unused label`,
		}, {
			Name:        []string{"--alwaysStrict"},
			Description: `Ensure 'use strict' is always emitted`,
		}, {
			Name:        []string{"--assumeChangesOnlyAffectDirectDependencies"},
			Description: `Have recompiles in projects that use incremental and watch mode assume that changes within a file will only affect files directly depending on it`,
		}, {
			Name:        []string{"--baseUrl"},
			Description: `Specify the base directory to resolve non-relative module names`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "directory",
			}},
		}, {
			Name:        []string{"--checkJs"},
			Description: `Enable error reporting in type-checked JavaScript files`,
		}, {
			Name:        []string{"--composite"},
			Description: `Enable constraints that allow a TypeScript project to be used with project references`,
		}, {
			Name:        []string{"--declaration"},
			Description: `Generate .d.ts files from TypeScript and JavaScript files in your project`,
		}, {
			Name:        []string{"--declarationDir"},
			Description: `Specify the output directory for generated declaration files`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "string",
			}},
		}, {
			Name:        []string{"--declarationMap"},
			Description: `Create sourcemaps for d.ts files`,
		}, {
			Name:        []string{"--diagnostics"},
			Description: `Output compiler performance information after building`,
		}, {
			Name:        []string{"--disableReferencedProjectLoad"},
			Description: `Reduce the number of projects loaded automatically by TypeScript`,
		}, {
			Name:        []string{"--disableSizeLimit"},
			Description: `Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server`,
		}, {
			Name:        []string{"--disableSolutionSearching"},
			Description: `Opt a project out of multi-project reference checking when editing`,
		}, {
			Name:        []string{"--disableSourceOfProjectReferenceRedirect"},
			Description: `Disable preferring source files instead of declaration files when referencing composite projects`,
		}, {
			Name:        []string{"--downlevelIteration"},
			Description: `Emit more compliant, but verbose and less performant JavaScript for iteration`,
		}, {
			Name:        []string{"--emitBOM"},
			Description: `Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files`,
		}, {
			Name:        []string{"--emitDeclarationOnly"},
			Description: `Only output d.ts files and not JavaScript files`,
		}, {
			Name:        []string{"--emitDecoratorMetadata"},
			Description: `Emit design-type metadata for decorated declarations in source files`,
		}, {
			Name:        []string{"--esModuleInterop"},
			Description: `Emit additional JavaScript to ease support for importing CommonJS modules. This enables allowSyntheticDefaultImports for type compatibility`,
		}, {
			Name:        []string{"--exactOptionalPropertyTypes"},
			Description: `Differentiate between undefined and not present when type checking`,
		}, {
			Name:        []string{"--experimentalDecorators"},
			Description: `Enable experimental support for TC39 stage 2 draft decorators`,
		}, {
			Name:        []string{"--explainFiles"},
			Description: `Print files read during the compilation including why it was included`,
		}, {
			Name:        []string{"--extendedDiagnostics"},
			Description: `Output more detailed compiler performance information after building`,
		}, {
			Name:        []string{"--forceConsistentCasingInFileNames"},
			Description: `Ensure that casing is correct in imports`,
		}, {
			Name:        []string{"--generateCpuProfile"},
			Description: `Emit a v8 CPU profile of the compiler run for debugging`,
		}, {
			Name:        []string{"--importHelpers"},
			Description: `Allow importing helper functions from tslib once per project, instead of including them per-file`,
		}, {
			Name:        []string{"--importsNotUsedAsValues"},
			Description: `Specify emit/checking behavior for imports that are only used for types`,
			Args: []model.Arg{{
				Name:        "type",
				Suggestions: []model.Suggestion{{Name: []string{`remove`}}, {Name: []string{`preserve`}}, {Name: []string{`error`}}},
			}},
		}, {
			Name:        []string{"--incremental"},
			Description: `Save .tsbuildinfo files to allow for incremental compilation of projects`,
		}, {
			Name:        []string{"--inlineSourceMap"},
			Description: `Include sourcemap files inside the emitted JavaScript`,
		}, {
			Name:        []string{"--inlineSources"},
			Description: `Include source code in the sourcemaps inside the emitted JavaScript`,
		}, {
			Name:        []string{"--isolatedModules"},
			Description: `Ensure that each file can be safely transpiled without relying on other imports`,
		}, {
			Name:        []string{"--jsx"},
			Description: `Specify what JSX code is generated`,
			Args: []model.Arg{{
				Name:        "type",
				Suggestions: []model.Suggestion{{Name: []string{`react`}}, {Name: []string{`react-jsx`}}, {Name: []string{`react-jsxdev`}}, {Name: []string{`react-native`}}, {Name: []string{`preserve`}}},
			}},
		}, {
			Name:        []string{"--jsxFactory"},
			Description: `Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'`,
			Args: []model.Arg{{
				Name: "JSX factory function",
			}},
		}, {
			Name:        []string{"--jsxFragmentFactory"},
			Description: `Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'`,
			Args: []model.Arg{{
				Name: "JSX fragment",
			}},
		}, {
			Name:        []string{"--jsxImportSource"},
			Description: `Specify module specifier used to import the JSX factory functions when using jsx: react-jsx*`,
			Args: []model.Arg{{
				Name: "string",
			}},
		}, {
			Name:        []string{"--keyofStringsOnly"},
			Description: `Make keyof only return strings instead of string, numbers or symbols. Legacy option`,
		}, {
			Name:        []string{"--lib"},
			Description: `Specify a set of bundled library declaration files that describe the target runtime environment`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "list",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--listEmittedFiles"},
			Description: `Print the names of emitted files after a compilation`,
		}, {
			Name:        []string{"--listFiles"},
			Description: `Print all of the files read during the compilation`,
		}, {
			Name:        []string{"--mapRoot"},
			Description: `Specify the location where debugger should locate map files instead of generated locations`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "string",
			}},
		}, {
			Name:        []string{"--maxNodeModuleJsDepth"},
			Description: `Specify the maximum folder depth used for checking JavaScript files from node_modules. Only applicable with allowJs`,
			Args: []model.Arg{{
				Name: "number",
			}},
		}, {
			Name:        []string{"--module"},
			Description: `Specify what module code is generated`,
			Args: []model.Arg{{
				Name:        "module",
				Suggestions: []model.Suggestion{{Name: []string{`ES6`}}, {Name: []string{`ES2015`}}, {Name: []string{`ES2020`}}, {Name: []string{`None`}}, {Name: []string{`UMD`}}, {Name: []string{`AMD`}}, {Name: []string{`System`}}, {Name: []string{`ESNext`}}, {Name: []string{`CommonJS`}}},
			}},
		}, {
			Name:        []string{"--moduleResolution"},
			Description: `Specify how TypeScript looks up a file from a given module specifier`,
			Args: []model.Arg{{
				Name: "module",
			}},
		}, {
			Name:        []string{"--newLine"},
			Description: `Set the newline character for emitting files`,
			Args: []model.Arg{{
				Name: "character",
			}},
		}, {
			Name:        []string{"--noEmit"},
			Description: `Disable emitting file from a compilation`,
		}, {
			Name:        []string{"--noEmitHelpers"},
			Description: `Disable generating custom helper functions like __extends in compiled output`,
		}, {
			Name:        []string{"--noEmitOnError"},
			Description: `Disable emitting files if any type checking errors are reported`,
		}, {
			Name:        []string{"--noErrorTruncation"},
			Description: `Disable truncating types in error messages`,
		}, {
			Name:        []string{"--noFallthroughCasesInSwitch"},
			Description: `Enable error reporting for fallthrough cases in switch statements`,
		}, {
			Name:        []string{"--noImplicitAny"},
			Description: `Enable error reporting for expressions and declarations with an implied any type`,
		}, {
			Name:        []string{"--noImplicitOverride"},
			Description: `Ensure overriding members in derived classes are marked with an override modifier`,
		}, {
			Name:        []string{"--noImplicitReturns"},
			Description: `Enable error reporting for codepaths that do not explicitly return in a function`,
		}, {
			Name:        []string{"--noImplicitThis"},
			Description: `Enable error reporting when this is given the type any`,
		}, {
			Name:        []string{"--noImplicitUseStrict"},
			Description: `Disable adding 'use strict' directives in emitted JavaScript files`,
		}, {
			Name:        []string{"--noLib"},
			Description: `Disable including any library files, including the default lib.d.ts`,
		}, {
			Name:        []string{"--noPropertyAccessFromIndexSignature"},
			Description: `Enforces using indexed accessors for keys declared using an indexed type`,
		}, {
			Name:        []string{"--noResolve"},
			Description: `Disallow imports, requires or <reference>s from expanding the number of files TypeScript should add to a project`,
		}, {
			Name:        []string{"--noStrictGenericChecks"},
			Description: `Disable strict checking of generic signatures in function types`,
		}, {
			Name:        []string{"--noUncheckedIndexedAccess"},
			Description: `Add undefined to a type when accessed using an index`,
		}, {
			Name:        []string{"--noUnusedLocals"},
			Description: `Enable error reporting when a local variables aren't read`,
		}, {
			Name:        []string{"--noUnusedParameters"},
			Description: `Raise an error when a function parameter isn't read`,
		}, {
			Name:        []string{"--outDir"},
			Description: `Specify an output folder for all emitted files`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "string",
			}},
		}, {
			Name:        []string{"--outFile"},
			Description: `Specify a file that bundles all outputs into one JavaScript file. If declaration is true, also designates a file that bundles all .d.ts output`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "string",
			}},
		}, {
			Name:        []string{"--paths"},
			Description: `Specify a set of entries that re-map imports to additional lookup locations`,
			Args: []model.Arg{{
				Name: "object",
			}},
		}, {
			Name:        []string{"--plugins"},
			Description: `Specify a list of language service plugins to include`,
			Args: []model.Arg{{
				Name:       "plugins",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--preserveConstEnums"},
			Description: `Disable erasing const enum declarations in generated code`,
		}, {
			Name:        []string{"--preserveSymlinks"},
			Description: `Disable resolving symlinks to their realpath. This correlates to the same flag in node`,
		}, {
			Name:        []string{"--preserveWatchOutput"},
			Description: `Disable wiping the console in watch mode`,
		}, {
			Name:        []string{"--pretty"},
			Description: `Enable color and formatting in output to make compiler errors easier to read`,
		}, {
			Name:        []string{"--reactNamespace"},
			Description: `Specify the object invoked for createElement. This only applies when targeting react JSX emit`,
			Args: []model.Arg{{
				Name: "object",
			}},
		}, {
			Name:        []string{"--removeComments"},
			Description: `Disable emitting comments`,
		}, {
			Name:        []string{"--resolveJsonModule"},
			Description: `Enable importing .json files`,
		}, {
			Name:        []string{"--rootDir"},
			Description: `Specify the root folder within your source files`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "string",
			}},
		}, {
			Name:        []string{"--rootDirs"},
			Description: `Allow multiple folders to be treated as one when resolving modules`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "string",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--skipDefaultLibCheck"},
			Description: `Skip type checking .d.ts files that are included with TypeScript`,
		}, {
			Name:        []string{"--skipLibCheck"},
			Description: `Skip type checking all .d.ts files`,
		}, {
			Name:        []string{"--sourceMap"},
			Description: `Create source map files for emitted JavaScript files`,
		}, {
			Name:        []string{"--sourceRoot"},
			Description: `Specify the root path for debuggers to find the reference source code`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths, model.TemplateFolders},
				Name:      "string",
			}},
		}, {
			Name:        []string{"--strict"},
			Description: `Enable all strict type checking options`,
		}, {
			Name:        []string{"--strictBindCallApply"},
			Description: `Check that the arguments for bind, call, and apply methods match the original function`,
		}, {
			Name:        []string{"--strictFunctionTypes"},
			Description: `When assigning functions, check to ensure parameters and the return values are subtype-compatible`,
		}, {
			Name:        []string{"--strictNullChecks"},
			Description: `When type checking, take into account null and undefined`,
		}, {
			Name:        []string{"--strictPropertyInitialization"},
			Description: `Check for class properties that are declared but not set in the constructor`,
		}, {
			Name:        []string{"--stripInternal"},
			Description: `Disable emitting declarations that have @internal in their JSDoc comments`,
		}, {
			Name:        []string{"--suppressExcessPropertyErrors"},
			Description: `Disable reporting of excess property errors during the creation of object literals`,
		}, {
			Name:        []string{"--suppressImplicitAnyIndexErrors"},
			Description: `Suppress noImplicitAny errors when indexing objects that lack index signatures`,
		}, {
			Name:        []string{"--target"},
			Description: `Set the JavaScript language version for emitted JavaScript and include compatible library declarations`,
			Args: []model.Arg{{
				Suggestions: []model.Suggestion{{Name: []string{`ES3`}}, {Name: []string{`ES5`}}, {Name: []string{`ES6`}}, {Name: []string{`ES2015`}}, {Name: []string{`ES7`}}, {Name: []string{`ES2016`}}, {Name: []string{`ES2017`}}, {Name: []string{`ES2018`}}, {Name: []string{`ES2019`}}, {Name: []string{`ES2020`}}, {Name: []string{`ESNext`}}},
			}},
		}, {
			Name:        []string{"--traceResolution"},
			Description: `Log paths used during the moduleResolution process`,
		}, {
			Name:        []string{"--tsBuildInfoFile"},
			Description: `Specify the folder for .tsbuildinfo incremental compilation files`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "string",
			}},
		}, {
			Name:        []string{"--typeRoots"},
			Description: `Specify multiple folders that act like ./node_modules/@types`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "folders",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--types"},
			Description: `Specify type package names to be included without being referenced in a source file`,
			Args: []model.Arg{{
				Name:       "package names",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--useDefineForClassFields"},
			Description: `Emit ECMAScript-standard-compliant class fields`,
		}, {
			Name:        []string{"--useUnknownInCatchVariables"},
			Description: `Default catch clause variables as unknown instead of any`,
		}},
	}
}
