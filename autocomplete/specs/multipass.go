// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["multipass"] = model.Subcommand{
		Name:        []string{"multipass"},
		Description: `Create, control and connect to Ubuntu instances`,
		Options: []model.Option{{
			Name:         []string{"-h", "--help"},
			Description:  `Displays help on commandline options`,
			IsPersistent: true,
		}, {
			Name:         []string{"--help-all"},
			Description:  `Displays help including Qt specific options`,
			IsPersistent: true,
		}, {
			Name:         []string{"-v", "--verbose"},
			Description:  `Increase logging verbosity. Repeat the 'v' in the short option for more detail. Maximum verbosity is obtained with 4 (or more) v's, i.e. -vvvv`,
			IsPersistent: true,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"alias"},
			Description: `Create an alias`,
			Args: []model.Arg{{
				Name:       "options",
				IsOptional: true,
			}, {
				Name:        "definition",
				Description: `Alias definition in the form <instance>:<command>`,
			}, {
				Name:        "name",
				Description: `Name given to the alias being defined, defaults to <command>`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"aliases"},
			Description: `List available aliases`,
			Options: []model.Option{{
				Name:        []string{"--format"},
				Description: `Output list in the requested format. Valid formats are: table (default), json, csv and yaml`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`csv`}}, {Name: []string{`yaml`}}},
				}},
			}},
		}, {
			Name:        []string{"delete"},
			Description: `Delete instances`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Name of instances to delete`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Delete all instances`,
			}, {
				Name:        []string{"-p", "--purge"},
				Description: `Purge instances immediately`,
			}},
		}, {
			Name:        []string{"exec"},
			Description: `Run a command on an instance`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Name of the instance to run the command on`,
				Generator:   nil, // TODO: port over generator
			}, {
				Name:        "command",
				Description: `Command to execute on the instance`,
			}},
		}, {
			Name:        []string{"find"},
			Description: `Display available images to create instances from`,
			Args: []model.Arg{{
				Name:        "string",
				Description: `An optional value to search for in [<remote:>]<string> format, where <remote> can be either 'release' or 'daily'. If <remote> is omitted, it will search 'release' first, and if no matches are found, it will then search 'daily'. <string> can be a partial image hash or an Ubuntu release version, codename or alias.`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--format"},
				Description: `Output list in the requested format. Valid formats are: table (default), json, csv and yaml`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`csv`}}, {Name: []string{`yaml`}}},
				}},
			}, {
				Name:        []string{"--show-unsupported"},
				Description: `Show unsupported cloud images as well`,
			}},
		}, {
			Name:        []string{"get"},
			Description: `Get a configuration setting`,
			Args: []model.Arg{{
				Name:        "key",
				Description: `Path to the setting whose configured value should be obtained`,
				Suggestions: []model.Suggestion{{Name: []string{`client.gui.autostart`}}, {Name: []string{`client.gui.hotkey`}}, {Name: []string{`client.primary-name`}}, {Name: []string{`local.bridged-network`}}, {Name: []string{`local.driver`}}, {Name: []string{`local.privileged-mounts`}}},
			}},
			Options: []model.Option{{
				Name:        []string{"--raw"},
				Description: `Output in raw format. For now, this affects only the representation of empty values (i.e. "" instead of "<empty>")`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Display help about a command`,
			Args: []model.Arg{{
				Name:        "command",
				Description: `Name of command to display help for`,
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"info"},
			Description: `Display information about instances`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Names of instances to display information about`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--format"},
				Description: `Output list in the requested format. Valid formats are: table (default), json, csv and yaml`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`csv`}}, {Name: []string{`yaml`}}},
				}},
			}, {
				Name:        []string{"--all"},
				Description: `Display info for all instances`,
			}},
		}, {
			Name:        []string{"launch"},
			Description: `Create and start an Ubuntu instance`,
			Args: []model.Arg{{
				Name:        "image",
				Description: `Optional image to launch. If omitted, then the default Ubuntu LTS will be used`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--timeout"},
				Description: `Maximum time, in seconds, to wait for the command to complete. Note that some background operations may continue beyond that. By default, instance startup and initialization is limited to 5 minutes each`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}, {
				Name:        []string{"-c", "--cpus"},
				Description: `Number of CPUs to allocate. Minimum: 1, default: 1`,
				Args: []model.Arg{{
					Name: "cpus",
				}},
			}, {
				Name:        []string{"-d", "--disk"},
				Description: `Disk space to allocate. Positive integers, in bytes, or with K, M, G suffix Minimum: 512M, default: 5G.`,
				Args: []model.Arg{{
					Name: "disk",
				}},
			}, {
				Name:        []string{"-m", "--mem"},
				Description: `Amount of memory to allocate. Positive integers, in bytes, or with K, M, G suffix Minimum: 128M, default: 1G.`,
				Args: []model.Arg{{
					Name: "mem",
				}},
			}, {
				Name:        []string{"-n", "--name"},
				Description: `Name for the instance. If it is 'primary' (the configured primary instance name), the user's home directory is mounted inside the newly launched instance, in 'Home'`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"--cloud-init"},
				Description: `Path to a user-data cloud-init configuration, or '-' forstdin`,
				Args: []model.Arg{{
					Name: "file",
				}},
			}, {
				Name:        []string{"--network"},
				Description: `Add a network interface to the instance, where <spec> is in the "key=value,key=value" format`,
				Args: []model.Arg{{
					Name: "spec",
				}},
			}, {
				Name:        []string{"--bridged"},
				Description: `Adds one "--network bridged" network`,
			}},
		}, {
			Name:        []string{"list"},
			Description: `List all available instances`,
			Options: []model.Option{{
				Name:        []string{"--format"},
				Description: `Output list in the requested format. Valid formats are: table (default), json, csv and yaml`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`csv`}}, {Name: []string{`yaml`}}},
				}},
			}},
		}, {
			Name:        []string{"mount"},
			Description: `Mount a local directory in the instance`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "source",
				Description: `Path to the local directory to mount`,
			}, {
				Name:        "target",
				Description: `Target mount points, in <name>[:<path>] format, where <name> is an instance name, and optional <path> is the mount point. If omitted, the mount point will be the same as the source's absolute path`,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-g", "--gid-map"},
				Description: `A mapping of group IDs for use in the mount. File and folder ownership will be mapped from <host> to <instance> inside the instance. Can be used multiple times`,
				Args: []model.Arg{{
					Name: "host:instance",
				}},
			}, {
				Name:        []string{"-u", "--uid-map"},
				Description: `A mapping of user IDs for use in the mount. File and folder ownership will be mapped from <host> to <instance> inside the instance. Can be used multiple times`,
				Args: []model.Arg{{
					Name: "host:instance",
				}},
			}},
		}, {
			Name:        []string{"networks"},
			Description: `List all available networks interfaces`,
			Options: []model.Option{{
				Name:        []string{"--format"},
				Description: `Output list in the requested format. Valid formats are: table (default), json, csv and yaml`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`csv`}}, {Name: []string{`yaml`}}},
				}},
			}},
		}, {
			Name:        []string{"purge"},
			Description: `Purge all deleted instances permanently`,
		}, {
			Name:        []string{"recover"},
			Description: `Recover deleted instances`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Names of instances to recover`,
				Generator:   nil, // TODO: port over generator
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Recover all deleted instances`,
			}},
		}, {
			Name:        []string{"restart"},
			Description: `Restart instances`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Names of instances to restart. If omitted, and without the --all option, 'primary' will be assumed`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--timeout"},
				Description: `Maximum time, in seconds, to wait for the command to complete. Note that some background operations may continue beyond that. By default, instance startup and initialization is limited to 5 minutes each`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}, {
				Name:        []string{"--all"},
				Description: `Restart all instances`,
			}},
		}, {
			Name:        []string{"set"},
			Description: `Set a configuration setting`,
			Args: []model.Arg{{
				Name:        "key=value",
				Description: `A key-value pair. The key specifies a path to the setting to configure. The value is its intended value`,
				Suggestions: []model.Suggestion{{Name: []string{`client.gui.autostart=`}}, {Name: []string{`client.gui.hotkey=`}}, {Name: []string{`client.primary-name=`}}, {Name: []string{`local.bridged-network=`}}, {Name: []string{`local.driver=`}}, {Name: []string{`local.privileged-mounts=`}}},
			}},
		}, {
			Name:        []string{"shell"},
			Description: `Open a shell on a running instance`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Name of the instance to open a shell on. If omitted, 'primary' (the configured primary instance name) will be assumed. If the instance is not running, an attempt is made to start it (see "start" for more info)`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--timeout"},
				Description: `Maximum time, in seconds, to wait for the command to complete. Note that some background operations may continue beyond that. By default, instance startup and initialization is limited to 5 minutes each`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}},
		}, {
			Name:        []string{"start"},
			Description: `Start instances`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Names of instances to start. If omitted, and without the --all option, 'primary' (the configured primary instance name) will be assumed. If 'primary' does not exist but is included in a successful start command either implicitly or explicitly), it is launched automatically (see"launch" for more info).`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--timeout"},
				Description: `Maximum time, in seconds, to wait for the command to complete. Note that some background operations may continue beyond that. By default, instance startup and initialization is limited to 5 minutes each`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}, {
				Name:        []string{"--all"},
				Description: `Start all instances`,
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stop running instances`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Names of instances to stop. If omitted, and without the --all option, 'primary' will be assumed.`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Stop all instances`,
			}, {
				Name:        []string{"-t", "--time"},
				Description: `Time from now, in minutes, to delay shutdown of the instance`,
				Args: []model.Arg{{
					Name: "time",
				}},
			}, {
				Name:        []string{"-c", "--cancel"},
				Description: `Cancel a pending delayed shutdown`,
			}},
		}, {
			Name:        []string{"suspend"},
			Description: `Suspend running instances`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `Names of instances to suspend. If omitted, and without the --all option, 'primary' will be assumed.`,
				Generator:   nil, // TODO: port over generator
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Suspend all instances`,
			}},
		}, {
			Name:        []string{"transfer"},
			Description: `Transfer files between the host and instances`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "source",
				Description: `One or more paths to transfer, prefixed with <name:> for paths inside the instance, or '-' for stdin`,
				IsVariadic:  true,
			}, {
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "destination",
				Description: `The destination path, prefixed with <name:> for paths inside the instance, or '-' for stdout`,
			}},
		}, {
			Name:        []string{"umount"},
			Description: `Unmount a directory from an instance`,
			Args: []model.Arg{{
				Name:        "mount",
				Description: `Mount points, in <name>[:<path>] format, where <name> are instance names, and optional <path> are mount points. If omitted, all mounts will be removed from the named instances.`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"unalias"},
			Description: `Remove an alias`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `The name of the alias to remove`,
			}},
		}, {
			Name:        []string{"version"},
			Description: `Show version details`,
			Options: []model.Option{{
				Name:        []string{"--format"},
				Description: `Output list in the requested format. Valid formats are: table (default), json, csv and yaml`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`table`}}, {Name: []string{`json`}}, {Name: []string{`csv`}}, {Name: []string{`yaml`}}},
				}},
			}},
		}},
	}
}
