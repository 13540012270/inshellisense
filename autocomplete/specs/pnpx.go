// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["pnpx"] = model.Subcommand{
		Name:        []string{"pnpx"},
		Description: `Execute binaries from npm packages`,
		Options: []model.Option{{
			Name:        []string{"--package", "-p"},
			Description: `Package to be executed`,
			Args: []model.Arg{{
				Name: "package",
			}},
		}, {
			Name:        []string{"--cache"},
			Description: `Location of the npm cache`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--always-spawn"},
			Description: `Always spawn a child process to execute the command`,
		}, {
			Name:        []string{"--no-install"},
			Description: `Skip installation if a package is missing`,
		}, {
			Name:        []string{"--userconfig"},
			Description: `Path to user npmrc`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--call", "-c"},
			Description: `Execute string as if inside "npm run-script"`,
			Args: []model.Arg{{
				Name: "script",
			}},
		}, {
			Name:        []string{"--shell", "-s"},
			Description: `Shell to execute the command with, if any`,
			Args: []model.Arg{{
				Name: "shell",
				Suggestions: []model.Suggestion{{
					Name: []string{`bash`},
				}, {
					Name: []string{`fish`},
				}, {
					Name: []string{`zsh`},
				}},
			}},
		}, {
			Name:        []string{"--shell-auto-fallback"},
			Description: `Generate shell code to use pnpx as the "command not found" fallback`,
			Args: []model.Arg{{
				Name: "shell-fallback",
				Suggestions: []model.Suggestion{{
					Name: []string{`bash`},
				}, {
					Name: []string{`fish`},
				}, {
					Name: []string{`zsh`},
				}},
			}},
		}, {
			Name:        []string{"--ignore-existing"},
			Description: `Ignores existing binaries in $PATH, or in the localproject. This forces pnpx to do a temporary install and use the latest version`,
		}, {
			Name:        []string{"--quiet", "-q"},
			Description: `Suppress output from pnpx itself. Subcommands will not be affected`,
		}, {
			Name:        []string{"--npm"},
			Description: `Npm binary to use for internal operations`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path to binary",
			}},
		}, {
			Name:        []string{"--node-arg", "-n"},
			Description: `Extra node argument when calling a node binary`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"--version", "-v"},
			Description: `Show version number`,
		}, {
			Name:        []string{"--help", "-h"},
			Description: `Show help`,
		}},
		Subcommands: []model.Subcommand{{
			Name: []string{"create-react-native-app"},
		}, {
			Name: []string{"react-native"},
		}, {
			Name: []string{"tailwindcss"},
		}, {
			Name: []string{"next"},
		}, {
			Name: []string{"gltfjsx"},
		}, {
			Name: []string{"prisma"},
		}},
	}
}
