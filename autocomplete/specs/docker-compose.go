// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["docker-compose"] = model.Subcommand{
		Name:        []string{"docker-compose"},
		Description: `Define and run multi-container applications with Docker`,
		Options: []model.Option{{
			Name:        []string{"--ansi"},
			Description: `Control when to print ANSI control characters ("never"|"always"|"auto")`,
			Args: []model.Arg{{
				Name:        "ansi",
				Suggestions: []model.Suggestion{{Name: []string{`never`}}, {Name: []string{`always`}}, {Name: []string{`auto`}}},
			}},
		}, {
			Name:        []string{"--compatibility"},
			Description: `Run compose in backward compatibility mode`,
		}, {
			Name:        []string{"--env-file"},
			Description: `Specify an alternate environment file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "env-file",
			}},
		}, {
			Name:        []string{"--file", "-f"},
			Description: `Compose configuration files`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--no-ansi"},
			Description: `Do not print ANSI control characters (DEPRECATED)`,
		}, {
			Name:        []string{"--profile"},
			Description: `Specify a profile to enable`,
			Args: []model.Arg{{
				Name:      "profile",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--project-directory"},
			Description: `Specify an alternate working directory (default: the path of the, first specified, Compose file)`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "project-directory",
			}},
		}, {
			Name:        []string{"--project-name", "-p"},
			Description: `Project name`,
			Args: []model.Arg{{
				Name: "project-name",
			}},
		}, {
			Name:        []string{"--verbose"},
			Description: `Show more output`,
		}, {
			Name:        []string{"--workdir"},
			Description: `DEPRECATED! USE --project-directory INSTEAD. Specify an alternate working directory (default: the path of the, first specified, Compose file)`,
			Args: []model.Arg{{
				Name: "workdir",
			}},
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"build"},
			Description: `Build or rebuild services`,
			Args: []model.Arg{{
				Name:       "services",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--build-arg"},
				Description: `Set build-time variables for services`,
				Args: []model.Arg{{
					Name:      "key=value",
					Generator: nil, // TODO: port over generator
				}},
			}, {
				Name:        []string{"--compress"},
				Description: `Compress the build context using gzip. DEPRECATED`,
			}, {
				Name:        []string{"--force-rm"},
				Description: `Always remove intermediate containers. DEPRECATED`,
			}, {
				Name:        []string{"--memory", "-m"},
				Description: `Set memory limit for the build container. Not supported on buildkit yet`,
				Args: []model.Arg{{
					Name: "memory",
				}},
			}, {
				Name:        []string{"--no-cache"},
				Description: `Do not use cache when building the image`,
			}, {
				Name:        []string{"--no-rm"},
				Description: `Do not remove intermediate containers after a successful build. DEPRECATED`,
			}, {
				Name:        []string{"--parallel"},
				Description: `Build images in parallel. DEPRECATED`,
			}, {
				Name:        []string{"--progress"},
				Description: `Set type of progress output (auto, tty, plain, quiet)`,
				Args: []model.Arg{{
					Name:        "progress",
					Suggestions: []model.Suggestion{{Name: []string{`auto`}}, {Name: []string{`tty`}}, {Name: []string{`plain`}}, {Name: []string{`quiet`}}},
				}},
			}, {
				Name:        []string{"--pull"},
				Description: `Always attempt to pull a newer version of the image`,
			}, {
				Name:        []string{"--quiet", "-q"},
				Description: `Don't print anything to STDOUT`,
			}, {
				Name:        []string{"--ssh"},
				Description: `Set SSH authentications used when building service images. (use 'default' for using your default SSH Agent)`,
				Args: []model.Arg{{
					Name: "ssh",
				}},
			}},
		}, {
			Name:        []string{"config", "convert"},
			Description: `Converts the compose file to platform's canonical format`,
			Args: []model.Arg{{
				Name:       "services",
				Generator:  nil, // TODO: port over generator
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--format"},
				Description: `Format the output. Values: [yaml | json]`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`yaml`}}, {Name: []string{`json`}}},
				}},
			}, {
				Name:        []string{"--hash"},
				Description: `Print the service config hash, one per line`,
				Args: []model.Arg{{
					Name: "hash",
				}},
			}, {
				Name:        []string{"--images"},
				Description: `Print the image names, one per line`,
			}, {
				Name:        []string{"--no-interpolate"},
				Description: `Don't interpolate environment variables`,
			}, {
				Name:        []string{"--no-normalize"},
				Description: `Don't normalize compose model`,
			}, {
				Name:        []string{"--output", "-o"},
				Description: `Save to file (default to stdout)`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "output",
				}},
			}, {
				Name:        []string{"--profiles"},
				Description: `Print the profile names, one per line`,
			}, {
				Name:        []string{"--quiet", "-q"},
				Description: `Only validate the configuration, don't print anything`,
			}, {
				Name:        []string{"--resolve-image-digests"},
				Description: `Pin image tags to digests`,
			}, {
				Name:        []string{"--services"},
				Description: `Print the service names, one per line`,
			}, {
				Name:        []string{"--volumes"},
				Description: `Print the volume names, one per line`,
			}},
		}, {
			Name:        []string{"cp"},
			Description: `Copy files/folders between a service container and the local filesystem`,
			Args: []model.Arg{{
				Name: "source path",
			}, {
				Name: "dest path",
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `Copy to all the containers of the service`,
			}, {
				Name:        []string{"--archive", "-a"},
				Description: `Archive mode (copy all uid/gid information)`,
			}, {
				Name:        []string{"--follow-link", "-L"},
				Description: `Always follow symbol link in SRC_PATH`,
			}, {
				Name:        []string{"--index"},
				Description: `Index of the container if there are multiple instances of a service`,
				Args: []model.Arg{{
					Name: "index",
				}},
			}},
		}, {
			Name:        []string{"create"},
			Description: `Creates containers for a service`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--build"},
				Description: `Build images before starting containers`,
			}, {
				Name:        []string{"--force-recreate"},
				Description: `Recreate containers even if their configuration and image haven't changed`,
			}, {
				Name:        []string{"--no-build"},
				Description: `Don't build an image, even if it's missing`,
			}, {
				Name:        []string{"--no-recreate"},
				Description: `If containers already exist, don't recreate them. Incompatible with --force-recreate`,
			}},
		}, {
			Name:        []string{"down"},
			Description: `Stop and remove containers, networks`,
			Options: []model.Option{{
				Name:        []string{"--remove-orphans"},
				Description: `Remove containers for services not defined in the Compose file`,
			}, {
				Name:        []string{"--rmi"},
				Description: `Remove images used by services. "local" remove only images that don't have a custom tag ("local"|"all")`,
				Args: []model.Arg{{
					Name: "rmi",
				}},
			}, {
				Name:        []string{"--timeout", "-t"},
				Description: `Specify a shutdown timeout in seconds`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}, {
				Name:        []string{"--volumes", "-v"},
				Description: `Remove named volumes declared in the "volumes" section of the Compose file and anonymous volumes attached to containers`,
			}},
		}, {
			Name:        []string{"events"},
			Description: `Receive real time events from containers`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--json"},
				Description: `Output events as a stream of json objects`,
			}},
		}, {
			Name:        []string{"exec"},
			Description: `Execute a command in a running container`,
			Args: []model.Arg{{
				Name:      "service",
				Generator: nil, // TODO: port over generator
			}, {
				Name:       "command",
				IsCommand:  true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--detach", "-d"},
				Description: `Detached mode: Run command in the background`,
			}, {
				Name:        []string{"--env", "-e"},
				Description: `Set environment variables`,
				Args: []model.Arg{{
					Name: "key=value",
				}},
			}, {
				Name:        []string{"--index"},
				Description: `Index of the container if there are multiple instances of a service [default: 1]`,
				Args: []model.Arg{{
					Name: "index",
				}},
			}, {
				Name:        []string{"--interactive", "-i"},
				Description: `Keep STDIN open even if not attached`,
			}, {
				Name:        []string{"--no-TTY", "-T"},
				Description: `Disable pseudo-TTY allocation. By default "docker compose exec" allocates a TTY`,
			}, {
				Name:        []string{"--privileged"},
				Description: `Give extended privileges to the process`,
			}, {
				Name:        []string{"--tty", "-t"},
				Description: `Allocate a pseudo-TTY`,
			}, {
				Name:        []string{"--user", "-u"},
				Description: `Run the command as this user`,
				Args: []model.Arg{{
					Name: "user",
				}},
			}, {
				Name:        []string{"--workdir", "-w"},
				Description: `Path to workdir directory for this command`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "workdir",
				}},
			}},
		}, {
			Name:        []string{"images"},
			Description: `List images used by the created containers`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--quiet", "-q"},
				Description: `Only display IDs`,
			}},
		}, {
			Name:        []string{"kill"},
			Description: `Force stop service containers`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--signal", "-s"},
				Description: `SIGNAL to send to the container`,
				Args: []model.Arg{{
					Name: "signal",
				}},
			}},
		}, {
			Name:        []string{"logs"},
			Description: `View output from containers`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--follow", "-f"},
				Description: `Follow log output`,
			}, {
				Name:        []string{"--no-color"},
				Description: `Produce monochrome output`,
			}, {
				Name:        []string{"--no-log-prefix"},
				Description: `Don't print prefix in logs`,
			}, {
				Name:        []string{"--since"},
				Description: `Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)`,
				Args: []model.Arg{{
					Name: "since",
				}},
			}, {
				Name:        []string{"--tail"},
				Description: `Number of lines to show from the end of the logs for each container`,
				Args: []model.Arg{{
					Name:        "lines",
					Suggestions: []model.Suggestion{{Name: []string{`all`}}},
				}},
			}, {
				Name:        []string{"--timestamps", "-t"},
				Description: `Show timestamps`,
			}, {
				Name:        []string{"--until"},
				Description: `Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)`,
				Args: []model.Arg{{
					Name: "timestamp",
				}},
			}},
		}, {
			Name:        []string{"ls"},
			Description: `List running compose projects`,
			Options: []model.Option{{
				Name:        []string{"--all", "-a"},
				Description: `Show all stopped Compose projects`,
			}, {
				Name:        []string{"--filter"},
				Description: `Filter output based on conditions provided`,
				Args: []model.Arg{{
					Name: "filter",
				}},
			}, {
				Name:        []string{"--format"},
				Description: `Format the output. Values: [pretty | json]`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`pretty`}}, {Name: []string{`json`}}},
				}},
			}, {
				Name:        []string{"--quiet", "-q"},
				Description: `Only display IDs`,
			}},
		}, {
			Name:        []string{"pause"},
			Description: `Pause services`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"port"},
			Description: `Print the public port for a port binding`,
			Args: []model.Arg{{
				Name:      "service",
				Generator: nil, // TODO: port over generator
			}, {
				Name: "private_port",
			}},
			Options: []model.Option{{
				Name:        []string{"--index"},
				Description: `Index of the container if service has multiple replicas`,
				Args: []model.Arg{{
					Name: "index",
				}},
			}, {
				Name:        []string{"--protocol"},
				Description: `Tcp or udp`,
				Args: []model.Arg{{
					Name:        "protocol",
					Suggestions: []model.Suggestion{{Name: []string{`tcp`}}, {Name: []string{`udp`}}},
				}},
			}},
		}, {
			Name:        []string{"ps"},
			Description: `List containers`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all", "-a"},
				Description: `Show all stopped containers (including those created by the run command)`,
			}, {
				Name:        []string{"--filter"},
				Description: `Filter services by a property (supported filters: status)`,
				Args: []model.Arg{{
					Name: "filter",
				}},
			}, {
				Name:        []string{"--format"},
				Description: `Format the output. Values: [pretty | json]`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`pretty`}}, {Name: []string{`json`}}},
				}},
			}, {
				Name:        []string{"--quiet", "-q"},
				Description: `Only display IDs`,
			}, {
				Name:        []string{"--services"},
				Description: `Display services`,
			}, {
				Name:        []string{"--status"},
				Description: `Filter services by status. Values: [paused | restarting | removing | running | dead | created | exited]`,
				Args: []model.Arg{{
					Name:        "status",
					Suggestions: []model.Suggestion{{Name: []string{`paused`}}, {Name: []string{`restarting`}}, {Name: []string{`removing`}}, {Name: []string{`running`}}, {Name: []string{`dead`}}, {Name: []string{`created`}}, {Name: []string{`exited`}}},
				}},
			}},
		}, {
			Name:        []string{"pull"},
			Description: `Pull service images`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--ignore-pull-failures"},
				Description: `Pull what it can and ignores images with pull failures`,
			}, {
				Name:        []string{"--include-deps"},
				Description: `Also pull services declared as dependencies`,
			}, {
				Name:        []string{"--no-parallel"},
				Description: `DEPRECATED disable parallel pulling`,
			}, {
				Name:        []string{"--parallel"},
				Description: `DEPRECATED pull multiple images in parallel`,
			}, {
				Name:        []string{"--quiet", "-q"},
				Description: `Pull without printing progress information`,
			}},
		}, {
			Name:        []string{"push"},
			Description: `Push service images`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--ignore-push-failures"},
				Description: `Push what it can and ignores images with push failures`,
			}},
		}, {
			Name:        []string{"restart"},
			Description: `Restart containers`,
			Options: []model.Option{{
				Name:        []string{"--timeout", "-t"},
				Description: `Specify a shutdown timeout in seconds`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}},
		}, {
			Name:        []string{"rm"},
			Description: `Removes stopped service containers`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all", "-a"},
				Description: `Deprecated - no effect`,
			}, {
				Name:        []string{"--force", "-f"},
				Description: `Don't ask to confirm removal`,
			}, {
				Name:        []string{"--stop", "-s"},
				Description: `Stop the containers, if required, before removing`,
			}, {
				Name:        []string{"--volumes", "-v"},
				Description: `Remove any anonymous volumes attached to containers`,
			}},
		}, {
			Name:        []string{"run"},
			Description: `Run a one-off command on a service`,
			Args: []model.Arg{{
				Name:      "service",
				Generator: nil, // TODO: port over generator
			}, {
				Name:      "command",
				IsCommand: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--detach", "-d"},
				Description: `Run container in background and print container ID`,
			}, {
				Name:        []string{"--entrypoint"},
				Description: `Override the entrypoint of the image`,
				Args: []model.Arg{{
					Name: "entrypoint",
				}},
			}, {
				Name:        []string{"--env", "-e"},
				Description: `Set environment variables`,
				Args: []model.Arg{{
					Name: "env",
				}},
			}, {
				Name:        []string{"--interactive", "-i"},
				Description: `Keep STDIN open even if not attached`,
			}, {
				Name:        []string{"--label", "-l"},
				Description: `Add or override a label`,
				Args: []model.Arg{{
					Name: "label",
				}},
			}, {
				Name:        []string{"--name"},
				Description: `Assign a name to the container`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"--no-TTY", "-T"},
				Description: `Disable pseudo-TTY allocation (default: auto-detected)`,
			}, {
				Name:        []string{"--no-deps"},
				Description: `Don't start linked services`,
			}, {
				Name:        []string{"--publish", "-p"},
				Description: `Publish a container's port(s) to the host`,
				Args: []model.Arg{{
					Name: "publish",
				}},
			}, {
				Name:        []string{"--quiet-pull"},
				Description: `Pull without printing progress information`,
			}, {
				Name:        []string{"--rm"},
				Description: `Automatically remove the container when it exits`,
			}, {
				Name:        []string{"--service-ports"},
				Description: `Run command with the service's ports enabled and mapped to the host`,
			}, {
				Name:        []string{"--tty", "-t"},
				Description: `Allocate a pseudo-TTY`,
			}, {
				Name:        []string{"--use-aliases"},
				Description: `Use the service's network useAliases in the network(s) the container connects to`,
			}, {
				Name:        []string{"--user", "-u"},
				Description: `Run as specified username or uid`,
				Args: []model.Arg{{
					Name: "user",
				}},
			}, {
				Name:        []string{"--volume", "-v"},
				Description: `Bind mount a volume`,
				Args: []model.Arg{{
					Name: "volume",
				}},
			}, {
				Name:        []string{"--workdir", "-w"},
				Description: `Working directory inside the container`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "workdir",
				}},
			}},
		}, {
			Name:        []string{"start"},
			Description: `Start services`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stop services`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--timeout", "-t"},
				Description: `Specify a shutdown timeout in seconds`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}},
		}, {
			Name:        []string{"top"},
			Description: `Display the running processes`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"unpause"},
			Description: `Unpause services`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"up"},
			Description: `Create and start containers`,
			Args: []model.Arg{{
				Name:       "service",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--abort-on-container-exit"},
				Description: `Stops all containers if any container was stopped. Incompatible with -d`,
			}, {
				Name:        []string{"--always-recreate-deps"},
				Description: `Recreate dependent containers. Incompatible with --no-recreate`,
			}, {
				Name:        []string{"--attach"},
				Description: `Attach to service output`,
				Args: []model.Arg{{
					Name: "attach",
				}},
			}, {
				Name:        []string{"--attach-dependencies"},
				Description: `Attach to dependent containers`,
			}, {
				Name:        []string{"--build"},
				Description: `Build images before starting containers`,
			}, {
				Name:        []string{"--detach", "-d"},
				Description: `Detached mode: Run containers in the background`,
			}, {
				Name:        []string{"--exit-code-from"},
				Description: `Return the exit code of the selected service container. Implies --abort-on-container-exit`,
				Args: []model.Arg{{
					Name: "exit-code-from",
				}},
			}, {
				Name:        []string{"--force-recreate"},
				Description: `Recreate containers even if their configuration and image haven't changed`,
			}, {
				Name:        []string{"--no-build"},
				Description: `Don't build an image, even if it's missing`,
			}, {
				Name:        []string{"--no-color"},
				Description: `Produce monochrome output`,
			}, {
				Name:        []string{"--no-deps"},
				Description: `Don't start linked services`,
			}, {
				Name:        []string{"--no-log-prefix"},
				Description: `Don't print prefix in logs`,
			}, {
				Name:        []string{"--no-recreate"},
				Description: `If containers already exist, don't recreate them. Incompatible with --force-recreate`,
			}, {
				Name:        []string{"--no-start"},
				Description: `Don't start the services after creating them`,
			}, {
				Name:        []string{"--quiet-pull"},
				Description: `Pull without printing progress information`,
			}, {
				Name:        []string{"--remove-orphans"},
				Description: `Remove containers for services not defined in the Compose file`,
			}, {
				Name:        []string{"--renew-anon-volumes", "-V"},
				Description: `Recreate anonymous volumes instead of retrieving data from the previous containers`,
			}, {
				Name:        []string{"--scale"},
				Description: `Scale SERVICE to NUM instances. Overrides the "scale" setting in the Compose file if present`,
				Args: []model.Arg{{
					Name: "scale",
				}},
			}, {
				Name:        []string{"--timeout", "-t"},
				Description: `Use this timeout in seconds for container shutdown when attached or when containers are already running`,
				Args: []model.Arg{{
					Name: "timeout",
				}},
			}, {
				Name:        []string{"--wait"},
				Description: `Wait for services to be running|healthy. Implies detached mode`,
			}},
		}, {
			Name:        []string{"version"},
			Description: `Show the Docker Compose version information`,
			Options: []model.Option{{
				Name:        []string{"--format", "-f"},
				Description: `Format the output. Values: [pretty | json]. (Default: pretty)`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`pretty`}}, {Name: []string{`json`}}},
				}},
			}, {
				Name:        []string{"--short"},
				Description: `Shows only Compose's version number`,
			}},
		}},
	}
}
