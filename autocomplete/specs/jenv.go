// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["jenv"] = model.Subcommand{
		Name:        []string{"jenv"},
		Description: `Manage your Java environment`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for jEnv`,
		}, {
			Name:        []string{"--version"},
			Description: `Show version for jEnv`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"commands"},
			Description: `List all available JEnv commands`,
		}, {
			Name:        []string{"help"},
			Description: `Parses and displays help contents from a command's source file`,
			Args: []model.Arg{{
				Name:      "COMMAND",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name: []string{"--usage"},
			}},
		}, {
			Name:        []string{"info"},
			Description: `Show information about which command will be executed`,
			Args: []model.Arg{{
				Name:      "command",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"add"},
			Description: `Add JDK into jenv. A alias name will be generated by parsing "java -version"`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "JAVA_HOME",
			}},
		}, {
			Name:        []string{"enable-plugin"},
			Description: `Activate a jEnv plugin`,
			Args: []model.Arg{{
				Name:        "pluginName",
				Description: `Plugin Name`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"disable-plugin"},
			Description: `Deactivate a jEnv plugin`,
			Args: []model.Arg{{
				Name:        "pluginName",
				Description: `Plugin Name`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"doctor"},
			Description: `Run jEnv diagnostics`,
		}, {
			Name:        []string{"exec"},
			Description: `Runs an executable by first preparing PATH so that the selected Java version's "bin' directory is at the front`,
			Args: []model.Arg{{
				Name:           "command",
				FilterStrategy: model.FilterStrategyFuzzy,
				Generator:      nil, // TODO: port over generator
				IsCommand:      true,
			}},
		}, {
			Name:        []string{"global"},
			Description: `Sets the global Java version`,
			Args: []model.Arg{{
				Name:      "version",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"global-options"},
			Description: `Sets the global Java options`,
			Args: []model.Arg{{
				Name:       "options",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"local"},
			Description: `Sets the local application-specific Java version by writing the version name to a file named ".java-version'`,
			Args: []model.Arg{{
				Name:      "version",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--unset"},
				Description: `Remove local jEnv settings`,
			}},
		}, {
			Name:        []string{"local-options"},
			Description: `Sets the local application-specific Java options`,
			Args: []model.Arg{{
				Name:       "options",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"shell"},
			Description: `Sets a shell-specific Java version by setting the "JENV_VERSION'`,
			Args: []model.Arg{{
				Name:      "version",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"--unset"},
				Description: `Remove shell jEnv settings`,
			}},
		}, {
			Name:        []string{"shell-options"},
			Description: `Sets the shell-specific Java options`,
			Args: []model.Arg{{
				Name:       "options",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"hooks"},
			Description: `List hook scripts for a given jenv command`,
			Args: []model.Arg{{
				Name:      "command",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"init"},
			Description: `Configure the shell environment for jenv`,
		}, {
			Name:        []string{"javahome"},
			Description: `Display path to selected JAVA_HOME`,
		}, {
			Name:        []string{"macos-javahome"},
			Description: `Installs a file located at ~/Library/LaunchAgents/jenv-environment.plist . It sets JAVA_HOME for GUI applications on startup for the **currently active version of Java**`,
		}, {
			Name:        []string{"options"},
			Description: `Show the current Java options`,
		}, {
			Name:        []string{"options-file"},
			Description: `Detect the file that sets the current jenv jvm options`,
		}, {
			Name:        []string{"options-file-read"},
			Description: `Read options from file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"options-file-write"},
			Description: `Write options to a file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}, {
				Name:       "options",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"prefix"},
			Description: `Displays the directory where a Java version is installed`,
			Args: []model.Arg{{
				Name:       "version",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
			}},
		}, {
			Name:        []string{"refresh-plugins"},
			Description: `Refresh plugins links`,
		}, {
			Name:        []string{"refresh-versions"},
			Description: `Refresh alias names`,
		}, {
			Name:        []string{"rehash"},
			Description: `Rehash jenv shims (run this after installing executables)`,
		}, {
			Name:        []string{"remove"},
			Description: `Remove JDK installations`,
			Args: []model.Arg{{
				Name:      "version",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"root"},
			Description: `Display the root directory where versions and shims are kept`,
		}, {
			Name:        []string{"shims"},
			Description: `List existing jenv shims`,
			Options: []model.Option{{
				Name:        []string{"--short"},
				Description: `Show only files without path`,
			}},
		}, {
			Name:        []string{"version"},
			Description: `Shows the currently selected Java version and how it was selected`,
		}, {
			Name:        []string{"versions"},
			Description: `Lists all Java versions found in "$JENV_ROOT/versions/*'`,
			Options: []model.Option{{
				Name:        []string{"--bare"},
				Description: `Display only version`,
			}, {
				Name:        []string{"--verbose"},
				Description: `Display verbose output`,
			}},
		}, {
			Name:        []string{"whence"},
			Description: `List all Java versions that contain the given executable`,
			Args: []model.Arg{{
				Name:      "command",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name: []string{"--path"},
			}},
		}, {
			Name:        []string{"which"},
			Description: `Displays the full path to the executable that jenv will invoke when you run the given command`,
			Args: []model.Arg{{
				Name:      "command",
				Generator: nil, // TODO: port over generator
			}},
		}},
	}
}
