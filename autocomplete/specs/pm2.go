// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["pm2"] = model.Subcommand{
		Name:        []string{"pm2"},
		Description: `Daemon process manager`,
		Options: []model.Option{{
			Name:        []string{"-V", "--version"},
			Description: `Outputs the version number`,
		}, {
			Name:        []string{"-v"},
			Description: `Gets version`,
		}, {
			Name:        []string{"-s", "--silent"},
			Description: `Hides all messages`,
		}, {
			Name:        []string{"-m", "--mini-list"},
			Description: `Displays a compacted list without formatting`,
		}, {
			Name:        []string{"-f", "--force"},
			Description: `Forces actions`,
		}, {
			Name:        []string{"--disable-logs"},
			Description: `Do not write logs`,
		}, {
			Name:        []string{"-n", "--name"},
			Description: `Sets a name for script`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"-i", "--instances"},
			Description: `Launches [number] instances (for networked app)(load balanced)`,
			Args: []model.Arg{{
				Name: "number",
			}},
		}, {
			Name:        []string{"--parallel"},
			Description: `Number of parallel actions (for restart/reload)`,
			Args: []model.Arg{{
				Name: "number",
			}},
		}, {
			Name:        []string{"-l", "--log"},
			Description: `Specifies entire log file (error and out are both included)`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "path",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"-o", "--output"},
			Description: `Specifies out log file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"-e", "--error"},
			Description: `Specifies error log file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"-p", "--pid"},
			Description: `Specify pid file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "pid",
			}},
		}, {
			Name:        []string{"-k", "--kill-timeout"},
			Description: `Delays before sending final SIGKILL signal to process`,
			Args: []model.Arg{{
				Name: "delay",
			}},
		}, {
			Name:        []string{"--listen-timeout"},
			Description: `Listen timeout on application reload`,
			Args: []model.Arg{{
				Name: "delay",
			}},
		}, {
			Name:        []string{"--max-memory-restart"},
			Description: `Specify max memory amount used to autorestart (in octet or use syntax like 100M)`,
			Args: []model.Arg{{
				Name: "memory",
			}},
		}, {
			Name:        []string{"--restart-delay"},
			Description: `Specify a delay between restarts (in milliseconds)`,
			Args: []model.Arg{{
				Name: "delay",
			}},
		}, {
			Name:        []string{"--env"},
			Description: `Specify environment to get specific env variables`,
			Args: []model.Arg{{
				Name: "Environment Name",
			}},
		}, {
			Name:        []string{"--log-type"},
			Description: `Specify log output style (raw by default, json optional)`,
			Args: []model.Arg{{
				Name: "type",
			}},
		}, {
			Name:        []string{"-x", "--execute-command"},
			Description: `Execute a program using fork system`,
		}, {
			Name:        []string{"--max-restarts"},
			Description: `Only Restart the script COUNT times`,
			Args: []model.Arg{{
				Name:       "Count",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"-u", "--user"},
			Description: `Defines user when generating startup script`,
			Args: []model.Arg{{
				Name: "username",
			}},
		}, {
			Name:        []string{"--uid"},
			Description: `Runs target script with <uid> rights`,
			Args: []model.Arg{{
				Name: "uid",
			}},
		}, {
			Name:        []string{"--gid"},
			Description: `Runs target script with <gid> rights`,
			Args: []model.Arg{{
				Name: "gid",
			}},
		}, {
			Name:        []string{"--cwd"},
			Description: `Runs target script as <username>`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path",
			}},
		}, {
			Name:        []string{"--hp"},
			Description: `Defines home path when generating startup script`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "home path",
			}},
		}, {
			Name:        []string{"--wait-ip"},
			Description: `Overrides systemd script to wait for full internet connectivity to launch pm2`,
		}, {
			Name:        []string{"--service-name"},
			Description: `Defines service name when generating startup script`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"-c", "--cron"},
			Description: `Restarts a running process based on a cron pattern`,
			Args: []model.Arg{{
				Name: "Cron Pattern",
			}},
		}, {
			Name:        []string{"-w", "--write"},
			Description: `Writes configuration in local folder`,
		}, {
			Name:        []string{"--interpreter"},
			Description: `The interpreter pm2 should use for executing app (bash, python…)`,
			Args: []model.Arg{{
				Name: "interpreter",
			}},
		}, {
			Name:        []string{"--interpreter-args"},
			Description: `Interprets options (alias of –node-args)`,
			Args: []model.Arg{{
				Name: "Arguments",
			}},
		}, {
			Name:        []string{"--log-date-format"},
			Description: `Adds custom prefix timestamp to logs`,
			Args: []model.Arg{{
				Name: "Date Format",
			}},
		}, {
			Name:        []string{"--no-daemon"},
			Description: `Runs pm2 daemon in the foreground if it doesn’t exist already`,
		}, {
			Name:        []string{"-a", "--update-env"},
			Description: `Updates environment on restart/reload (-a <=> apply)`,
		}, {
			Name:        []string{"–-source-map-support"},
			Description: `Force source map support`,
		}, {
			Name:        []string{"–-only"},
			Description: `With json declaration, allow to only act on one application`,
			Args: []model.Arg{{
				Name: "app name",
			}},
		}, {
			Name:        []string{"–-disable-source-map-support"},
			Description: `Force source map support`,
		}, {
			Name:        []string{"–-wait-ready"},
			Description: `Asks pm2 to wait for ready event from your app`,
		}, {
			Name:        []string{"–-merge-logs"},
			Description: `Merges logs from different instances but keep error and out separated`,
		}, {
			Name:        []string{"–-watch"},
			Description: `Watches application folder for changes (default: )`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "paths",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"–-ignore-watch"},
			Description: `Folder/files to be ignored watching`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders, model.TemplateFilepaths},
				Name:       "Folder or Files",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"–-node-args"},
			Description: `Space delimited arguments to pass to node in cluster mode`,
			Args: []model.Arg{{
				Name:        "Node Args",
				Description: `–node-args="–debug=7001 –trace-deprecation"`,
			}},
		}, {
			Name:        []string{"–-no-color"},
			Description: `Skip colors`,
		}, {
			Name:        []string{"–-no-vizion"},
			Description: `Starts an app without vizion feature (versioning control)`,
		}, {
			Name:        []string{"–-no-autorestart"},
			Description: `Starts an app without automatic restart`,
		}, {
			Name:        []string{"–-no-treekill"},
			Description: `Only kills the main process, not detached children`,
		}, {
			Name:        []string{"–-no-pmx"},
			Description: `Starts an app without apm`,
		}, {
			Name:        []string{"–-no-automation"},
			Description: `Starts an app without apm`,
		}, {
			Name:        []string{"–-trace"},
			Description: `Enables transaction tracing with km`,
		}, {
			Name:        []string{"–-disable-trace"},
			Description: `Disables transaction tracing with km`,
		}, {
			Name:        []string{"–-attach"},
			Description: `Attaches logging after your start/restart/stop/reload`,
		}, {
			Name:        []string{"–-sort"},
			Description: `Sort process according to field’s name`,
			Args: []model.Arg{{
				Name:        "field name",
				Description: `Field_name:sort`,
			}},
		}, {
			Name:        []string{"–-v8"},
			Description: `Enables v8 data collecting`,
		}, {
			Name:        []string{"–-event-loop-inspector"},
			Description: `Enables event-loop-inspector dump in apm`,
		}, {
			Name:        []string{"–-deep-monitoring"},
			Description: `Enables all monitoring tools (equivalent to –v8 –event-loop-inspector –trace)`,
		}, {
			Name:        []string{"-h", "–-help"},
			Description: `Outputs usage information`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"start"},
			Description: `Starts and daemonizes an app`,
			Args: []model.Arg{{
				Name: "file, json, stdin, app name, pm id, etc",
			}},
			Options: []model.Option{{
				Name:        []string{"-V", "--version"},
				Description: `Outputs the version number`,
			}, {
				Name:        []string{"-v"},
				Description: `Gets version`,
			}, {
				Name:        []string{"-s", "--silent"},
				Description: `Hides all messages`,
			}, {
				Name:        []string{"-m", "--mini-list"},
				Description: `Displays a compacted list without formatting`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Forces actions`,
			}, {
				Name:        []string{"--disable-logs"},
				Description: `Do not write logs`,
			}, {
				Name:        []string{"-n", "--name"},
				Description: `Sets a name for script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-i", "--instances"},
				Description: `Launches [number] instances (for networked app)(load balanced)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Number of parallel actions (for restart/reload)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"-l", "--log"},
				Description: `Specifies entire log file (error and out are both included)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Specifies out log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-e", "--error"},
				Description: `Specifies error log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-p", "--pid"},
				Description: `Specify pid file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "pid",
				}},
			}, {
				Name:        []string{"-k", "--kill-timeout"},
				Description: `Delays before sending final SIGKILL signal to process`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--listen-timeout"},
				Description: `Listen timeout on application reload`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--max-memory-restart"},
				Description: `Specify max memory amount used to autorestart (in octet or use syntax like 100M)`,
				Args: []model.Arg{{
					Name: "memory",
				}},
			}, {
				Name:        []string{"--restart-delay"},
				Description: `Specify a delay between restarts (in milliseconds)`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--env"},
				Description: `Specify environment to get specific env variables`,
				Args: []model.Arg{{
					Name: "Environment Name",
				}},
			}, {
				Name:        []string{"--log-type"},
				Description: `Specify log output style (raw by default, json optional)`,
				Args: []model.Arg{{
					Name: "type",
				}},
			}, {
				Name:        []string{"-x", "--execute-command"},
				Description: `Execute a program using fork system`,
			}, {
				Name:        []string{"--max-restarts"},
				Description: `Only Restart the script COUNT times`,
				Args: []model.Arg{{
					Name:       "Count",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-u", "--user"},
				Description: `Defines user when generating startup script`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"--uid"},
				Description: `Runs target script with <uid> rights`,
				Args: []model.Arg{{
					Name: "uid",
				}},
			}, {
				Name:        []string{"--gid"},
				Description: `Runs target script with <gid> rights`,
				Args: []model.Arg{{
					Name: "gid",
				}},
			}, {
				Name:        []string{"--cwd"},
				Description: `Runs target script as <username>`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--hp"},
				Description: `Defines home path when generating startup script`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "home path",
				}},
			}, {
				Name:        []string{"--wait-ip"},
				Description: `Overrides systemd script to wait for full internet connectivity to launch pm2`,
			}, {
				Name:        []string{"--service-name"},
				Description: `Defines service name when generating startup script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-c", "--cron"},
				Description: `Restarts a running process based on a cron pattern`,
				Args: []model.Arg{{
					Name: "Cron Pattern",
				}},
			}, {
				Name:        []string{"-w", "--write"},
				Description: `Writes configuration in local folder`,
			}, {
				Name:        []string{"--interpreter"},
				Description: `The interpreter pm2 should use for executing app (bash, python…)`,
				Args: []model.Arg{{
					Name: "interpreter",
				}},
			}, {
				Name:        []string{"--interpreter-args"},
				Description: `Interprets options (alias of –node-args)`,
				Args: []model.Arg{{
					Name: "Arguments",
				}},
			}, {
				Name:        []string{"--log-date-format"},
				Description: `Adds custom prefix timestamp to logs`,
				Args: []model.Arg{{
					Name: "Date Format",
				}},
			}, {
				Name:        []string{"--no-daemon"},
				Description: `Runs pm2 daemon in the foreground if it doesn’t exist already`,
			}, {
				Name:        []string{"-a", "--update-env"},
				Description: `Updates environment on restart/reload (-a <=> apply)`,
			}, {
				Name:        []string{"–-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-only"},
				Description: `With json declaration, allow to only act on one application`,
				Args: []model.Arg{{
					Name: "app name",
				}},
			}, {
				Name:        []string{"–-disable-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-wait-ready"},
				Description: `Asks pm2 to wait for ready event from your app`,
			}, {
				Name:        []string{"–-merge-logs"},
				Description: `Merges logs from different instances but keep error and out separated`,
			}, {
				Name:        []string{"–-watch"},
				Description: `Watches application folder for changes (default: )`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "paths",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-ignore-watch"},
				Description: `Folder/files to be ignored watching`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders, model.TemplateFilepaths},
					Name:       "Folder or Files",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-node-args"},
				Description: `Space delimited arguments to pass to node in cluster mode`,
				Args: []model.Arg{{
					Name:        "Node Args",
					Description: `–node-args="–debug=7001 –trace-deprecation"`,
				}},
			}, {
				Name:        []string{"–-no-color"},
				Description: `Skip colors`,
			}, {
				Name:        []string{"–-no-vizion"},
				Description: `Starts an app without vizion feature (versioning control)`,
			}, {
				Name:        []string{"–-no-autorestart"},
				Description: `Starts an app without automatic restart`,
			}, {
				Name:        []string{"–-no-treekill"},
				Description: `Only kills the main process, not detached children`,
			}, {
				Name:        []string{"–-no-pmx"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-no-automation"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-trace"},
				Description: `Enables transaction tracing with km`,
			}, {
				Name:        []string{"–-disable-trace"},
				Description: `Disables transaction tracing with km`,
			}, {
				Name:        []string{"–-attach"},
				Description: `Attaches logging after your start/restart/stop/reload`,
			}, {
				Name:        []string{"–-sort"},
				Description: `Sort process according to field’s name`,
				Args: []model.Arg{{
					Name:        "field name",
					Description: `Field_name:sort`,
				}},
			}, {
				Name:        []string{"–-v8"},
				Description: `Enables v8 data collecting`,
			}, {
				Name:        []string{"–-event-loop-inspector"},
				Description: `Enables event-loop-inspector dump in apm`,
			}, {
				Name:        []string{"–-deep-monitoring"},
				Description: `Enables all monitoring tools (equivalent to –v8 –event-loop-inspector –trace)`,
			}, {
				Name:        []string{"-h", "–-help"},
				Description: `Outputs usage information`,
			}},
		}, {
			Name:        []string{"trigger"},
			Description: `Deploy your json`,
			Args: []model.Arg{{
				Name: "Proc Name",
			}, {
				Name: "Action Name",
			}, {
				Name:       "Params",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"deploy"},
			Description: `Deploy your json`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "File or environment",
			}},
		}, {
			Name:        []string{"startOrRestart"},
			Description: `Start or restart JSON file`,
			Args: []model.Arg{{
				Name:      "json",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"startOrReload"},
			Description: `Start or gracefully reload JSON file`,
			Args: []model.Arg{{
				Name:      "json",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"pid"},
			Description: `Return pid of the specified app or all`,
			Args: []model.Arg{{
				Name:       "app name",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"startOrGracefulReload"},
			Description: `Start or gracefully reolad JSON file`,
			Args: []model.Arg{{
				Name:      "json",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stop a process`,
			Args: []model.Arg{{
				Name: "id, name, all, json, stdin, etc",
			}},
			Options: []model.Option{{
				Name:        []string{"-V", "--version"},
				Description: `Outputs the version number`,
			}, {
				Name:        []string{"-v"},
				Description: `Gets version`,
			}, {
				Name:        []string{"-s", "--silent"},
				Description: `Hides all messages`,
			}, {
				Name:        []string{"-m", "--mini-list"},
				Description: `Displays a compacted list without formatting`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Forces actions`,
			}, {
				Name:        []string{"--disable-logs"},
				Description: `Do not write logs`,
			}, {
				Name:        []string{"-n", "--name"},
				Description: `Sets a name for script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-i", "--instances"},
				Description: `Launches [number] instances (for networked app)(load balanced)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Number of parallel actions (for restart/reload)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"-l", "--log"},
				Description: `Specifies entire log file (error and out are both included)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Specifies out log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-e", "--error"},
				Description: `Specifies error log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-p", "--pid"},
				Description: `Specify pid file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "pid",
				}},
			}, {
				Name:        []string{"-k", "--kill-timeout"},
				Description: `Delays before sending final SIGKILL signal to process`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--listen-timeout"},
				Description: `Listen timeout on application reload`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--max-memory-restart"},
				Description: `Specify max memory amount used to autorestart (in octet or use syntax like 100M)`,
				Args: []model.Arg{{
					Name: "memory",
				}},
			}, {
				Name:        []string{"--restart-delay"},
				Description: `Specify a delay between restarts (in milliseconds)`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--env"},
				Description: `Specify environment to get specific env variables`,
				Args: []model.Arg{{
					Name: "Environment Name",
				}},
			}, {
				Name:        []string{"--log-type"},
				Description: `Specify log output style (raw by default, json optional)`,
				Args: []model.Arg{{
					Name: "type",
				}},
			}, {
				Name:        []string{"-x", "--execute-command"},
				Description: `Execute a program using fork system`,
			}, {
				Name:        []string{"--max-restarts"},
				Description: `Only Restart the script COUNT times`,
				Args: []model.Arg{{
					Name:       "Count",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-u", "--user"},
				Description: `Defines user when generating startup script`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"--uid"},
				Description: `Runs target script with <uid> rights`,
				Args: []model.Arg{{
					Name: "uid",
				}},
			}, {
				Name:        []string{"--gid"},
				Description: `Runs target script with <gid> rights`,
				Args: []model.Arg{{
					Name: "gid",
				}},
			}, {
				Name:        []string{"--cwd"},
				Description: `Runs target script as <username>`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--hp"},
				Description: `Defines home path when generating startup script`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "home path",
				}},
			}, {
				Name:        []string{"--wait-ip"},
				Description: `Overrides systemd script to wait for full internet connectivity to launch pm2`,
			}, {
				Name:        []string{"--service-name"},
				Description: `Defines service name when generating startup script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-c", "--cron"},
				Description: `Restarts a running process based on a cron pattern`,
				Args: []model.Arg{{
					Name: "Cron Pattern",
				}},
			}, {
				Name:        []string{"-w", "--write"},
				Description: `Writes configuration in local folder`,
			}, {
				Name:        []string{"--interpreter"},
				Description: `The interpreter pm2 should use for executing app (bash, python…)`,
				Args: []model.Arg{{
					Name: "interpreter",
				}},
			}, {
				Name:        []string{"--interpreter-args"},
				Description: `Interprets options (alias of –node-args)`,
				Args: []model.Arg{{
					Name: "Arguments",
				}},
			}, {
				Name:        []string{"--log-date-format"},
				Description: `Adds custom prefix timestamp to logs`,
				Args: []model.Arg{{
					Name: "Date Format",
				}},
			}, {
				Name:        []string{"--no-daemon"},
				Description: `Runs pm2 daemon in the foreground if it doesn’t exist already`,
			}, {
				Name:        []string{"-a", "--update-env"},
				Description: `Updates environment on restart/reload (-a <=> apply)`,
			}, {
				Name:        []string{"–-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-only"},
				Description: `With json declaration, allow to only act on one application`,
				Args: []model.Arg{{
					Name: "app name",
				}},
			}, {
				Name:        []string{"–-disable-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-wait-ready"},
				Description: `Asks pm2 to wait for ready event from your app`,
			}, {
				Name:        []string{"–-merge-logs"},
				Description: `Merges logs from different instances but keep error and out separated`,
			}, {
				Name:        []string{"–-watch"},
				Description: `Watches application folder for changes (default: )`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "paths",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-ignore-watch"},
				Description: `Folder/files to be ignored watching`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders, model.TemplateFilepaths},
					Name:       "Folder or Files",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-node-args"},
				Description: `Space delimited arguments to pass to node in cluster mode`,
				Args: []model.Arg{{
					Name:        "Node Args",
					Description: `–node-args="–debug=7001 –trace-deprecation"`,
				}},
			}, {
				Name:        []string{"–-no-color"},
				Description: `Skip colors`,
			}, {
				Name:        []string{"–-no-vizion"},
				Description: `Starts an app without vizion feature (versioning control)`,
			}, {
				Name:        []string{"–-no-autorestart"},
				Description: `Starts an app without automatic restart`,
			}, {
				Name:        []string{"–-no-treekill"},
				Description: `Only kills the main process, not detached children`,
			}, {
				Name:        []string{"–-no-pmx"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-no-automation"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-trace"},
				Description: `Enables transaction tracing with km`,
			}, {
				Name:        []string{"–-disable-trace"},
				Description: `Disables transaction tracing with km`,
			}, {
				Name:        []string{"–-attach"},
				Description: `Attaches logging after your start/restart/stop/reload`,
			}, {
				Name:        []string{"–-sort"},
				Description: `Sort process according to field’s name`,
				Args: []model.Arg{{
					Name:        "field name",
					Description: `Field_name:sort`,
				}},
			}, {
				Name:        []string{"–-v8"},
				Description: `Enables v8 data collecting`,
			}, {
				Name:        []string{"–-event-loop-inspector"},
				Description: `Enables event-loop-inspector dump in apm`,
			}, {
				Name:        []string{"–-deep-monitoring"},
				Description: `Enables all monitoring tools (equivalent to –v8 –event-loop-inspector –trace)`,
			}, {
				Name:        []string{"-h", "–-help"},
				Description: `Outputs usage information`,
			}},
		}, {
			Name:        []string{"restart"},
			Description: `Restart a process`,
			Args: []model.Arg{{
				Name: "id, name, all, json, stdin, etc",
			}},
			Options: []model.Option{{
				Name:        []string{"-V", "--version"},
				Description: `Outputs the version number`,
			}, {
				Name:        []string{"-v"},
				Description: `Gets version`,
			}, {
				Name:        []string{"-s", "--silent"},
				Description: `Hides all messages`,
			}, {
				Name:        []string{"-m", "--mini-list"},
				Description: `Displays a compacted list without formatting`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Forces actions`,
			}, {
				Name:        []string{"--disable-logs"},
				Description: `Do not write logs`,
			}, {
				Name:        []string{"-n", "--name"},
				Description: `Sets a name for script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-i", "--instances"},
				Description: `Launches [number] instances (for networked app)(load balanced)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Number of parallel actions (for restart/reload)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"-l", "--log"},
				Description: `Specifies entire log file (error and out are both included)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Specifies out log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-e", "--error"},
				Description: `Specifies error log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-p", "--pid"},
				Description: `Specify pid file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "pid",
				}},
			}, {
				Name:        []string{"-k", "--kill-timeout"},
				Description: `Delays before sending final SIGKILL signal to process`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--listen-timeout"},
				Description: `Listen timeout on application reload`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--max-memory-restart"},
				Description: `Specify max memory amount used to autorestart (in octet or use syntax like 100M)`,
				Args: []model.Arg{{
					Name: "memory",
				}},
			}, {
				Name:        []string{"--restart-delay"},
				Description: `Specify a delay between restarts (in milliseconds)`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--env"},
				Description: `Specify environment to get specific env variables`,
				Args: []model.Arg{{
					Name: "Environment Name",
				}},
			}, {
				Name:        []string{"--log-type"},
				Description: `Specify log output style (raw by default, json optional)`,
				Args: []model.Arg{{
					Name: "type",
				}},
			}, {
				Name:        []string{"-x", "--execute-command"},
				Description: `Execute a program using fork system`,
			}, {
				Name:        []string{"--max-restarts"},
				Description: `Only Restart the script COUNT times`,
				Args: []model.Arg{{
					Name:       "Count",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-u", "--user"},
				Description: `Defines user when generating startup script`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"--uid"},
				Description: `Runs target script with <uid> rights`,
				Args: []model.Arg{{
					Name: "uid",
				}},
			}, {
				Name:        []string{"--gid"},
				Description: `Runs target script with <gid> rights`,
				Args: []model.Arg{{
					Name: "gid",
				}},
			}, {
				Name:        []string{"--cwd"},
				Description: `Runs target script as <username>`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--hp"},
				Description: `Defines home path when generating startup script`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "home path",
				}},
			}, {
				Name:        []string{"--wait-ip"},
				Description: `Overrides systemd script to wait for full internet connectivity to launch pm2`,
			}, {
				Name:        []string{"--service-name"},
				Description: `Defines service name when generating startup script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-c", "--cron"},
				Description: `Restarts a running process based on a cron pattern`,
				Args: []model.Arg{{
					Name: "Cron Pattern",
				}},
			}, {
				Name:        []string{"-w", "--write"},
				Description: `Writes configuration in local folder`,
			}, {
				Name:        []string{"--interpreter"},
				Description: `The interpreter pm2 should use for executing app (bash, python…)`,
				Args: []model.Arg{{
					Name: "interpreter",
				}},
			}, {
				Name:        []string{"--interpreter-args"},
				Description: `Interprets options (alias of –node-args)`,
				Args: []model.Arg{{
					Name: "Arguments",
				}},
			}, {
				Name:        []string{"--log-date-format"},
				Description: `Adds custom prefix timestamp to logs`,
				Args: []model.Arg{{
					Name: "Date Format",
				}},
			}, {
				Name:        []string{"--no-daemon"},
				Description: `Runs pm2 daemon in the foreground if it doesn’t exist already`,
			}, {
				Name:        []string{"-a", "--update-env"},
				Description: `Updates environment on restart/reload (-a <=> apply)`,
			}, {
				Name:        []string{"–-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-only"},
				Description: `With json declaration, allow to only act on one application`,
				Args: []model.Arg{{
					Name: "app name",
				}},
			}, {
				Name:        []string{"–-disable-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-wait-ready"},
				Description: `Asks pm2 to wait for ready event from your app`,
			}, {
				Name:        []string{"–-merge-logs"},
				Description: `Merges logs from different instances but keep error and out separated`,
			}, {
				Name:        []string{"–-watch"},
				Description: `Watches application folder for changes (default: )`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "paths",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-ignore-watch"},
				Description: `Folder/files to be ignored watching`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders, model.TemplateFilepaths},
					Name:       "Folder or Files",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-node-args"},
				Description: `Space delimited arguments to pass to node in cluster mode`,
				Args: []model.Arg{{
					Name:        "Node Args",
					Description: `–node-args="–debug=7001 –trace-deprecation"`,
				}},
			}, {
				Name:        []string{"–-no-color"},
				Description: `Skip colors`,
			}, {
				Name:        []string{"–-no-vizion"},
				Description: `Starts an app without vizion feature (versioning control)`,
			}, {
				Name:        []string{"–-no-autorestart"},
				Description: `Starts an app without automatic restart`,
			}, {
				Name:        []string{"–-no-treekill"},
				Description: `Only kills the main process, not detached children`,
			}, {
				Name:        []string{"–-no-pmx"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-no-automation"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-trace"},
				Description: `Enables transaction tracing with km`,
			}, {
				Name:        []string{"–-disable-trace"},
				Description: `Disables transaction tracing with km`,
			}, {
				Name:        []string{"–-attach"},
				Description: `Attaches logging after your start/restart/stop/reload`,
			}, {
				Name:        []string{"–-sort"},
				Description: `Sort process according to field’s name`,
				Args: []model.Arg{{
					Name:        "field name",
					Description: `Field_name:sort`,
				}},
			}, {
				Name:        []string{"–-v8"},
				Description: `Enables v8 data collecting`,
			}, {
				Name:        []string{"–-event-loop-inspector"},
				Description: `Enables event-loop-inspector dump in apm`,
			}, {
				Name:        []string{"–-deep-monitoring"},
				Description: `Enables all monitoring tools (equivalent to –v8 –event-loop-inspector –trace)`,
			}, {
				Name:        []string{"-h", "–-help"},
				Description: `Outputs usage information`,
			}},
		}, {
			Name:        []string{"scale"},
			Description: `Scale up/down a process in cluster mode depending on the "number" param`,
			Args: []model.Arg{{
				Name: "app name",
			}, {
				Name: "number",
			}},
		}, {
			Name:        []string{"snapshot"},
			Description: `Snapshot PM2 memory`,
		}, {
			Name:        []string{"profile"},
			Description: `Profile CPU`,
			Args: []model.Arg{{
				Name: "command",
			}},
		}, {
			Name:        []string{"reload"},
			Description: `Reload processes (for apps using HTTP/HTTPS)`,
			Args: []model.Arg{{
				Name: "name or all",
			}},
		}, {
			Name:        []string{"gracefulReload"},
			Description: `Gracefully reload a process. Send a “shutdown” message to close all connections`,
			Args: []model.Arg{{
				Name: "name or all",
			}},
		}, {
			Name:        []string{"id"},
			Description: `Get process id by name`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"delete"},
			Description: `Stops and deletes a process from pm2 process list`,
			Args: []model.Arg{{
				Name: "name, id, script, all, json, stdin, etc",
			}},
		}, {
			Name:        []string{"sendSignal"},
			Description: `Send a system signal to the target process`,
			Args: []model.Arg{{
				Name: "signal",
			}, {
				Name: "pm2_id or name",
			}},
		}, {
			Name:        []string{"ping"},
			Description: `Ping pm2 daemon - if not it will launch up`,
		}, {
			Name:        []string{"updatePM2"},
			Description: `Update in-memory PM2 with local PM2`,
		}, {
			Name:        []string{"update"},
			Description: `(alias) update in-memory PM2 with local PM2`,
		}, {
			Name:        []string{"install", "module:install"},
			Description: `Install or update a module and run it forever`,
			Args: []model.Arg{{
				Name:       "module or git://",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-V", "--version"},
				Description: `Outputs the version number`,
			}, {
				Name:        []string{"-v"},
				Description: `Gets version`,
			}, {
				Name:        []string{"-s", "--silent"},
				Description: `Hides all messages`,
			}, {
				Name:        []string{"-m", "--mini-list"},
				Description: `Displays a compacted list without formatting`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Forces actions`,
			}, {
				Name:        []string{"--disable-logs"},
				Description: `Do not write logs`,
			}, {
				Name:        []string{"-n", "--name"},
				Description: `Sets a name for script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-i", "--instances"},
				Description: `Launches [number] instances (for networked app)(load balanced)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Number of parallel actions (for restart/reload)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"-l", "--log"},
				Description: `Specifies entire log file (error and out are both included)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Specifies out log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-e", "--error"},
				Description: `Specifies error log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-p", "--pid"},
				Description: `Specify pid file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "pid",
				}},
			}, {
				Name:        []string{"-k", "--kill-timeout"},
				Description: `Delays before sending final SIGKILL signal to process`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--listen-timeout"},
				Description: `Listen timeout on application reload`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--max-memory-restart"},
				Description: `Specify max memory amount used to autorestart (in octet or use syntax like 100M)`,
				Args: []model.Arg{{
					Name: "memory",
				}},
			}, {
				Name:        []string{"--restart-delay"},
				Description: `Specify a delay between restarts (in milliseconds)`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--env"},
				Description: `Specify environment to get specific env variables`,
				Args: []model.Arg{{
					Name: "Environment Name",
				}},
			}, {
				Name:        []string{"--log-type"},
				Description: `Specify log output style (raw by default, json optional)`,
				Args: []model.Arg{{
					Name: "type",
				}},
			}, {
				Name:        []string{"-x", "--execute-command"},
				Description: `Execute a program using fork system`,
			}, {
				Name:        []string{"--max-restarts"},
				Description: `Only Restart the script COUNT times`,
				Args: []model.Arg{{
					Name:       "Count",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-u", "--user"},
				Description: `Defines user when generating startup script`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"--uid"},
				Description: `Runs target script with <uid> rights`,
				Args: []model.Arg{{
					Name: "uid",
				}},
			}, {
				Name:        []string{"--gid"},
				Description: `Runs target script with <gid> rights`,
				Args: []model.Arg{{
					Name: "gid",
				}},
			}, {
				Name:        []string{"--cwd"},
				Description: `Runs target script as <username>`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--hp"},
				Description: `Defines home path when generating startup script`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "home path",
				}},
			}, {
				Name:        []string{"--wait-ip"},
				Description: `Overrides systemd script to wait for full internet connectivity to launch pm2`,
			}, {
				Name:        []string{"--service-name"},
				Description: `Defines service name when generating startup script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-c", "--cron"},
				Description: `Restarts a running process based on a cron pattern`,
				Args: []model.Arg{{
					Name: "Cron Pattern",
				}},
			}, {
				Name:        []string{"-w", "--write"},
				Description: `Writes configuration in local folder`,
			}, {
				Name:        []string{"--interpreter"},
				Description: `The interpreter pm2 should use for executing app (bash, python…)`,
				Args: []model.Arg{{
					Name: "interpreter",
				}},
			}, {
				Name:        []string{"--interpreter-args"},
				Description: `Interprets options (alias of –node-args)`,
				Args: []model.Arg{{
					Name: "Arguments",
				}},
			}, {
				Name:        []string{"--log-date-format"},
				Description: `Adds custom prefix timestamp to logs`,
				Args: []model.Arg{{
					Name: "Date Format",
				}},
			}, {
				Name:        []string{"--no-daemon"},
				Description: `Runs pm2 daemon in the foreground if it doesn’t exist already`,
			}, {
				Name:        []string{"-a", "--update-env"},
				Description: `Updates environment on restart/reload (-a <=> apply)`,
			}, {
				Name:        []string{"–-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-only"},
				Description: `With json declaration, allow to only act on one application`,
				Args: []model.Arg{{
					Name: "app name",
				}},
			}, {
				Name:        []string{"–-disable-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-wait-ready"},
				Description: `Asks pm2 to wait for ready event from your app`,
			}, {
				Name:        []string{"–-merge-logs"},
				Description: `Merges logs from different instances but keep error and out separated`,
			}, {
				Name:        []string{"–-watch"},
				Description: `Watches application folder for changes (default: )`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "paths",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-ignore-watch"},
				Description: `Folder/files to be ignored watching`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders, model.TemplateFilepaths},
					Name:       "Folder or Files",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-node-args"},
				Description: `Space delimited arguments to pass to node in cluster mode`,
				Args: []model.Arg{{
					Name:        "Node Args",
					Description: `–node-args="–debug=7001 –trace-deprecation"`,
				}},
			}, {
				Name:        []string{"–-no-color"},
				Description: `Skip colors`,
			}, {
				Name:        []string{"–-no-vizion"},
				Description: `Starts an app without vizion feature (versioning control)`,
			}, {
				Name:        []string{"–-no-autorestart"},
				Description: `Starts an app without automatic restart`,
			}, {
				Name:        []string{"–-no-treekill"},
				Description: `Only kills the main process, not detached children`,
			}, {
				Name:        []string{"–-no-pmx"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-no-automation"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-trace"},
				Description: `Enables transaction tracing with km`,
			}, {
				Name:        []string{"–-disable-trace"},
				Description: `Disables transaction tracing with km`,
			}, {
				Name:        []string{"–-attach"},
				Description: `Attaches logging after your start/restart/stop/reload`,
			}, {
				Name:        []string{"–-sort"},
				Description: `Sort process according to field’s name`,
				Args: []model.Arg{{
					Name:        "field name",
					Description: `Field_name:sort`,
				}},
			}, {
				Name:        []string{"–-v8"},
				Description: `Enables v8 data collecting`,
			}, {
				Name:        []string{"–-event-loop-inspector"},
				Description: `Enables event-loop-inspector dump in apm`,
			}, {
				Name:        []string{"–-deep-monitoring"},
				Description: `Enables all monitoring tools (equivalent to –v8 –event-loop-inspector –trace)`,
			}, {
				Name:        []string{"-h", "–-help"},
				Description: `Outputs usage information`,
			}},
		}, {
			Name:        []string{"module:generate"},
			Description: `Generate a sample module in current folder`,
			Args: []model.Arg{{
				Name:       "app name",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"uninstall", "module:uninstall"},
			Description: `Stop and uninstall a module`,
			Args: []model.Arg{{
				Name: "module",
			}},
		}, {
			Name:        []string{"publish", "module:publish"},
			Description: `Publish the module you are currently on`,
		}, {
			Name:        []string{"set"},
			Description: `Sets the specified config`,
			Args: []model.Arg{{
				Name:       "key",
				IsOptional: true,
			}, {
				Name:       "value",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"multiset"},
			Description: `Multiset eg "key1 val1 key2 val2"`,
			Args: []model.Arg{{
				Name:       "key value",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"get"},
			Description: `Get value for the specified key`,
			Args: []model.Arg{{
				Name:       "key",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"conf"},
			Description: `Get / set module config values`,
			Args: []model.Arg{{
				Name:       "key",
				IsOptional: true,
			}, {
				Name:       "value",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"config"},
			Description: `Get / set module config values`,
			Args: []model.Arg{{
				Name: "key",
			}, {
				Name:       "value",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"unset"},
			Description: `Clears the specified config key`,
			Args: []model.Arg{{
				Name: "key",
			}},
		}, {
			Name:        []string{"report"},
			Description: `Give a full pm2 report for https://github.com/Unitech/pm2/issues`,
		}, {
			Name:        []string{"link", "interact"},
			Description: `Linking action to keymetrics.io`,
			Args: []model.Arg{{
				Name:       "secret",
				IsOptional: true,
			}, {
				Name:       "public",
				IsOptional: true,
			}, {
				Name:       "name",
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-V", "--version"},
				Description: `Outputs the version number`,
			}, {
				Name:        []string{"-v"},
				Description: `Gets version`,
			}, {
				Name:        []string{"-s", "--silent"},
				Description: `Hides all messages`,
			}, {
				Name:        []string{"-m", "--mini-list"},
				Description: `Displays a compacted list without formatting`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Forces actions`,
			}, {
				Name:        []string{"--disable-logs"},
				Description: `Do not write logs`,
			}, {
				Name:        []string{"-n", "--name"},
				Description: `Sets a name for script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-i", "--instances"},
				Description: `Launches [number] instances (for networked app)(load balanced)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Number of parallel actions (for restart/reload)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"-l", "--log"},
				Description: `Specifies entire log file (error and out are both included)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Specifies out log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-e", "--error"},
				Description: `Specifies error log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-p", "--pid"},
				Description: `Specify pid file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "pid",
				}},
			}, {
				Name:        []string{"-k", "--kill-timeout"},
				Description: `Delays before sending final SIGKILL signal to process`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--listen-timeout"},
				Description: `Listen timeout on application reload`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--max-memory-restart"},
				Description: `Specify max memory amount used to autorestart (in octet or use syntax like 100M)`,
				Args: []model.Arg{{
					Name: "memory",
				}},
			}, {
				Name:        []string{"--restart-delay"},
				Description: `Specify a delay between restarts (in milliseconds)`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--env"},
				Description: `Specify environment to get specific env variables`,
				Args: []model.Arg{{
					Name: "Environment Name",
				}},
			}, {
				Name:        []string{"--log-type"},
				Description: `Specify log output style (raw by default, json optional)`,
				Args: []model.Arg{{
					Name: "type",
				}},
			}, {
				Name:        []string{"-x", "--execute-command"},
				Description: `Execute a program using fork system`,
			}, {
				Name:        []string{"--max-restarts"},
				Description: `Only Restart the script COUNT times`,
				Args: []model.Arg{{
					Name:       "Count",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-u", "--user"},
				Description: `Defines user when generating startup script`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"--uid"},
				Description: `Runs target script with <uid> rights`,
				Args: []model.Arg{{
					Name: "uid",
				}},
			}, {
				Name:        []string{"--gid"},
				Description: `Runs target script with <gid> rights`,
				Args: []model.Arg{{
					Name: "gid",
				}},
			}, {
				Name:        []string{"--cwd"},
				Description: `Runs target script as <username>`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--hp"},
				Description: `Defines home path when generating startup script`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "home path",
				}},
			}, {
				Name:        []string{"--wait-ip"},
				Description: `Overrides systemd script to wait for full internet connectivity to launch pm2`,
			}, {
				Name:        []string{"--service-name"},
				Description: `Defines service name when generating startup script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-c", "--cron"},
				Description: `Restarts a running process based on a cron pattern`,
				Args: []model.Arg{{
					Name: "Cron Pattern",
				}},
			}, {
				Name:        []string{"-w", "--write"},
				Description: `Writes configuration in local folder`,
			}, {
				Name:        []string{"--interpreter"},
				Description: `The interpreter pm2 should use for executing app (bash, python…)`,
				Args: []model.Arg{{
					Name: "interpreter",
				}},
			}, {
				Name:        []string{"--interpreter-args"},
				Description: `Interprets options (alias of –node-args)`,
				Args: []model.Arg{{
					Name: "Arguments",
				}},
			}, {
				Name:        []string{"--log-date-format"},
				Description: `Adds custom prefix timestamp to logs`,
				Args: []model.Arg{{
					Name: "Date Format",
				}},
			}, {
				Name:        []string{"--no-daemon"},
				Description: `Runs pm2 daemon in the foreground if it doesn’t exist already`,
			}, {
				Name:        []string{"-a", "--update-env"},
				Description: `Updates environment on restart/reload (-a <=> apply)`,
			}, {
				Name:        []string{"–-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-only"},
				Description: `With json declaration, allow to only act on one application`,
				Args: []model.Arg{{
					Name: "app name",
				}},
			}, {
				Name:        []string{"–-disable-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-wait-ready"},
				Description: `Asks pm2 to wait for ready event from your app`,
			}, {
				Name:        []string{"–-merge-logs"},
				Description: `Merges logs from different instances but keep error and out separated`,
			}, {
				Name:        []string{"–-watch"},
				Description: `Watches application folder for changes (default: )`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "paths",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-ignore-watch"},
				Description: `Folder/files to be ignored watching`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders, model.TemplateFilepaths},
					Name:       "Folder or Files",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-node-args"},
				Description: `Space delimited arguments to pass to node in cluster mode`,
				Args: []model.Arg{{
					Name:        "Node Args",
					Description: `–node-args="–debug=7001 –trace-deprecation"`,
				}},
			}, {
				Name:        []string{"–-no-color"},
				Description: `Skip colors`,
			}, {
				Name:        []string{"–-no-vizion"},
				Description: `Starts an app without vizion feature (versioning control)`,
			}, {
				Name:        []string{"–-no-autorestart"},
				Description: `Starts an app without automatic restart`,
			}, {
				Name:        []string{"–-no-treekill"},
				Description: `Only kills the main process, not detached children`,
			}, {
				Name:        []string{"–-no-pmx"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-no-automation"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-trace"},
				Description: `Enables transaction tracing with km`,
			}, {
				Name:        []string{"–-disable-trace"},
				Description: `Disables transaction tracing with km`,
			}, {
				Name:        []string{"–-attach"},
				Description: `Attaches logging after your start/restart/stop/reload`,
			}, {
				Name:        []string{"–-sort"},
				Description: `Sort process according to field’s name`,
				Args: []model.Arg{{
					Name:        "field name",
					Description: `Field_name:sort`,
				}},
			}, {
				Name:        []string{"–-v8"},
				Description: `Enables v8 data collecting`,
			}, {
				Name:        []string{"–-event-loop-inspector"},
				Description: `Enables event-loop-inspector dump in apm`,
			}, {
				Name:        []string{"–-deep-monitoring"},
				Description: `Enables all monitoring tools (equivalent to –v8 –event-loop-inspector –trace)`,
			}, {
				Name:        []string{"-h", "–-help"},
				Description: `Outputs usage information`,
			}},
		}, {
			Name:        []string{"unlink"},
			Description: `Linking action to keymetrics.io`,
		}, {
			Name:        []string{"unmonitor"},
			Description: `Unmonitor target process`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"monitor"},
			Description: `<Unm>onitor target process`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"open"},
			Description: `Open dashboard in browser`,
		}, {
			Name:        []string{"register"},
			Description: `Create an account on keymetrics`,
		}, {
			Name:        []string{"login"},
			Description: `Login to keymetrics and link current PM2`,
		}, {
			Name:        []string{"web"},
			Description: `Launch a health API on 0.0.0.0:9615`,
		}, {
			Name:        []string{"dump", "save"},
			Description: `Dump all processes for resurrecting them later`,
		}, {
			Name:        []string{"send"},
			Description: `Send stdin to pm id`,
			Args: []model.Arg{{
				Name: "pm id",
			}, {
				Name: "line",
			}},
		}, {
			Name:        []string{"attach"},
			Description: `Attach stdin/stdout to application identified by pm id`,
			Args: []model.Arg{{
				Name: "pm id",
			}, {
				Name:       "command",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"resurrect"},
			Description: `Resurrect previously dumped processes`,
		}, {
			Name:        []string{"unstartup"},
			Description: `Disable and clear auto startup`,
			Args: []model.Arg{{
				Name:        "platform",
				Suggestions: []model.Suggestion{{Name: []string{`systemd`}}, {Name: []string{`upstart`}}, {Name: []string{`launchd`}}, {Name: []string{`rcd`}}},
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"startup"},
			Description: `Setup script for pm2 at boot`,
			Args: []model.Arg{{
				Name:        "platform",
				Suggestions: []model.Suggestion{{Name: []string{`systemd`}}, {Name: []string{`upstart`}}, {Name: []string{`launchd`}}, {Name: []string{`rcd`}}},
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"logrotate"},
			Description: `Copy default logrotate configuration`,
		}, {
			Name:        []string{"ecosystem", "init"},
			Description: `Generate a process conf file`,
			Args: []model.Arg{{
				Name:        "mode",
				Suggestions: []model.Suggestion{{Name: []string{`null`}}, {Name: []string{`simple`}}},
				IsOptional:  true,
			}},
		}, {
			Name:        []string{"reset"},
			Description: `Reset counters for process`,
			Args: []model.Arg{{
				Name: "name, id, or all",
			}},
		}, {
			Name:        []string{"describe"},
			Description: `Describe all parameters of a process id`,
			Args: []model.Arg{{
				Name: "id",
			}},
		}, {
			Name:        []string{"desc", "info", "show"},
			Description: `(alias) Describe all parameters of a process id`,
			Args: []model.Arg{{
				Name: "id",
			}},
		}, {
			Name:        []string{"list", "ls"},
			Description: `List all processes`,
		}, {
			Name:        []string{"l", "ps", "status"},
			Description: `(alias) list all processes`,
		}, {
			Name:        []string{"jlist"},
			Description: `List all processes in JSON format`,
		}, {
			Name:        []string{"prettylist"},
			Description: `Print json in a prettified JSON`,
		}, {
			Name:        []string{"monit"},
			Description: `Launch termcaps monitoring`,
		}, {
			Name:        []string{"imonit"},
			Description: `Launch legacy termcaps monitoring`,
		}, {
			Name:        []string{"dashboard", "dash"},
			Description: `Launch dashboard with monitoring and logs`,
		}, {
			Name:        []string{"flush"},
			Description: `Flush logs`,
		}, {
			Name:        []string{"reloadLogs"},
			Description: `Reload all logs`,
		}, {
			Name:        []string{"logs"},
			Description: `Stream logs logs file`,
			Args: []model.Arg{{
				Name: "id or name",
			}},
			Options: []model.Option{{
				Name:        []string{"-V", "--version"},
				Description: `Outputs the version number`,
			}, {
				Name:        []string{"-v"},
				Description: `Gets version`,
			}, {
				Name:        []string{"-s", "--silent"},
				Description: `Hides all messages`,
			}, {
				Name:        []string{"-m", "--mini-list"},
				Description: `Displays a compacted list without formatting`,
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Forces actions`,
			}, {
				Name:        []string{"--disable-logs"},
				Description: `Do not write logs`,
			}, {
				Name:        []string{"-n", "--name"},
				Description: `Sets a name for script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-i", "--instances"},
				Description: `Launches [number] instances (for networked app)(load balanced)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"--parallel"},
				Description: `Number of parallel actions (for restart/reload)`,
				Args: []model.Arg{{
					Name: "number",
				}},
			}, {
				Name:        []string{"-l", "--log"},
				Description: `Specifies entire log file (error and out are both included)`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFilepaths},
					Name:       "path",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-o", "--output"},
				Description: `Specifies out log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-e", "--error"},
				Description: `Specifies error log file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"-p", "--pid"},
				Description: `Specify pid file`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "pid",
				}},
			}, {
				Name:        []string{"-k", "--kill-timeout"},
				Description: `Delays before sending final SIGKILL signal to process`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--listen-timeout"},
				Description: `Listen timeout on application reload`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--max-memory-restart"},
				Description: `Specify max memory amount used to autorestart (in octet or use syntax like 100M)`,
				Args: []model.Arg{{
					Name: "memory",
				}},
			}, {
				Name:        []string{"--restart-delay"},
				Description: `Specify a delay between restarts (in milliseconds)`,
				Args: []model.Arg{{
					Name: "delay",
				}},
			}, {
				Name:        []string{"--env"},
				Description: `Specify environment to get specific env variables`,
				Args: []model.Arg{{
					Name: "Environment Name",
				}},
			}, {
				Name:        []string{"--log-type"},
				Description: `Specify log output style (raw by default, json optional)`,
				Args: []model.Arg{{
					Name: "type",
				}},
			}, {
				Name:        []string{"-x", "--execute-command"},
				Description: `Execute a program using fork system`,
			}, {
				Name:        []string{"--max-restarts"},
				Description: `Only Restart the script COUNT times`,
				Args: []model.Arg{{
					Name:       "Count",
					IsOptional: true,
				}},
			}, {
				Name:        []string{"-u", "--user"},
				Description: `Defines user when generating startup script`,
				Args: []model.Arg{{
					Name: "username",
				}},
			}, {
				Name:        []string{"--uid"},
				Description: `Runs target script with <uid> rights`,
				Args: []model.Arg{{
					Name: "uid",
				}},
			}, {
				Name:        []string{"--gid"},
				Description: `Runs target script with <gid> rights`,
				Args: []model.Arg{{
					Name: "gid",
				}},
			}, {
				Name:        []string{"--cwd"},
				Description: `Runs target script as <username>`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "path",
				}},
			}, {
				Name:        []string{"--hp"},
				Description: `Defines home path when generating startup script`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "home path",
				}},
			}, {
				Name:        []string{"--wait-ip"},
				Description: `Overrides systemd script to wait for full internet connectivity to launch pm2`,
			}, {
				Name:        []string{"--service-name"},
				Description: `Defines service name when generating startup script`,
				Args: []model.Arg{{
					Name: "name",
				}},
			}, {
				Name:        []string{"-c", "--cron"},
				Description: `Restarts a running process based on a cron pattern`,
				Args: []model.Arg{{
					Name: "Cron Pattern",
				}},
			}, {
				Name:        []string{"-w", "--write"},
				Description: `Writes configuration in local folder`,
			}, {
				Name:        []string{"--interpreter"},
				Description: `The interpreter pm2 should use for executing app (bash, python…)`,
				Args: []model.Arg{{
					Name: "interpreter",
				}},
			}, {
				Name:        []string{"--interpreter-args"},
				Description: `Interprets options (alias of –node-args)`,
				Args: []model.Arg{{
					Name: "Arguments",
				}},
			}, {
				Name:        []string{"--log-date-format"},
				Description: `Adds custom prefix timestamp to logs`,
				Args: []model.Arg{{
					Name: "Date Format",
				}},
			}, {
				Name:        []string{"--no-daemon"},
				Description: `Runs pm2 daemon in the foreground if it doesn’t exist already`,
			}, {
				Name:        []string{"-a", "--update-env"},
				Description: `Updates environment on restart/reload (-a <=> apply)`,
			}, {
				Name:        []string{"–-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-only"},
				Description: `With json declaration, allow to only act on one application`,
				Args: []model.Arg{{
					Name: "app name",
				}},
			}, {
				Name:        []string{"–-disable-source-map-support"},
				Description: `Force source map support`,
			}, {
				Name:        []string{"–-wait-ready"},
				Description: `Asks pm2 to wait for ready event from your app`,
			}, {
				Name:        []string{"–-merge-logs"},
				Description: `Merges logs from different instances but keep error and out separated`,
			}, {
				Name:        []string{"–-watch"},
				Description: `Watches application folder for changes (default: )`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders},
					Name:       "paths",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-ignore-watch"},
				Description: `Folder/files to be ignored watching`,
				Args: []model.Arg{{
					Templates:  []model.Template{model.TemplateFolders, model.TemplateFilepaths},
					Name:       "Folder or Files",
					IsVariadic: true,
				}},
			}, {
				Name:        []string{"–-node-args"},
				Description: `Space delimited arguments to pass to node in cluster mode`,
				Args: []model.Arg{{
					Name:        "Node Args",
					Description: `–node-args="–debug=7001 –trace-deprecation"`,
				}},
			}, {
				Name:        []string{"–-no-color"},
				Description: `Skip colors`,
			}, {
				Name:        []string{"–-no-vizion"},
				Description: `Starts an app without vizion feature (versioning control)`,
			}, {
				Name:        []string{"–-no-autorestart"},
				Description: `Starts an app without automatic restart`,
			}, {
				Name:        []string{"–-no-treekill"},
				Description: `Only kills the main process, not detached children`,
			}, {
				Name:        []string{"–-no-pmx"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-no-automation"},
				Description: `Starts an app without apm`,
			}, {
				Name:        []string{"–-trace"},
				Description: `Enables transaction tracing with km`,
			}, {
				Name:        []string{"–-disable-trace"},
				Description: `Disables transaction tracing with km`,
			}, {
				Name:        []string{"–-attach"},
				Description: `Attaches logging after your start/restart/stop/reload`,
			}, {
				Name:        []string{"–-sort"},
				Description: `Sort process according to field’s name`,
				Args: []model.Arg{{
					Name:        "field name",
					Description: `Field_name:sort`,
				}},
			}, {
				Name:        []string{"–-v8"},
				Description: `Enables v8 data collecting`,
			}, {
				Name:        []string{"–-event-loop-inspector"},
				Description: `Enables event-loop-inspector dump in apm`,
			}, {
				Name:        []string{"–-deep-monitoring"},
				Description: `Enables all monitoring tools (equivalent to –v8 –event-loop-inspector –trace)`,
			}, {
				Name:        []string{"-h", "–-help"},
				Description: `Outputs usage information`,
			}},
		}, {
			Name:        []string{"kill"},
			Description: `Kill daemon`,
		}, {
			Name:        []string{"pull"},
			Description: `Updates repository for a given app`,
			Args: []model.Arg{{
				Name: "name",
			}, {
				Name:       "commit id",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"forward"},
			Description: `Updates repository to the next commit for a given app`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"backward"},
			Description: `Downgrades repository to the previous commit for a given app`,
			Args: []model.Arg{{
				Name: "name",
			}},
		}, {
			Name:        []string{"gc"},
			Description: `Force PM2 to trigger garbage collection`,
		}, {
			Name:        []string{"deepUpdate"},
			Description: `Performs a deep update of PM2`,
		}, {
			Name:        []string{"serve", "expose"},
			Description: `Serves a directory over http via port`,
			Args: []model.Arg{{
				Name:       "path",
				IsOptional: true,
			}, {
				Name:       "port",
				IsOptional: true,
			}},
		}},
	}
}
