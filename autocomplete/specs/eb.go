// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["eb"] = model.Subcommand{
		Name:        []string{"eb"},
		Description: `AWS Elastic Beanstalk`,
		Subcommands: []model.Subcommand{{
			Name:        []string{"init"},
			Description: `Initialize a new AWS Elastic Beanstalk application`,
			Args: []model.Arg{{
				Name:        "name",
				Description: `The name of the application`,
			}},
			Options: []model.Option{{
				Name:        []string{"-i", "--interactive"},
				Description: `Forces EB CLI to prompt you to provide a value for every eb init command option`,
			}, {
				Name:        []string{"-k", "--keyname"},
				Description: `The name of the AWS EC2 key pair`,
				Args: []model.Arg{{
					Name: "keyname",
				}},
			}, {
				Name:        []string{"--modules"},
				Description: `List of child directories to initialize`,
			}, {
				Name:        []string{"-p", "--platform"},
				Description: `The platform version to use`,
				Args: []model.Arg{{
					Name: "plataform-version",
				}},
			}, {
				Name:        []string{"--tags"},
				Description: `List of tags to apply to the application`,
				Args: []model.Arg{{
					Name: "key=value",
				}},
			}},
		}, {
			Name:        []string{"deploy"},
			Description: `Deploys the application source bundle from the initialized project directory to the running application`,
			Args: []model.Arg{{
				Name:      "environment-name",
				Generator: nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-l", "--label"},
				Description: `Specify a label to use for the version that the EB CLI creates`,
				Args: []model.Arg{{
					Name:        "version-label",
					Description: `The label to use for the version`,
				}},
			}, {
				Name:        []string{"--env-group-suffix"},
				Description: `Group name to append to the environment name`,
				Args: []model.Arg{{
					Name:        "groupname",
					Description: `The group name to append to the environment name`,
				}},
			}, {
				Name:        []string{"-m", "--message"},
				Description: `The description for the application version, enclosed in double quotation marks`,
				Args: []model.Arg{{
					Name:        "version-description",
					Description: `Description for the application version`,
				}},
			}, {
				Name:        []string{"--modules"},
				Description: `List of components to update. Only for Compose Environments`,
				Args: []model.Arg{{
					Name:        "component",
					Description: `Component to update`,
				}},
			}, {
				Name:        []string{"-p", "--platform"},
				Description: `Preprocess and validate the environment manifest and configuration files in the source bundle`,
			}, {
				Name:        []string{"--source"},
				Description: `CodeCommit repository and branch`,
				Args: []model.Arg{{
					Name:        "repository-name/repository-branch",
					Description: `The name of the CodeCommit repository and branch`,
				}},
			}, {
				Name:        []string{"--staged"},
				Description: `Deploy files staged in the git index instead of the HEAD commit`,
			}, {
				Name:        []string{"--timeout"},
				Description: `The number of minutes before the command times out`,
				Args: []model.Arg{{
					Name:        "minutes",
					Description: `Minutes before timeout`,
				}},
			}, {
				Name:        []string{"--version"},
				Description: `An existing application version to deploy`,
				Args: []model.Arg{{
					Name:        "version-label",
					Description: `Label of the existing version to deploy`,
				}},
			}},
		}, {
			Name:        []string{"abort"},
			Description: `Abort the current running process`,
		}, {
			Name:        []string{"clone"},
			Description: `Clones an environment to a new environment so that both have identical environment settings`,
			Args: []model.Arg{{
				Name:        "environment-name",
				Description: `The name of the environment to clone`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-n", "--clone_name"},
				Description: `Desired name for the cloned environment`,
				Args: []model.Arg{{
					Name:        "string",
					Description: `The name for the cloned environment`,
				}},
			}, {
				Name:        []string{"-c", "--cname"},
				Description: `Desired CNAME prefix for the cloned environment`,
				Args: []model.Arg{{
					Name:        "cname",
					Description: `CNAME prefix`,
				}},
			}, {
				Name:        []string{"--envvars"},
				Description: `Environment properties in a comma-separated list with the format name=value`,
			}, {
				Name:        []string{"--exact"},
				Description: `Prevents Elastic Beanstalk from updating the solution stack version for the new clone environment to the most recent version available`,
			}, {
				Name:        []string{"--scale"},
				Description: `The number of instances to run in the clone environment when it is launched`,
				Args: []model.Arg{{
					Name:        "number",
					Description: `Number of instances`,
				}},
			}, {
				Name:        []string{"--tags"},
				Description: `Tags for the resources in your environment in a comma-separated list with the format name=value`,
				Args: []model.Arg{{
					Name:        "name=value",
					Description: `Tags for the resources in your environment`,
				}},
			}, {
				Name:        []string{"--timeout"},
				Description: `The number of minutes before the command times out`,
			}},
		}, {
			Name:        []string{"open"},
			Description: `Opens the public URL of your website in the default browser`,
			Args: []model.Arg{{
				Name:        "environment-name",
				Description: `The name of the environment to open`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"list"},
			Description: `List environments`,
			Options: []model.Option{{
				Name:        []string{"-a", "--all"},
				Description: `List all environments from all applications`,
			}, {
				Name:        []string{"-v", "--verbose"},
				Description: `Provides more detailed information about all environments, including instances`,
			}},
		}, {
			Name:        []string{"printenv"},
			Description: `Prints all the environment properties in the command window`,
			Args: []model.Arg{{
				Name:        "environment-name",
				Description: `The name of the environment to print`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"ssh"},
			Description: `Connect to a Linux Amazon EC2 instance in your environment using Secure Shell`,
			Args: []model.Arg{{
				Name:        "environment-name",
				Description: `The name of the environment to connect to`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-i", "--instance"},
				Description: `The ID of the instance to connect to`,
			}, {
				Name:        []string{"-n", "--number"},
				Description: `The number of the instance to connect to by number`,
			}, {
				Name:        []string{"-o", "--keep_open"},
				Description: `Leave port 22 open on the security group after the SSH session ends`,
			}, {
				Name:        []string{"--command"},
				Description: `Execute a shell command on the specified instance instead of starting an SSH session`,
			}, {
				Name:        []string{"--custom"},
				Description: `Specify an SSH command to use instead of 'ssh -i keyfile'. Do not include the remote user and hostname`,
			}, {
				Name:        []string{"--setup"},
				Description: `Change the key pair assigned to the environment's instances`,
			}, {
				Name:        []string{"--force"},
				Description: `Open port 22 to incoming traffic from 0.0.0.0/0 in the environment's security group, even if the security group is already configured for SSH`,
			}, {
				Name:        []string{"--timeout"},
				Description: `Set number of minutes before the command times out`,
				Args: []model.Arg{{
					Name:        "minutes",
					Description: `Number of minutes before timeout`,
				}},
			}},
		}, {
			Name:        []string{"use"},
			Description: `Sets the specified environment as the default environment`,
			Args: []model.Arg{{
				Name:        "environment-name",
				Description: `The name of the environment to use`,
				Generator:   nil, // TODO: port over generator
			}},
			Options: []model.Option{{
				Name:        []string{"-r", "--region"},
				Description: `Change the region in which you create environments`,
				Args: []model.Arg{{
					Name:        "region",
					Description: `The region to use`,
				}},
			}, {
				Name:        []string{"--source"},
				Description: `CodeCommit repository and branch`,
				Args: []model.Arg{{
					Name:        "codecommit/repository-name/repository-branch",
					Description: `The name of the CodeCommit repository and branch`,
				}},
			}},
		}},
	}
}
