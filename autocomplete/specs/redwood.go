// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["redwood"] = model.Subcommand{
		Name:        []string{"redwood"},
		Description: `Redwood provides a first-class CLI that helps you at every stage of development, from your first commit to your first deploy`,
		Options: []model.Option{{
			Name:        []string{"--help", "-h"},
			Description: `Show help for redwood`,
		}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"dev"},
			Description: `Start development servers for api and web`,
			Args: []model.Arg{{
				Name:        "side",
				Description: `Which side(s) to build`,
				Suggestions: []model.Suggestion{{
					Name:        []string{`api`},
					Description: `Build the api server`,
				}, {
					Name:        []string{`web`},
					Description: `Build the web server`,
				}},
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--forward", "--fwd"},
				Description: `String of one or more Webpack Dev Server config options`,
				Args: []model.Arg{{
					Name:        "options",
					Description: `Options to pass to Webpack Dev Server`,
				}},
			}},
		}, {
			Name:        []string{"deploy"},
			Description: `Deploy your redwood project to a hosting provider target`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"aws"},
				Description: `Deploy to AWS using the selected provider`,
				Args: []model.Arg{{
					Name:        "provider",
					Description: `AWS Deploy provider to configure`,
					Suggestions: []model.Suggestion{{Name: []string{`serverless`}}},
					IsOptional:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"--side"},
					Description: `Show help for command`,
					Args: []model.Arg{{
						Name:        "side",
						Description: `Which side(s) to deploy`,
						Suggestions: []model.Suggestion{{
							Name:        []string{`api`},
							Description: `Deploy the api server`,
						}, {
							Name:        []string{`web`},
							Description: `Deploy the web server`,
						}},
					}},
				}},
			}, {
				Name:        []string{"netlify"},
				Description: `Build command for Netlify deploy`,
				Options: []model.Option{{
					Name:        []string{"--build"},
					Description: `Build for production [default: "true"]`,
				}, {
					Name:        []string{"--prisma"},
					Description: `Apply database migrations [default: "true"]`,
				}, {
					Name:        []string{"--data-migrate", "--dm"},
					Description: `Migrate the data in your database [default: "true"]`,
				}},
			}, {
				Name:        []string{"render"},
				Description: `Build (web) and Start (api) command for Render deploy`,
				Args: []model.Arg{{
					Name:        "side",
					Description: `Select side to build`,
					Suggestions: []model.Suggestion{{Name: []string{`api`}}, {Name: []string{`web`}}},
				}},
				Options: []model.Option{{
					Name:        []string{"--serve"},
					Description: `Run server for api in production [default: "true"]`,
				}, {
					Name:        []string{"--prisma"},
					Description: `Apply database migrations [default: "true"]`,
				}, {
					Name:        []string{"--data-migrate", "--dm"},
					Description: `Migrate the data in your database [default: "true"]`,
				}},
			}, {
				Name:        []string{"vercel"},
				Description: `Build command for Vercel deploy`,
				Options: []model.Option{{
					Name:        []string{"--build"},
					Description: `Build for production [default: "true"]`,
				}, {
					Name:        []string{"--prisma"},
					Description: `Apply database migrations [default: "true"]`,
				}, {
					Name:        []string{"--data-migrate", "--dm"},
					Description: `Migrate the data in your database [default: "true"]`,
				}},
			}},
		}, {
			Name:        []string{"destroy", "d"},
			Description: `Rollback changes made by the generate command`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"cell"},
				Description: `Destroy a cell component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the cell component`,
				}},
			}, {
				Name:        []string{"component"},
				Description: `Destroy a component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the component`,
				}},
			}, {
				Name:        []string{"function"},
				Description: `Destroy a Function`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the Function`,
				}},
			}, {
				Name:        []string{"layout"},
				Description: `Destroy a layout component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the layout component`,
				}},
			}, {
				Name:        []string{"page"},
				Description: `Destroy a page and route component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the page`,
				}, {
					Name:        "path",
					Description: `URL path to the page. Defaults to name`,
					IsOptional:  true,
				}},
			}, {
				Name:        []string{"scaffold"},
				Description: `Destroy pages, SDL, and Services files based on a given DB schema Model`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the scaffold`,
				}},
			}, {
				Name:        []string{"sdl"},
				Description: `Destroy a GraphQL schema and service component based on a given DB schema Model`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the sdl`,
				}},
			}, {
				Name:        []string{"service"},
				Description: `Destroy a service component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the service`,
				}},
			}},
		}, {
			Name:        []string{"generate", "g"},
			Description: `Save time by generating boilerplate code`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"cell"},
				Description: `Generate a cell component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the cell component`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}, {
					Name:        []string{"--list"},
					Description: `Use this flag to generate a list cell. This flag is needed when dealing with irregular words whose plural and singular is identical such as equipment or pokemon`,
				}, {
					Name:        []string{"--tests"},
					Description: `Generate test files [default: true]`,
				}, {
					Name:        []string{"--stories"},
					Description: `Generate Storybook files [default: true]`,
				}},
			}, {
				Name:        []string{"component"},
				Description: `Generate a component component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the component`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}, {
					Name:        []string{"--tests"},
					Description: `Generate test files [default: true]`,
				}, {
					Name:        []string{"--stories"},
					Description: `Generate Storybook files [default: true]`,
				}},
			}, {
				Name:        []string{"dataMigration"},
				Description: `Generate a data migration component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the component`,
				}},
			}, {
				Name:        []string{"directive"},
				Description: `Generate a directive`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the directive`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}, {
					Name:        []string{"--type"},
					Description: `Directive type [Choices: "validator", "transformer"]`,
				}},
			}, {
				Name:        []string{"function"},
				Description: `Generate a Function`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the Function`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}},
			}, {
				Name:        []string{"layout"},
				Description: `Generate a layout component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the layout component`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}, {
					Name:        []string{"--tests"},
					Description: `Generate test files [default: true]`,
				}, {
					Name:        []string{"--stories"},
					Description: `Generate Storybook files [default: true]`,
				}, {
					Name:        []string{"--skipLink"},
					Description: `Generate a layout with a skip link [default: false]`,
				}},
			}, {
				Name:        []string{"page"},
				Description: `Generate a page component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the page`,
				}, {
					Name:        "path",
					Description: `URL path to the page. Defaults to name`,
					IsOptional:  true,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}, {
					Name:        []string{"--tests"},
					Description: `Generate test files [default: true]`,
				}, {
					Name:        []string{"--stories"},
					Description: `Generate Storybook files [default: true]`,
				}},
			}, {
				Name:        []string{"scaffold"},
				Description: `Generate Pages, SDL, and Services files based on a given DB schema Model. Also accepts <path/model>`,
				Args: []model.Arg{{
					Name:        "model",
					Description: `Model to scaffold. You can also use <path/model> to nest files by type at the given path directory (or directories). For example, redwood g scaffold admin/post`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}},
			}, {
				Name:        []string{"sdl"},
				Description: `Generate a GraphQL schema and service object`,
				Args: []model.Arg{{
					Name:        "model",
					Description: `Model to generate the sdl for`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}, {
					Name:        []string{"--crud"},
					Description: `Also generate mutations`,
				}},
			}, {
				Name:        []string{"service"},
				Description: `Generate a service component`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the service`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}, {
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}, {
					Name:        []string{"--tests"},
					Description: `Generate test files [default: true]`,
				}, {
					Name:        []string{"--stories"},
					Description: `Generate Storybook files [default: true]`,
				}},
			}, {
				Name:        []string{"types"},
				Description: `Generate types and supplementary code`,
			}, {
				Name:        []string{"script"},
				Description: `Generate a script that can use your services/libs to execute with redwood exec script <name>`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the service`,
				}},
				Options: []model.Option{{
					Name:        []string{"--typescript", "--ts"},
					Description: `Generate TypeScript files Enabled by default if we detect your project is TypeScript`,
				}},
			}},
		}, {
			Name:        []string{"exec"},
			Description: `Execute scripts generated by yarn redwood generate script to run one-off operations, long-running jobs, or utility scripts`,
			Args: []model.Arg{{
				Name:        "script",
				Description: `Name of the script to execute`,
				Generator:   nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"build"},
			Description: `Build the api and web`,
			Args: []model.Arg{{
				Name:        "side",
				Description: `Which side(s) to build`,
				Suggestions: []model.Suggestion{{
					Name:        []string{`api`},
					Description: `Build the api server`,
				}, {
					Name:        []string{`web`},
					Description: `Build the web server`,
				}},
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--stats"},
				Description: `Use Webpack Bundle Analyzer to visualize the size of Webpack output files via an interactive zoomable treemap`,
			}, {
				Name:        []string{"--verbose", "-v"},
				Description: `Print more information while building`,
			}},
		}, {
			Name:        []string{"diagnostics", "check"},
			Description: `Get structural diagnostics for a Redwood project (experimental)`,
		}, {
			Name:        []string{"console", "c"},
			Description: `Launch an interactive Redwood shell (experimental)`,
		}, {
			Name:        []string{"info"},
			Description: `Print your system environment information`,
		}, {
			Name:        []string{"upgrade"},
			Description: `Upgrade all @redwoodjs packages via an interactive CLI`,
			Options: []model.Option{{
				Name:        []string{"--dry-run", "-d"},
				Description: `Check for outdated packages without upgrading`,
			}, {
				Name:        []string{"--tag", "-t"},
				Description: `Choices are "canary", "rc", or a specific version (e.g. "0.19.3"). WARNING: Unstable releases in the case of "canary" and "rc", which will force upgrade packages to the most recent release of the specified tag`,
				Args: []model.Arg{{
					Name:        "tag",
					Description: `Tag to use for upgrade`,
					Suggestions: []model.Suggestion{{
						Name:        []string{`canary`},
						Description: `Upgrade to the latest canary release`,
					}, {
						Name:        []string{`rc`},
						Description: `Upgrade to the latest RC release`,
					}},
				}},
			}, {
				Name:        []string{"--pr"},
				Description: `Installs packages for the given PR`,
			}},
		}, {
			Name:        []string{"serve"},
			Description: `Runs a server that serves both the api and the web sides`,
			Args: []model.Arg{{
				Name:        "side",
				Description: `Which side(s) to check (Default to both)`,
				Suggestions: []model.Suggestion{{
					Name:        []string{`api`},
					Description: `Check the api server`,
				}, {
					Name:        []string{`web`},
					Description: `Check the web server`,
				}},
				IsOptional: true,
			}},
			Options: []model.Option{{
				Name:        []string{"--port"},
				Description: `What port should the server run on [default: 8911]`,
				Args: []model.Arg{{
					Name:        "port",
					Description: `Port to run the server on`,
				}},
			}, {
				Name:        []string{"--socket"},
				Description: `The socket the server should run. This takes precedence over port`,
				Args: []model.Arg{{
					Name:        "socket",
					Description: `Socket to run the server on`,
				}},
			}, {
				Name:        []string{"--apiRootPath"},
				Description: `The root path where your api functions are served`,
				Args: []model.Arg{{
					Templates:   []model.Template{model.TemplateFolders},
					Name:        "apiRootPath",
					Description: `Root path for the api`,
				}},
			}, {
				Name:        []string{"--apiHost"},
				Description: `Forwards requests from the apiProxyPath (defined in redwood.toml) to the specified host`,
				Args: []model.Arg{{
					Name:        "apiHost",
					Description: `Host to forward requests to`,
				}},
			}},
		}, {
			Name:        []string{"type-check", "tsc", "tc"},
			Description: `Runs a TypeScript compiler check on both the api and the web sides`,
			Args: []model.Arg{{
				Name:        "side",
				Description: `Which side(s) to check (Default to both)`,
				Suggestions: []model.Suggestion{{
					Name:        []string{`api`},
					Description: `Check the api server`,
				}, {
					Name:        []string{`web`},
					Description: `Check the web server`,
				}},
				IsOptional: true,
			}},
		}, {
			Name:        []string{"test"},
			Description: `Run Jest tests for api and web`,
			Args: []model.Arg{{
				Name:        "sides or filter",
				Description: `Which side(s) to test, and/or a regular expression to match against your test files to filter by`,
				Suggestions: []model.Suggestion{{Name: []string{`api`}}, {Name: []string{`web`}}},
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--help"},
				Description: `Show help`,
			}, {
				Name:        []string{"--version"},
				Description: `Show version number`,
			}, {
				Name:        []string{"--watch"},
				Description: `Run tests related to changed files based on hg/git (uncommitted files). Specify the name or path to a file to focus on a specific set of tests [default: true]`,
			}, {
				Name:        []string{"--watchAll"},
				Description: `Run all tests`,
			}, {
				Name:        []string{"--collectCoverage"},
				Description: `Show test coverage summary and output info to coverage directory in project root. See this directory for an .html coverage report`,
			}, {
				Name:        []string{"--clearCache"},
				Description: `Delete the Jest cache directory and exit without running tests`,
			}, {
				Name:        []string{"--db-push"},
				Description: `Syncs the test database with your Prisma schema without requiring a migration. It creates a test database if it doesn't already exist [default: true]. This flag is ignored if your project doesn't have an api side`,
			}},
		}, {
			Name:        []string{"storybook"},
			Description: `Starts Storybook locally`,
			Options: []model.Option{{
				Name:        []string{"--open"},
				Description: `Open Storybook in your browser on start`,
			}, {
				Name:        []string{"--build"},
				Description: `Build Storybook`,
			}, {
				Name:        []string{"--port"},
				Description: `Which port to run Storybook on (defaults to 7910)`,
				Args: []model.Arg{{
					Name:        "port",
					Description: `Port to run Storybook on`,
				}},
			}},
		}, {
			Name:        []string{"lint"},
			Description: `Lint your files`,
			Options: []model.Option{{
				Name:        []string{"--fix"},
				Description: `Try to fix linting errors`,
			}},
		}, {
			Name:        []string{"open"},
			Description: `Open your project in your browser`,
		}, {
			Name:        []string{"setup"},
			Description: `Initialize project config and install packages`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"auth"},
				Description: `Setup auth configuration for a provider`,
				Args: []model.Arg{{
					Name:        "provider",
					Description: `Auth provider to configure`,
					Suggestions: []model.Suggestion{{Name: []string{`auth0`}}, {Name: []string{`firebase`}}, {Name: []string{`goTrue`}}, {Name: []string{`magicLink`}}, {Name: []string{`netlify`}}},
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}},
			}, {
				Name:        []string{"custom-web-index"},
				Description: `Setup an index.js file in web/src so you can customize how your Redwood App mounts to the DOM`,
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}},
			}, {
				Name:        []string{"generator"},
				Description: `SCopies a given generator's template files to your local app for customization. The next time you generate that type again, it will use your custom template instead of Redwood's default`,
				Args: []model.Arg{{
					Name:        "name",
					Description: `Name of the generator template(s) to copy (see help for list)`,
				}},
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing copied template files`,
				}},
			}, {
				Name:        []string{"tsconfig"},
				Description: `Setup tsconfig.json on both web and api sides`,
				Options: []model.Option{{
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}},
			}, {
				Name:        []string{"deploy"},
				Description: `Setup auth configuration for a provider`,
				Args: []model.Arg{{
					Name:        "provider",
					Description: `Auth provider to configure`,
					Suggestions: []model.Suggestion{{Name: []string{`aws-serverless`}}, {Name: []string{`netlify`}}, {Name: []string{`render`}}, {Name: []string{`vercel`}}},
				}},
				Options: []model.Option{{
					Name:        []string{"--database", "-d"},
					Description: `Database deployment for Render only  [default: "postgresql"]`,
					Args: []model.Arg{{
						Name:        "database",
						Suggestions: []model.Suggestion{{Name: []string{`none`}}, {Name: []string{`postgresql`}}, {Name: []string{`sqlite`}}},
						IsOptional:  true,
					}},
				}, {
					Name:        []string{"--force", "-f"},
					Description: `Overwrite existing files`,
				}},
			}},
		}, {
			Name:        []string{"data-migrate", "dm", "dataMigrate"},
			Description: `Data migration tools`,
			Args: []model.Arg{{
				Name: "command",
				Suggestions: []model.Suggestion{{
					Name:        []string{`install`},
					Description: `Appends DataMigration model to schema.prisma, creates api/db/dataMigrations directory`,
				}, {
					Name:        []string{`up`},
					Description: `Executes outstanding data migrations`,
				}},
			}},
		}, {
			Name:        []string{"prisma"},
			Description: `Prisma commands`,
			Subcommands: []model.Subcommand{{
				Name:        []string{"init"},
				Description: `Setup Prisma for your app`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Display this help message`,
				}, {
					Name:        []string{"--datasource-provider"},
					Description: `Define the datasource provider to use`,
					Args: []model.Arg{{
						Description: `Choose provider`,
						Suggestions: []model.Suggestion{{Name: []string{`PostgreSQL`}}, {Name: []string{`MySQL`}}, {Name: []string{`SQLite`}}, {Name: []string{`SQLServer`}}, {Name: []string{`MongoDB`}}, {Name: []string{`CockroachDB`}}},
					}},
				}, {
					Name:        []string{"--url"},
					Description: `Define a custom datasource url`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "full url",
					}},
				}},
			}, {
				Name:        []string{"generate"},
				Description: `Generate artifacts (e.g. Prisma Client)`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Display this help message`,
				}, {
					Name:        []string{"--schema"},
					Description: `Custom path to your Prisma schema`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "Schema path",
					}},
				}, {
					Name:        []string{"--data-proxy"},
					Description: `Enable the Data Proxy in the Prisma Client`,
				}, {
					Name:        []string{"--watch"},
					Description: `Watch the Prisma schema and rerun after a change`,
				}},
			}, {
				Name:        []string{"studio"},
				Description: `Open Prisma Studio`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Display this help message`,
				}, {
					Name:        []string{"--schema"},
					Description: `Custom path to your Prisma schema`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "Schema path",
					}},
				}, {
					Name:        []string{"-p", "--port"},
					Description: `Port to start Studio on`,
					Args: []model.Arg{{
						Name: "port",
					}},
				}, {
					Name:        []string{"-b", "--browser"},
					Description: `Browser to open Studio in`,
					Args: []model.Arg{{
						Name:        "Browser choice",
						Suggestions: []model.Suggestion{{Name: []string{`firefox`}}, {Name: []string{`chrome`}}, {Name: []string{`safari`}}, {Name: []string{`none`}}},
					}},
				}, {
					Name:        []string{"-n", "--hostname"},
					Description: `Hostname to bind the Express server to`,
					Args: []model.Arg{{
						Name: "port",
					}},
				}},
			}, {
				Name:        []string{"format"},
				Description: `Format your schema`,
				Options: []model.Option{{
					Name:        []string{"-h", "--help"},
					Description: `Display this help message`,
				}, {
					Name:        []string{"--schema"},
					Description: `Custom path to your Prisma schema`,
					Args: []model.Arg{{
						Templates: []model.Template{model.TemplateFilepaths},
						Name:      "Schema path",
					}},
				}},
			}, {
				Name:        []string{"migrate"},
				Description: `Migrate your database`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"dev"},
					Description: `The migrate dev command updates your database using migrations files during development`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--skip-seed"},
						Description: `Skip triggering seed`,
					}, {
						Name:        []string{"--skip-generate"},
						Description: `Skip triggering generators (e.g. Prisma Client)`,
					}, {
						Name:        []string{"--create-only"},
						Description: `Create a new migration but do not apply it. The migration will be empty if there are no changes in Prisma schema`,
					}, {
						Name:        []string{"-n", "--name"},
						Description: `The name of the migration. If no name is provided, the CLI will prompt you`,
						Args: []model.Arg{{
							Name:       "filename",
							IsOptional: true,
						}},
					}},
				}, {
					Name:        []string{"reset"},
					Description: `Reset your database and apply all migrations, all data will be lost`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--skip-seed"},
						Description: `Skip triggering seed`,
					}, {
						Name:        []string{"--skip-generate"},
						Description: `Skip triggering generators (e.g. Prisma Client)`,
					}, {
						Name:        []string{"-f", "--force"},
						Description: `Skip the confirmation prompt`,
					}},
				}, {
					Name:        []string{"deploy"},
					Description: `Apply pending migrations to update the database schema in production/staging`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}},
				}, {
					Name:        []string{"resolve"},
					Description: `Resolve issues with database migrations in deployment databases`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--applied"},
						Description: `Record a specific migration as applied`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "migration file path",
						}},
					}, {
						Name:        []string{"--rolled-back"},
						Description: `Record a specific migration as rolled back`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "migration file path",
						}},
					}},
				}, {
					Name:        []string{"status"},
					Description: `Check the status of your database migrations`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}},
				}, {
					Name:        []string{"diff"},
					Description: `Compares the database schema from two arbitrary sources, and outputs the differences either as a human-readable summary (by default) or an executable script`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--from-url"},
						Description: `A datasource url`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--to-url"},
						Description: `A datasource url`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--from-empty"},
						Description: `Flag to assume from is an empty datamodel`,
					}, {
						Name:        []string{"--to-empty"},
						Description: `Flag to assume to is an empty datamodel`,
					}, {
						Name:        []string{"--from-schema-datamodel"},
						Description: `Path to a Prisma schema file, uses the 'datamodel' for the diff`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--to-schema-datamodel"},
						Description: `Path to a Prisma schema file, uses the 'datamodel' for the diff`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--from-schema-datasource"},
						Description: `Path to a Prisma schema file, uses the 'datasource url' for the diff`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--to-schema-datasource"},
						Description: `Path to a Prisma schema file, uses the 'datasource url' for the diff`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--from-migrations"},
						Description: `Path to the Prisma Migrate migrations directory`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFolders},
							Name:      "folder",
						}},
					}, {
						Name:        []string{"--to-migrations"},
						Description: `Path to the Prisma Migrate migrations directory`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFolders},
							Name:      "folder",
						}},
					}, {
						Name:        []string{"--shadow-database-url"},
						Description: `URL for the shadow database. Only required if using --from-migrations or --to-migrations`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--script"},
						Description: `Render a SQL script to stdout instead of the default human readable summary (not supported on MongoDB)`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--exit-code"},
						Description: `Change the exit code behavior to signal if the diff is empty or not (Empty: 0, Error: 1, Not empty: 2). Default behavior is Success: 0, Error: 1."`,
					}},
				}},
			}, {
				Name:        []string{"db"},
				Description: `Manage your database schema and lifecycle (Preview)`,
				Subcommands: []model.Subcommand{{
					Name: []string{"pull"},
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--force"},
						Description: `Ignore current Prisma schema file`,
					}, {
						Name:        []string{"--print"},
						Description: `Print the introspected Prisma schema to stdout`,
					}, {
						Name:        []string{"--url"},
						Description: `The datasource url`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--composite-type-depth"},
						Description: `Specify the depth for introspecting composite types (e.g. Embedded Documents in MongoDB). Number, default is -1 for infinite depth, 0 = off`,
						Args: []model.Arg{{
							Name: "number",
						}},
					}},
				}, {
					Name:        []string{"push"},
					Description: `This command pushes the state of your Prisma schema file to the database without using migrations files`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--skip-generate"},
						Description: `Skip generation of artifacts such as Prisma Client`,
					}, {
						Name:        []string{"--force-reset"},
						Description: `Resets the database and then updates the schema - useful if you need to start from scratch due to unexecutable migrations`,
					}, {
						Name:        []string{"--accept-data-loss"},
						Description: `Ignore data loss warnings. This option is required if as a result of making the schema changes, data may be lost`,
					}},
				}, {
					Name:        []string{"seed"},
					Description: `Seed your database`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}},
				}, {
					Name:        []string{"execute"},
					Description: `Execute native commands to your database`,
					Options: []model.Option{{
						Name:        []string{"-h", "--help"},
						Description: `Display this help message`,
					}, {
						Name:        []string{"--schema"},
						Description: `Custom path to your Prisma schema`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "Schema path",
						}},
					}, {
						Name:        []string{"--url"},
						Description: `The datasource url`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "full url",
						}},
					}, {
						Name:        []string{"--file"},
						Description: `Path to a file. The content will be sent as the script to be executed`,
						Args: []model.Arg{{
							Templates: []model.Template{model.TemplateFilepaths},
							Name:      "filepath",
						}},
					}, {
						Name:        []string{"--stdin"},
						Description: `Use the terminal standard input as the script to be executed`,
					}},
				}},
			}, {
				Name:        []string{"version", "-v"},
				Description: `Print current version of Prisma components`,
				Subcommands: []model.Subcommand{{
					Name:        []string{"--json"},
					Description: `Output JSON`,
				}},
			}},
		}},
	}
}
