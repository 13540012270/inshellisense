// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["emacs"] = model.Subcommand{
		Name:        []string{"emacs"},
		Description: `An extensible, customizable, free/libre text editor â€” and more`,
		Args: []model.Arg{{
			Templates: []model.Template{model.TemplateFilepaths},
		}},
		Options: []model.Option{{
			Name:        []string{"--batch"},
			Description: `Do not do interactive display; implies -q`,
		}, {
			Name:        []string{"--chdir"},
			Description: `Change to directory`,
		}, {
			Name:        []string{"--daemon", "--bg-daemon"},
			Description: `Start a server in the background`,
		}, {
			Name:        []string{"--fg-daemon"},
			Description: `Start a server in the foreground`,
		}, {
			Name:        []string{"--version"},
			Description: `Display Emacs version information and exit`,
		}, {
			Name:        []string{"--help"},
			Description: `Display help and exit`,
		}, {
			Name:        []string{"-q", "--no-init-file"},
			Description: `Do not load an init file`,
		}, {
			Name:        []string{"-nl", "--no-shared-memory"},
			Description: `Do not use shared memory`,
		}, {
			Name:        []string{"--no-site-file", "-nsl"},
			Description: `Do not load the site-wide startup file`,
		}, {
			Name:        []string{"--no-desktop"},
			Description: `Do not load a saved desktop`,
		}, {
			Name:        []string{"-Q", "--quick"},
			Description: `Similar to "-q --no-site-file --no-splash",  Also, avoid processing X resources`,
		}, {
			Name:        []string{"--no-splash"},
			Description: `Do not display a splash screen during start-u`,
		}, {
			Name:        []string{"--debug-init"},
			Description: `Enable Emacs Lisp debugger during the processing of the user init file ~/.emacs.  This is useful for debugging problems in the init file`,
		}, {
			Name:        []string{"-u", "--user"},
			Description: `Load user's init file`,
		}, {
			Name:        []string{"-t", "--terminal"},
			Description: `Use specified file as the terminal instead of using stdin/stdout.  This must be the first argument specified in the command line`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
			}},
		}, {
			Name:        []string{"--file", "--find-file", "--visit"},
			Description: `The same as specifying file directly as an argument`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
			}},
		}},
	}
}
