// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["launchctl"] = model.Subcommand{
		Name:        []string{"launchctl"},
		Description: `Interfaces with launchd`,
		Args:        []model.Arg{{}},
		Subcommands: []model.Subcommand{{
			Name:        []string{"bootstrap"},
			Description: `Bootstraps a domain or a service into a domain`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "service",
				Description: `Service or domain target`,
			}, {
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "service-path",
				Description: `Service path(s)`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"bootout"},
			Description: `Tears down a domain or removes a service from a domain`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "service",
				Description: `Service or domain target`,
			}, {
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "service-path",
				Description: `Service path(s)`,
				IsVariadic:  true,
			}},
		}, {
			Name:        []string{"enable"},
			Description: `Enables an existing service`,
			Args: []model.Arg{{
				Name:        "service",
				Description: `Service or domain target`,
			}},
		}, {
			Name:        []string{"disable"},
			Description: `Disables an existing service`,
			Args: []model.Arg{{
				Name:        "service",
				Description: `Service or domain target`,
			}},
		}, {
			Name:        []string{"kickstart"},
			Description: `Forces an existing service to start`,
			Args: []model.Arg{{
				Name:        "service",
				Description: `Service or domain target`,
			}},
			Options: []model.Option{{
				Name:        []string{"-k"},
				Description: `Kill instance before restarting`,
			}, {
				Name:        []string{"-p"},
				Description: `Print PID`,
			}},
		}, {
			Name:        []string{"attach"},
			Description: `Attach the system's debugger to a service`,
			Args: []model.Arg{{
				Name:        "service",
				Description: `Service or domain target`,
			}},
			Options: []model.Option{{
				Name:        []string{"-k"},
				Description: `Kill instance`,
			}, {
				Name:        []string{"-s"},
				Description: `Force the service to start`,
			}, {
				Name:        []string{"-x"},
				Description: `Attach xpcproxy`,
			}},
		}, {
			Name:        []string{"debug"},
			Description: `Configures the next invocation of a service for debugging`,
			Args: []model.Arg{{
				Name:        "argv",
				Description: `Variable args: argv0 argv1`,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--program"},
				Description: `Use program path as executable`,
				Args: []model.Arg{{
					Name: "program-path",
				}},
			}, {
				Name:        []string{"--guard-malloc"},
				Description: `Turn on libgmalloc`,
			}, {
				Name:        []string{"--malloc-stack-logging"},
				Description: `Turn on malloc(3) stack logging`,
			}, {
				Name:        []string{"--malloc-nano-allocator"},
				Description: `Turn on malloc(3) nano allocator`,
			}, {
				Name:        []string{"--debug-libraries"},
				Description: `Set the DYLD_IMAGE_SUFFIX`,
			}, {
				Name:        []string{"--introspection-libraries"},
				Description: `Add introspection libraries to the DYLD_IMAGE_PATH`,
			}, {
				Name:        []string{"--NSZombie"},
				Description: `Enables NSZombie`,
			}, {
				Name:        []string{"--32"},
				Description: `Runs service on appropriate 32-bit architecture`,
			}, {
				Name:        []string{"--stdin"},
				Description: `Sets the stdin path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "stdin-path",
				}},
			}, {
				Name:        []string{"--stdout"},
				Description: `Sets the stdout path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "stdout-path",
				}},
			}, {
				Name:        []string{"--stderr"},
				Description: `Sets the stderr path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "stderr-path",
				}},
			}, {
				Name:        []string{"--environment"},
				Description: `Sets environment variables`,
				Args: []model.Arg{{
					Name:       "environment-variables",
					IsVariadic: true,
				}},
			}},
		}, {
			Name:        []string{"kill"},
			Description: `Sends a signal to the service instance`,
			Args: []model.Arg{{
				Name:        "signal",
				Description: `Specify signal-name or signal-number`,
			}, {
				Name:        "service",
				Description: `Service or domain target`,
			}},
		}, {
			Name:        []string{"blame"},
			Description: `Prints the reason a service is running`,
			Args: []model.Arg{{
				Name:        "service",
				Description: `Service or domain target`,
			}},
		}, {
			Name:        []string{"print"},
			Description: `Prints a description of a domain or service`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFilepaths},
				Name:        "service",
				Description: `Service or domain target`,
			}},
		}, {
			Name:        []string{"print-cache"},
			Description: `Prints information about the service cache`,
		}, {
			Name:        []string{"print-disabled"},
			Description: `Prints which services are disabled`,
			Args: []model.Arg{{
				Name: "domain-target",
			}},
		}, {
			Name:        []string{"plist"},
			Description: `Prints a property list embedded in a binary (targets the Info.plist by default)`,
			Args: []model.Arg{{
				Name:        "segment",
				Description: `Segment or section`,
			}, {
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "Mach-O",
				IsOptional: true,
			}},
		}, {
			Name:        []string{"procinfo"},
			Description: `Prints port information about a process`,
			Args: []model.Arg{{
				Name: "pid",
			}},
		}, {
			Name:        []string{"hostinfo"},
			Description: `Prints port information about the host`,
		}, {
			Name:        []string{"resolveport"},
			Description: `Resolves a port name from a process to an endpoint in launchd`,
			Args: []model.Arg{{
				Name: "owner-pid",
			}, {
				Name: "port-name",
			}},
		}, {
			Name:        []string{"limit"},
			Description: `Reads or modifies launchd's resource limits`,
			Options: []model.Option{{
				Name: []string{"cpu"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}, {
				Name: []string{"filesize"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}, {
				Name: []string{"data"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}, {
				Name: []string{"stack"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}, {
				Name: []string{"core"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}, {
				Name: []string{"rss"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}, {
				Name: []string{"memlock"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}, {
				Name: []string{"maxproc"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}, {
				Name: []string{"maxfiles"},
				Args: []model.Arg{{
					Name:        "[both]",
					Description: `Specify a limit for both soft and hard`,
				}, {
					Name:        "[soft | hard]",
					Description: `Specify a soft/hard limit pair`,
					IsOptional:  true,
				}},
			}},
		}, {
			Name:        []string{"runstats"},
			Description: `Prints performance statistics for a service`,
			Args: []model.Arg{{
				Name:        "service",
				Description: `Service or domain target`,
			}},
		}, {
			Name:        []string{"examine"},
			Description: `Runs the specified analysis tool against launchd in a non-re-entrant manner`,
			Args: []model.Arg{{
				Name: "tool",
			}, {
				Name:       "[args | @PID]",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"config"},
			Description: `Modifies persistent configuration parameters for launchd domains`,
			Args: []model.Arg{{
				Name:        "[system | user]",
				Suggestions: []model.Suggestion{{Name: []string{`system`}}},
			}, {
				Name:        "param",
				Description: `A key for a key/value pair`,
			}, {
				Name:        "value",
				Description: `A value for a key/value pair`,
			}},
		}, {
			Name:        []string{"dumpstate"},
			Description: `Dumps launchd state to stdout`,
		}, {
			Name:        []string{"dumpjpcategory"},
			Description: `Dumps the jetsam properties category for all services`,
		}, {
			Name:        []string{"reboot"},
			Description: `Initiates a system reboot of the specified type`,
			Options: []model.Option{{
				Name: []string{"system"},
			}, {
				Name: []string{"userspace"},
			}, {
				Name: []string{"halt"},
			}, {
				Name: []string{"logout"},
			}, {
				Name: []string{"apps"},
			}},
		}, {
			Name:        []string{"load"},
			Description: `Recommended alternatives: bootstrap | enable. Bootstraps a service or directory of services`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "path",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-w"},
				Description: `Enable if disabled`,
			}, {
				Name:        []string{"-F"},
				Description: `Force load`,
			}, {
				Name:        []string{"-S"},
				Description: `Session`,
				Args: []model.Arg{{
					Name: "session",
				}},
			}, {
				Name:        []string{"-D"},
				Description: `Load files from specified domain`,
				Args: []model.Arg{{
					Name: "domain",
				}},
			}},
		}, {
			Name:        []string{"unload"},
			Description: `Recommended alternatives: bootout | disable. Unloads a service or directory of services`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "path",
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-w"},
				Description: `Enable if disabled`,
			}, {
				Name:        []string{"-F"},
				Description: `Force load`,
			}, {
				Name:        []string{"-S"},
				Description: `Session`,
				Args: []model.Arg{{
					Name: "session",
				}},
			}, {
				Name:        []string{"-D"},
				Description: `Load files from specified domain`,
				Args: []model.Arg{{
					Name: "domain",
				}},
			}},
		}, {
			Name:        []string{"remove"},
			Description: `Unloads the specified service name`,
			Args: []model.Arg{{
				Name:      "label",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"list"},
			Description: `Lists information about services`,
			Args: []model.Arg{{
				Name:       "label",
				Generator:  nil, // TODO: port over generator
				IsOptional: true,
			}},
		}, {
			Name:        []string{"start"},
			Description: `Starts the specified service`,
			Args: []model.Arg{{
				Name:      "label",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"stop"},
			Description: `Stops the specified service if it is running`,
			Args: []model.Arg{{
				Name:      "label",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"setenv"},
			Description: `Sets the specified environment variables for all services within the domain`,
			Args: []model.Arg{{
				Name: "key",
			}, {
				Name: "value",
			}},
		}, {
			Name:        []string{"unsetenv"},
			Description: `Unsets the specified environment variables for all services within the domain`,
			Args: []model.Arg{{
				Name: "key",
			}},
		}, {
			Name:        []string{"getenv"},
			Description: `Gets the value of an environment variable from within launchd`,
			Args: []model.Arg{{
				Name: "key",
			}},
		}, {
			Name:        []string{"bsexec"},
			Description: `Execute a program in another process' bootstrap context`,
			Args: []model.Arg{{
				Name: "PID",
			}, {
				Name: "command",
			}, {
				Name:       "args",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"asuser"},
			Description: `Execute a program in the bootstrap context of a given user`,
			Args: []model.Arg{{
				Name: "UID",
			}, {
				Name: "command",
			}, {
				Name:       "args",
				IsOptional: true,
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"submit"},
			Description: `Submit a basic job from the command line`,
			Args: []model.Arg{{
				Name:        "-l",
				Description: `Label flag`,
			}, {
				Name:        "label",
				Description: `Unique label to assign to launchd`,
				Generator:   nil, // TODO: port over generator
			}, {
				Name:        "command",
				Description: `Command to run`,
			}, {
				Name:       "arg",
				IsOptional: true,
				IsVariadic: true,
			}},
			Options: []model.Option{{
				Name:        []string{"-p"},
				Description: `Program to execute`,
				Args: []model.Arg{{
					Name: "executable",
				}},
			}, {
				Name:        []string{"-o"},
				Description: `Std out path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "stdout-path",
				}},
			}, {
				Name:        []string{"-e"},
				Description: `Std err path`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "stderr-path",
				}},
			}},
		}, {
			Name:        []string{"managerpid"},
			Description: `Prints the PID of the launchd controlling the session`,
		}, {
			Name:        []string{"manageruid"},
			Description: `Prints the UID of the current launchd session`,
		}, {
			Name:        []string{"managername"},
			Description: `Prints the name of the current launchd session`,
		}, {
			Name:        []string{"error"},
			Description: `Prints a description of an error`,
			Args: []model.Arg{{
				Name:        "type",
				Description: `Error domain type`,
				Suggestions: []model.Suggestion{{Name: []string{`posix`}}, {Name: []string{`mach`}}, {Name: []string{`bootstrap`}}},
			}, {
				Name:        "code",
				Description: `Numeric code`,
			}},
		}, {
			Name:        []string{"variant"},
			Description: `Prints the launchd variant`,
		}, {
			Name:        []string{"version"},
			Description: `Prints the launchd version`,
		}, {
			Name:        []string{"help"},
			Description: `Prints the usage for a given subcommand`,
		}},
	}
}
