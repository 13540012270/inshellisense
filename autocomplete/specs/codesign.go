// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.

package specs

import (
	"github.com/cpendery/clac/autocomplete/model"
)

func init() {
	Specs["codesign"] = model.Subcommand{
		Name:        []string{"codesign"},
		Description: `Create and manipulate code signatures`,
		Options: []model.Option{{
			Name:        []string{"--all-architectures"},
			Description: `When verifying a code signature on code that has a universal ('fat') Mach-O binary, separately verify each architecture contained. This is the default unless overridden with the -a (--architecture) option`,
		}, {
			Name:        []string{"-a", "--architecture"},
			Description: `When verifying or displaying signatures, explicitly select the Mach-O architecture given`,
			Args: []model.Arg{{
				Name: "architecture",
			}},
		}, {
			Name:        []string{"--bundle-version"},
			Description: `When handling versioned bundles such as frameworks, explicitly specify the version to operate on`,
			Args: []model.Arg{{
				Name: "version-string",
			}},
		}, {
			Name:        []string{"-d", "--display"},
			Description: `Display information about the code at the path(s) given`,
		}, {
			Name:        []string{"-D", "--detached"},
			Description: `When signing, designates that a detached signature should be written to the specified file`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"--deep"},
			Description: `When signing a bundle, specifies that nested code content such as helpers, frameworks, and plug-ins, should be recursively signed in turn. Beware that all signing options you specify will apply, in turn, to such nested content`,
		}, {
			Name:        []string{"--detached-database"},
			Description: `When signing, specifies that a detached signature should be generated as with the --detached option, but that the resulting signature should be written into a system database, from where it is made automatically available whenever apparently unsigned code is validated on the system`,
		}, {
			Name:        []string{"-f", "--force"},
			Description: `When signing, causes codesign to replace any existing signature on the path(s) given`,
		}, {
			Name:        []string{"-h", "--hosting"},
			Description: `Constructs and prints the hosting chain of a running program`,
		}, {
			Name:        []string{"-i", "--identifier"},
			Description: `During signing, explicitly specify the unique identifier string that is embedded in code signatures`,
			Args: []model.Arg{{
				Name: "identifier",
			}},
		}, {
			Name:        []string{"-o", "--options"},
			Description: `During signing, specifies a set of option flags to be embedded in the code signature`,
			Args: []model.Arg{{
				Name:      "version-string",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"-P", "--pagesize"},
			Description: `Indicates the granularity of code signing. Pagesize must be a power of two`,
			Args: []model.Arg{{
				Name: "size",
			}},
		}, {
			Name:        []string{"-r", "--requirements"},
			Description: `During signing, indicates that internal requirements should be embedded in the code path(s) as specified`,
			Args: []model.Arg{{
				Name: "requirements",
			}},
		}, {
			Name:        []string{"-R", "--test-requirement"},
			Description: `During verification, indicates that the path(s) given should be verified against the code requirement specified`,
			Args: []model.Arg{{
				Name: "requirement",
			}},
		}, {
			Name:        []string{"-s", "--sign"},
			Description: `Sign the code at the path(s) given using this identity`,
			Args: []model.Arg{{
				Name: "identity",
			}},
		}, {
			Name:        []string{"-v", "--verify"},
			Description: `Requests verification of code signatures`,
		}, {
			Name:        []string{"--continue"},
			Description: `Instructs codesign to continue processing path arguments even if processing one fails`,
		}, {
			Name:        []string{"--dryrun"},
			Description: `During signing, performs almost all signing operations, but does not actually write the result anywhere`,
		}, {
			Name:        []string{"--entitlements"},
			Description: `When signing, take the file at the given path and embed its contents in the signature as entitlement data`,
			Args: []model.Arg{{
				Name: "path",
			}},
		}, {
			Name:        []string{"--extract-certificates"},
			Description: `When displaying a signature, extract the certificates in the embedded certificate chain and write them to individual files`,
			Args: []model.Arg{{
				Name: "prefix",
			}},
		}, {
			Name:        []string{"--file-list"},
			Description: `When signing or displaying a signature, codesign writes to the given path a list of files that may have been modified as part of the signing process`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFilepaths},
				Name:       "file",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"--ignore-resources"},
			Description: `During static validation, do not validate the contents of the code's resources`,
		}, {
			Name:        []string{"--keychain"},
			Description: `During signing, only search for the signing identity in the keychain file specified`,
			Args: []model.Arg{{
				Name: "filename",
			}},
		}, {
			Name:        []string{"--prefix"},
			Description: `If no explicit unique identifier is specified (using the -i option), and if the implicitly generated identifier does not contain any dot (.) characters, then the given string is prefixed to the identifier before use`,
			Args: []model.Arg{{
				Name: "prefix",
			}},
		}, {
			Name:        []string{"--preserve-metadata=list"},
			Description: `When re-signing code that is already signed, reuse some information from the old signature`,
		}, {
			Name:        []string{"--resource-rules"},
			Description: `During signing, this option overrides the default rules for identifying and collecting bundle resources and nested code to be sealed into the signature`,
			Args: []model.Arg{{
				Name:      "file",
				Generator: nil, // TODO: port over generator
			}},
		}, {
			Name:        []string{"--timestamp"},
			Description: `During signing, requests that a timestamp authority server be contacted to authenticate the time of signing`,
			Args: []model.Arg{{
				Name:       "URL",
				IsOptional: true,
			}},
		}},
	}
}
