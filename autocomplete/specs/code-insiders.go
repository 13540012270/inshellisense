// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["code-insiders"] = model.Subcommand{
		Name:        []string{"code-insiders"},
		Description: `Visual Studio Code`,
		Args: []model.Arg{{
			Templates:  []model.Template{model.TemplateFilepaths, model.TemplateFolders},
			IsVariadic: true,
		}},
		Options: []model.Option{{
			Name:        []string{"-"},
			Description: `Read from stdin (e.g. 'ps aux | grep code | code -')`,
		}, {
			Name:        []string{"-d", "--diff"},
			Description: `Compare two files with each other`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}, {
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file",
			}},
		}, {
			Name:        []string{"-m", "--merge"},
			Description: `Perform a three-way merge by providing paths for two modified versions of a file, the common origin of both modified versions and the output file to save merge results`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path1",
			}, {
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "path2",
			}, {
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "base",
			}, {
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "result",
			}},
		}, {
			Name:        []string{"-a", "--add"},
			Description: `Add folder(s) to the last active window`,
			Args: []model.Arg{{
				Templates:  []model.Template{model.TemplateFolders},
				Name:       "folder",
				IsVariadic: true,
			}},
		}, {
			Name:        []string{"-g", "--goto"},
			Description: `Open a file at the path on the specified line and character position`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFilepaths},
				Name:      "file:line[:character]",
			}},
		}, {
			Name:        []string{"-n", "--new-window"},
			Description: `Force to open a new window`,
		}, {
			Name:        []string{"-r", "--reuse-window"},
			Description: `Force to open a file or folder in an already opened window`,
		}, {
			Name:        []string{"-w", "--wait"},
			Description: `Wait for the files to be closed before returning`,
		}, {
			Name:        []string{"--locale"},
			Description: `The locale to use (e.g. en-US or zh-TW)`,
			Args: []model.Arg{{
				Name: "locale",
				Suggestions: []model.Suggestion{{
					Name:        []string{`en`},
					Description: `English (US)`,
				}, {
					Name:        []string{`zh-CN`},
					Description: `Simplified Chinese`,
				}, {
					Name:        []string{`zh-TW`},
					Description: `Traditional Chinese`,
				}, {
					Name:        []string{`fr`},
					Description: `French`,
				}, {
					Name:        []string{`de`},
					Description: `German`,
				}, {
					Name:        []string{`it`},
					Description: `Italian`,
				}, {
					Name:        []string{`es`},
					Description: `Spanish`,
				}, {
					Name:        []string{`ja`},
					Description: `Japanese`,
				}, {
					Name:        []string{`ko`},
					Description: `Korean`,
				}, {
					Name:        []string{`ru`},
					Description: `Russian`,
				}, {
					Name:        []string{`bg`},
					Description: `Bulgarian`,
				}, {
					Name:        []string{`hu`},
					Description: `Hungarian`,
				}, {
					Name:        []string{`pt-br`},
					Description: `Portuguese (Brazil)`,
				}, {
					Name:        []string{`tr`},
					Description: `Turkish`,
				}},
			}},
		}, {
			Name:        []string{"--user-data-dir"},
			Description: `Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "dir",
			}},
		}, {
			Name:        []string{"--profile"},
			Description: `Opens the provided folder or workspace with the given profile and associates the profile with the workspace. If the profile does not exist, a new empty one is created. A folder or workspace must be provided for the profile to take effect`,
			Args: []model.Arg{{
				Name: "settingsProfileName",
			}},
		}, {
			Name:        []string{"-h", "--help"},
			Description: `Print usage`,
		}, {
			Name:        []string{"--extensions-dir"},
			Description: `Set the root path for extensions`,
			Args: []model.Arg{{
				Templates: []model.Template{model.TemplateFolders},
				Name:      "dir",
			}},
		}, {
			Name:        []string{"--list-extensions"},
			Description: `List the installed extensions`,
		}, {
			Name:        []string{"--show-versions"},
			Description: `Show versions of installed extensions, when using --list-extensions`,
		}, {
			Name:        []string{"--category"},
			Description: `Filters installed extensions by provided category, when using --list-extensions`,
			Args: []model.Arg{{
				Name:        "category",
				Suggestions: []model.Suggestion{{Name: []string{`azure`}}, {Name: []string{`data science`}}, {Name: []string{`debuggers`}}, {Name: []string{`extension packs`}}, {Name: []string{`education`}}, {Name: []string{`formatters`}}, {Name: []string{`keymaps`}}, {Name: []string{`language packs`}}, {Name: []string{`linters`}}, {Name: []string{`machine learning`}}, {Name: []string{`notebooks`}}, {Name: []string{`programming languages`}}, {Name: []string{`scm providers`}}, {Name: []string{`snippets`}}, {Name: []string{`testing`}}, {Name: []string{`themes`}}, {Name: []string{`visualization`}}, {Name: []string{`other`}}},
			}},
		}, {
			Name:        []string{"--install-extension"},
			Description: `Installs or updates an extension. The argument is either an extension id or a path to a VSIX. The identifier of an extension is '${publisher}.${name}'. Use '--force' argument to update to latest version. To install a specific version provide '@${version}'. For example: 'vscode.csharp@1.2.3'`,
			Args: []model.Arg{{
				Name: "extension-id[@version] | path-to-vsix",
			}},
		}, {
			Name:        []string{"--pre-release"},
			Description: `Installs the pre-release version of the extension, when using --install-extension`,
		}, {
			Name:        []string{"--uninstall-extension"},
			Description: `Uninstalls an extension`,
			Args: []model.Arg{{
				Name: "extension-id",
			}},
		}, {
			Name:        []string{"--enable-proposed-api"},
			Description: `Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually`,
		}, {
			Name:        []string{"-v", "--version"},
			Description: `Print version`,
		}, {
			Name:        []string{"--verbose"},
			Description: `Print verbose output (implies --wait)`,
		}, {
			Name:        []string{"--log"},
			Description: `Log level to use. Default is 'info' when unspecified`,
			Args: []model.Arg{{
				Name:        "level",
				Suggestions: []model.Suggestion{{Name: []string{`critical`}}, {Name: []string{`error`}}, {Name: []string{`warn`}}, {Name: []string{`info`}}, {Name: []string{`debug`}}, {Name: []string{`trace`}}, {Name: []string{`off`}}},
			}},
		}, {
			Name:        []string{"-s", "--status"},
			Description: `Print process usage and diagnostics information`,
		}, {
			Name:        []string{"--prof-startup"},
			Description: `Run CPU profiler during startup`,
		}, {
			Name:        []string{"--disable-extensions"},
			Description: `Disable all installed extensions`,
		}, {
			Name:        []string{"--disable-extension"},
			Description: `Disable an extension`,
			Args: []model.Arg{{
				Name: "extension-id",
			}},
		}, {
			Name:        []string{"--sync"},
			Description: `Turn sync on or off`,
			Args: []model.Arg{{
				Name:        "sync",
				Description: `Whether to enable sync`,
				Suggestions: []model.Suggestion{{Name: []string{`on`}}, {Name: []string{`off`}}},
			}},
		}, {
			Name:        []string{"--inspect-extensions"},
			Description: `Allow debugging and profiling of extensions. Check the developer tools for the connection URI`,
			Args: []model.Arg{{
				Name: "port",
			}},
		}, {
			Name:        []string{"--inspect-brk-extensions"},
			Description: `Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI`,
			Args: []model.Arg{{
				Name: "port",
			}},
		}, {
			Name:        []string{"--disable-gpu"},
			Description: `Disable GPU hardware acceleration`,
		}, {
			Name:        []string{"--max-memory"},
			Description: `Max memory size for a window (in Mbytes)`,
			Args: []model.Arg{{
				Name:        "memory",
				Description: `Memory in megabytes`,
			}},
		}, {
			Name:        []string{"--telemetry"},
			Description: `Shows all telemetry events which VS code collects`,
		}},
	}
}
