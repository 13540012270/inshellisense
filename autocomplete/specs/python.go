// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["python"] = model.Subcommand{
		Name:        []string{"python"},
		Description: `Run the python interpreter`,
		Args: []model.Arg{{
			Name:      "python script",
			Generator: nil, // TODO: port over generator
		}},
		Options: []model.Option{{
			Name:        []string{"-c"},
			Description: `Execute the Python code in command. command can be one or more statements separated by newlines, with significant leading whitespace as in normal module code`,
			Args: []model.Arg{{
				Name:      "command",
				IsCommand: true,
			}},
		}, {
			Name:        []string{"-m"},
			Description: `Module`,
			Args: []model.Arg{{
				Name:        "python module",
				Suggestions: []model.Suggestion{{Name: []string{`http.server`}}},
			}},
		}, {
			Name:        []string{"-?", "-h", "--help"},
			Description: `Print a short description of all command line options`,
		}, {
			Name:        []string{"-V", "--version"},
			Description: `Print the Python version number and exit`,
		}, {
			Name:        []string{"-b"},
			Description: `Issue a warning when comparing bytes or bytearray with str or bytes with int. Issue an error when the option is given twice (-bb)`,
		}, {
			Name:        []string{"-B"},
			Description: `If given, Python won’t try to write .pyc files on the import of source modules`,
		}, {
			Name:        []string{"--check-hash-based-pycs"},
			Description: `Control the validation behavior of hash-based .pyc files. See Cached bytecode invalidation`,
			Args: []model.Arg{{
				Suggestions: []model.Suggestion{{
					Name: []string{`default`},
				}, {
					Name: []string{`always`},
				}, {
					Name: []string{`never`},
				}},
			}},
		}, {
			Name:        []string{"-d"},
			Description: `Turn on parser debugging output (for expert only, depending on compilation options)`,
		}, {
			Name:        []string{"-E"},
			Description: `Ignore all PYTHON* environment variables, e.g. PYTHONPATH and PYTHONHOME, that might be set`,
		}, {
			Name:        []string{"-i"},
			Description: `When a script is passed as first argument or the -c option is used, enter interactive mode after executing the script or the command, even when sys.stdin does not appear to be a terminal`,
		}, {
			Name:        []string{"-I"},
			Description: `Run Python in isolated mode. This also implies -E and -s. In isolated mode sys.path contains neither the script’s directory nor the user’s site-packages directory`,
		}, {
			Name:        []string{"-O"},
			Description: `Remove assert statements and any code conditional on the value of __debug__`,
		}, {
			Name:        []string{"-OO"},
			Description: `Do -O and also discard docstrings`,
		}, {
			Name:        []string{"-g"},
			Description: `Don’t display the copyright and version messages even in interactive mode`,
		}, {
			Name:        []string{"-R"},
			Description: `Turn on hash randomization. This option only has an effect if the PYTHONHASHSEED environment variable is set to 0, since hash randomization is enabled by default`,
		}, {
			Name:        []string{"-s"},
			Description: `Don’t add the user site-packages directory to sys.path`,
		}, {
			Name:        []string{"-S"},
			Description: `Disable the import of the module site and the site-dependent manipulations of sys.path that it entails`,
		}, {
			Name:        []string{"-u"},
			Description: `Force the stdout and stderr streams to be unbuffered. This option has no effect on the stdin stream`,
		}, {
			Name:        []string{"-v"},
			Description: `Print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded`,
		}, {
			Name:        []string{"-W"},
			Description: `Warning control. Python’s warning machinery by default prints warning messages to sys.stderr`,
			Args:        []model.Arg{{}},
		}, {
			Name:        []string{"-x"},
			Description: `Skip the first line of the source, allowing use of non-Unix forms of #!cmd. This is intended for a DOS specific hack only`,
		}, {
			Name:        []string{"-X"},
			Description: `Reserved for various implementation-specific options`,
			Args: []model.Arg{{
				Suggestions: []model.Suggestion{{
					Name: []string{`faulthandler`},
				}, {
					Name: []string{`showrefcount`},
				}, {
					Name: []string{`tracemalloc`},
				}, {
					Name: []string{`showalloccount`},
				}, {
					Name: []string{`importtime`},
				}, {
					Name: []string{`dev`},
				}, {
					Name: []string{`utf8`},
				}, {
					Name: []string{`pycache_prefix=PATH`},
				}},
			}},
		}},
	}
}
