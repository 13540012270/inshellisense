// Code generated by autocomplete/extract/extract.ts. DO NOT EDIT.
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package specs

import (
	"github.com/microsoft/clac/autocomplete/model"
)

func init() {
	Specs["zapier"] = model.Subcommand{
		Name:        []string{"zapier-platform-cli"},
		Description: `The Zapier CLI is a developer-focused way to create and maintain Zapier integrations. See more at https://github.com/zapier/zapier-platform`,
		Subcommands: []model.Subcommand{{
			Name:        []string{"analytics"},
			Description: `Show the status of the analytics that are collected. Also used to change what is collected`,
			Options: []model.Option{{
				Name:        []string{"-m", "--mode"},
				Description: `Choose how much information to share. Anonymous mode drops the OS type and Zapier user id, but keeps command info. Identifying information is used only for debugging purposes`,
				Args: []model.Arg{{
					Name:        "mode",
					Suggestions: []model.Suggestion{{Name: []string{`enabled`}}, {Name: []string{`anonymous`}}, {Name: []string{`disabled`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"build"},
			Description: `Build a pushable zip from the current directory`,
			Options: []model.Option{{
				Name:        []string{"--disable-dependency-detection"},
				Description: `Disable "smart" file inclusion. By default, Zapier only includes files that are required by "index.js". If you (or your dependencies) require files dynamically (such as with "require(someVar)"), then you may see "Cannot find module" errors. Disabling this may make your "build.zip" too large. If that's the case, try using the "includeInBuild" option in your ".zapierapprc". See the docs about "includeInBuild" for more info`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"convert"},
			Description: `Convert a Legacy Web Builder app or Visual Builder integration to a CLI integration`,
			Args: []model.Arg{{
				Name:        "integrationId",
				Description: `To get the integration/app ID, go to "https://zapier.com/app/developer", click on an integration, and copy the number directly after "/app/" in the URL`,
			}, {
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "path",
				Description: `Relative to your current path - IE: "." for current directory`,
			}},
			Options: []model.Option{{
				Name:        []string{"-v", "--version"},
				Description: `Convert a specific version. Required when converting a Visual Builder integration`,
				Args: []model.Arg{{
					Name: "version",
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"delete:integration", "delete:app"},
			Description: `Delete your integration (including all versions)`,
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"delete:version"},
			Description: `Delete a specific version of your integration`,
			Args: []model.Arg{{
				Name:        "version",
				Description: `Specify the version to delete. It must have no users or Zaps`,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"deprecate"},
			Description: `Mark a non-production version of your integration as deprecated, with removal by a certain date`,
			Args: []model.Arg{{
				Name:        "version",
				Description: `The version to deprecate`,
			}, {
				Name:        "date",
				Description: `The date (YYYY-MM-DD) when Zapier will make the specified version unavailable`,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"describe"},
			Description: `Describe the current integraiton`,
			Options: []model.Option{{
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"env:get"},
			Description: `Get environment variables for a version`,
			Args: []model.Arg{{
				Name:        "version",
				Description: `The version to get the environment for`,
			}},
			Options: []model.Option{{
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}},
		}, {
			Name:        []string{"env:set"},
			Description: `Set environment variables for a version`,
			Args: []model.Arg{{
				Name:        "version",
				Description: `The version to set the environment for. Values are copied forward when a new version is created, but this command will only ever affect the specified version`,
			}, {
				Name:        "key-value pairs...",
				Description: `The key-value pairs to set. Keys are case-insensitive. Each pair should be space separated and pairs should be separated by an "=". For example: "A=123 B=456"`,
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"env:unset"},
			Description: `Unset environment variables for a version`,
			Args: []model.Arg{{
				Name:        "version",
				Description: `The version to set the environment for`,
			}, {
				Name:        "keys...",
				Description: `The keys to unset. Keys are case-insensitive`,
				IsOptional:  true,
				IsVariadic:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"history"},
			Description: `Get the history of your integration`,
			Options: []model.Option{{
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"init"},
			Description: `Initialize a new Zapier integration with a project template`,
			Args: []model.Arg{{
				Templates:   []model.Template{model.TemplateFolders},
				Name:        "path",
				Description: `Where to create the new integration. If the directory doesn't exist, it will be created. If the directory isn't empty, we'll ask for confirmation`,
			}},
			Options: []model.Option{{
				Name:        []string{"-t", "--template"},
				Description: `The template to start your integration with`,
				Args: []model.Arg{{
					Name:        "template",
					Suggestions: []model.Suggestion{{Name: []string{`basic-auth`}}, {Name: []string{`callback`}}, {Name: []string{`custom-auth`}}, {Name: []string{`digest-auth`}}, {Name: []string{`dynamic-dropdown`}}, {Name: []string{`files`}}, {Name: []string{`minimal`}}, {Name: []string{`oauth1-trello`}}, {Name: []string{`oauth2`}}, {Name: []string{`search-or-create`}}, {Name: []string{`session-auth`}}, {Name: []string{`typescript`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"integrations", "apps"},
			Description: `List integrations you have admin access to`,
			Options: []model.Option{{
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"link"},
			Description: `Link the current directory with an existing integration`,
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"login"},
			Description: `Configure your "~/.zapierrc" with a deploy key`,
			Options: []model.Option{{
				Name:        []string{"-s", "--sso"},
				Description: `Use this flag if you log into Zapier a Single Sign-On (SSO) button and don't have a Zapier password`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"logout"},
			Description: `Deactivate your active deploy key and reset "~/.zapierrc"`,
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"logs"},
			Description: `Print recent logs`,
			Options: []model.Option{{
				Name:        []string{"-v", "--version"},
				Description: `Filter logs to the specified version`,
				Args: []model.Arg{{
					Name: "version",
				}},
			}, {
				Name:        []string{"-s", "--status"},
				Description: `Filter logs to only see errors or successes`,
				Args: []model.Arg{{
					Name:        "status",
					Suggestions: []model.Suggestion{{Name: []string{`any`}}, {Name: []string{`success`}}, {Name: []string{`error`}}},
				}},
			}, {
				Name:        []string{"-t", "--type"},
				Description: `See logs of the specified type`,
				Args: []model.Arg{{
					Name:        "type",
					Suggestions: []model.Suggestion{{Name: []string{`console`}}, {Name: []string{`bundle`}}, {Name: []string{`http`}}},
				}},
			}, {
				Name:        []string{"--detailed"},
				Description: `See extra info, like request/response body and headers`,
			}, {
				Name:        []string{"-u", "--user"},
				Description: `Only show logs for this user. Defaults to your account`,
				Args: []model.Arg{{
					Name: "user",
				}},
			}, {
				Name:        []string{"--limit"},
				Description: `Cap the number of logs returned. Max is 50 (also the default)`,
				Args: []model.Arg{{
					Name: "limit",
				}},
			}, {
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"migrate"},
			Description: `Migrate users from one version of your integration to another`,
			Args: []model.Arg{{
				Name:        "fromVersion",
				Description: `The version FROM which to migrate users`,
			}, {
				Name:        "toVersion",
				Description: `The version TO which to migrate users`,
			}, {
				Name:        "percent",
				Description: `Percentage (between 1 and 100) of users to migrate`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--user"},
				Description: `Migrate only this user`,
				Args: []model.Arg{{
					Name: "user",
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"promote"},
			Description: `Promote a specific version to public access`,
			Args: []model.Arg{{
				Name:        "version",
				Description: `The version you want promote`,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"push"},
			Description: `Build and upload the current integration`,
			Options: []model.Option{{
				Name:        []string{"--disable-dependency-detection"},
				Description: `Disable "smart" file inclusion. By default, Zapier only includes files that are required by "index.js". If you (or your dependencies) require files dynamically (such as with "require(someVar)"), then you may see "Cannot find module" errors. Disabling this may make your "build.zip" too large. If that's the case, try using the "includeInBuild" option in your ".zapierapprc". See the docs about "includeInBuild" for more info`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"register"},
			Description: `Register a new integration in your account`,
			Args: []model.Arg{{
				Name:        "title",
				Description: `Your integrations's public title. Asked interactively if not present`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"scaffold"},
			Description: `Add a starting trigger, create, search, or resource to your integration`,
			Args: []model.Arg{{
				Name:        "actionType",
				Suggestions: []model.Suggestion{{Name: []string{`trigger`}}, {Name: []string{`search`}}, {Name: []string{`create`}}, {Name: []string{`resource`}}},
			}, {
				Name: "noun",
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--dest"},
				Description: `Specify the new file's directory. Use this flag when you want to create a different folder structure such as "src/triggers" instead of the default "triggers". Defaults to "[triggers|searches|creates]/{noun}"`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "dest",
				}},
			}, {
				Name:        []string{"--test-dest"},
				Description: `Specify the new test file's directory. Use this flag when you want to create a different folder structure such as "src/triggers" instead of the default "triggers". Defaults to "test/[triggers|searches|creates]/{noun}"`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFolders},
					Name:      "test-dest",
				}},
			}, {
				Name:        []string{"-e", "--entry"},
				Description: `Supply the path to your integration's root ("index.js"). Only needed if your "index.js" is in a subfolder, like "src"`,
				Args: []model.Arg{{
					Templates: []model.Template{model.TemplateFilepaths},
					Name:      "entry",
				}},
			}, {
				Name:        []string{"-f", "--force"},
				Description: `Should we overwrite an existing trigger/search/create file?`,
			}, {
				Name:        []string{"--no-help"},
				Description: `When scaffolding, should we skip adding helpful intro comments? Useful if this isn't your first rodeo`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"team:add", "team:invite"},
			Description: `Add a team member to your integration`,
			Args: []model.Arg{{
				Name:        "email",
				Description: `The user to be invited. If they don't have a Zapier account, they'll be prompted to create one`,
			}, {
				Name:        "role",
				Description: `The level the invited team member should be at. Admins can edit everything and get email updates. Subscribers only get email updates`,
				Suggestions: []model.Suggestion{{Name: []string{`admin`}}, {Name: []string{`subscriber`}}},
			}, {
				Name:        "message",
				Description: `A message sent in the email to your team member, if you need to provide context. Wrap the message in quotes to ensure spaces get saved`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"team:get", "team:list"},
			Description: `Get team members involved with your integration`,
			Options: []model.Option{{
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"team:remove", "team:delete"},
			Description: `Remove a team member from all versions of your integration`,
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"test"},
			Description: `Test your integration via the "test" script in your "package.json"`,
			Options: []model.Option{{
				Name:        []string{"--skip-validate"},
				Description: `Forgo running "zapier validate" before tests are run. This will speed up tests if you're modifying functionality of an existing integration rather than adding new actions`,
			}, {
				Name:        []string{"--yarn"},
				Description: `Use "yarn" instead of "npm". This happens automatically if there's a "yarn.lock" file, but you can manually force "yarn" if you run tests from a sub-directory`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"upload"},
			Description: `Upload the latest build of your integration to Zapier`,
			Options: []model.Option{{
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"users:add", "users:invite"},
			Description: `Add a user to some or all versions of your integration`,
			Args: []model.Arg{{
				Name:        "email",
				Description: `The user to be invited. If they don't have a Zapier account, they'll be prompted to create one`,
			}, {
				Name:        "version",
				Description: `A version string (like 1.2.3). Optional, used only if you want to invite a user to a specific version instead of all versions`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"-f", "--force"},
				Description: `Skip confirmation. Useful for running programmatically`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"users:get", "users:list"},
			Description: `Get a list of users who have been invited to your integration`,
			Options: []model.Option{{
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"users:links"},
			Description: `Get a list of links that are used to invite users to your integration`,
			Options: []model.Option{{
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"users:remove", "users:delete"},
			Description: `Remove a user from all versions of your integration`,
			Args: []model.Arg{{
				Name:        "email",
				Description: `The user to be removed`,
			}},
			Options: []model.Option{{
				Name:        []string{"-f", "--force"},
				Description: `Skips confirmation. Useful for running programmatically`,
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"validate"},
			Description: `Validate your integration`,
			Options: []model.Option{{
				Name:        []string{"--without-style"},
				Description: `Forgo pinging the Zapier server to run further checks`,
			}, {
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"versions"},
			Description: `List the versions of your integration available for use in the Zapier editor`,
			Options: []model.Option{{
				Name:        []string{"-f", "--format"},
				Description: `Change the way structured data is presented. If "json" or "raw", you can pipe the output of the command into other tools, such as jq`,
				Args: []model.Arg{{
					Name:        "format",
					Suggestions: []model.Suggestion{{Name: []string{`plain`}}, {Name: []string{`json`}}, {Name: []string{`raw`}}, {Name: []string{`row`}}, {Name: []string{`table`}}},
				}},
			}, {
				Name:        []string{"-d", "--debug"},
				Description: `Show extra debugging output`,
			}},
		}, {
			Name:        []string{"help"},
			Description: `Display help for <%= config.bin %>`,
			Args: []model.Arg{{
				Name:        "command",
				Description: `Command to show help for`,
				IsOptional:  true,
			}},
			Options: []model.Option{{
				Name:        []string{"--all"},
				Description: `See all commands in CLI`,
			}},
		}},
	}
}
